{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Wealth Sprint Game\n\n## Overview\n\nWealth Sprint is a financial simulation game built with React and TypeScript. It's a gamified experience where players make financial decisions to achieve wealth and financial independence. The game combines real-time financial scenarios, team management, and strategic decision-making in an engaging dashboard-style interface.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **State Management**: Zustand with subscriptions for reactive state management\n- **Styling**: Tailwind CSS with custom design system\n- **UI Components**: Radix UI primitives with custom shadcn/ui components\n- **Build Tool**: Vite for fast development and optimized builds\n- **3D Graphics**: React Three Fiber for potential 3D visualizations\n- **Charts**: Chart.js for financial data visualization\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Storage**: Hybrid approach with in-memory storage for development and PostgreSQL for production\n- **Mobile Build System**: Complete APK build automation with GitHub integration and Expo EAS builds\n\n### Full-Stack Integration\n- **Monorepo Structure**: Client and server code in the same repository\n- **Shared Types**: Common TypeScript interfaces in `/shared` directory\n- **API Layer**: RESTful API with Express routes\n- **Development**: Vite dev server with Express backend integration\n\n## Key Components\n\n### Game Engine\n- **Scenario Engine**: Generates dynamic financial scenarios based on player stats\n- **Financial Engine**: Calculates net worth, cash flow, and financial independence\n- **Time Engine**: Background time progression at 24× speed with automatic triggers\n- **Team Management**: Simulates team dynamics and employee relationships\n- **Audio System**: Background music and sound effects with mute controls\n\n### State Management Stores\n- **Game State**: Core game logic, time progression, and phase management\n- **Financial Data**: Stock prices, bonds, bank accounts, and portfolio management\n- **Team Management**: Employee stats, loyalty, and team synergy\n- **Audio**: Sound effects and music control\n\n### UI Sections\n- **Dashboard**: Overview of financial status and game progress\n- **Cashflow**: Income and expense tracking\n- **Stocks/Bonds**: Investment portfolio management\n- **Team**: Employee management and team dynamics\n- **Business Deals**: Strategic business opportunities\n- **Settings**: Game preferences, audio controls, and mobile app build system\n\n### Mobile App Build System\n- **APK Builder**: Complete automation for building and downloading Android APKs\n- **GitHub Integration**: Automatic repository creation and code push to GitHub\n- **Expo EAS Build**: Real-time build monitoring with 15-second polling intervals\n- **Build Status Tracking**: Live progress updates through server-sent events\n- **Error Handling**: Comprehensive error reporting for GitHub and Expo API issues\n- **Authentication**: Uses GitHub personal access tokens and Expo EAS tokens\n- **Final Output**: Real APK download links with \"Build Complete\" confirmation\n\n## Data Flow\n\n1. **Game Initialization**: Load initial scenarios, financial data, and team members\n2. **Time Progression**: Advance game time, triggering new scenarios and market updates\n3. **Decision Making**: Player selects scenario options, affecting stats and finances\n4. **Financial Calculations**: Real-time updates to net worth, cash flow, and portfolio values\n5. **Team Dynamics**: Employee satisfaction and productivity calculations\n6. **Progress Tracking**: Monitor path to financial independence\n\n## External Dependencies\n\n### Frontend Libraries\n- **UI Framework**: React with extensive Radix UI component library\n- **State Management**: Zustand for predictable state updates\n- **Styling**: Tailwind CSS with custom theme variables\n- **3D Graphics**: React Three Fiber ecosystem for potential 3D features\n- **Charts**: Chart.js for financial data visualization\n- **Audio**: Native HTML5 Audio API\n\n### Backend Dependencies\n- **Database**: Neon Database (serverless PostgreSQL)\n- **ORM**: Drizzle with type-safe queries\n- **Server**: Express.js with TypeScript support\n- **Session Management**: Connect-pg-simple for PostgreSQL sessions\n\n### Development Tools\n- **Build System**: Vite with React plugin\n- **TypeScript**: Full type safety across client and server\n- **Code Quality**: ESLint and Prettier (implied by project structure)\n\n## Deployment Strategy\n\n### Build Process\n1. **Client Build**: Vite builds React app to `/dist/public`\n2. **Server Build**: esbuild bundles Express server to `/dist`\n3. **Database**: Drizzle migrations applied to PostgreSQL\n\n### Production Setup\n- **Environment Variables**: `DATABASE_URL` for PostgreSQL connection\n- **Static Assets**: Served from `/dist/public`\n- **API Routes**: Express server handles `/api/*` routes\n- **Database**: Neon Database provides serverless PostgreSQL\n\n### Development Environment\n- **Hot Reload**: Vite dev server with HMR\n- **API Proxy**: Development server proxies API calls to Express\n- **Database**: In-memory storage for development, PostgreSQL for production\n\n## Changelog\n\n```\nChangelog:\n- July 05, 2025. Initial setup\n- July 07, 2025. Fixed React import issues, added PWA support, created icons and manifest\n- July 09, 2025. Added background time engine with 24× speed for game progression\n- July 12, 2025. Major cleanup: restored GameDashboard UI, removed unused files and stores, fixed console errors\n- July 14, 2025. Upgraded APK automation system: Fixed deprecated expo login, added EAS CLI support, improved security with proper environment variable handling\n- July 14, 2025. Transformed Sage AI into real-time multilingual chat assistant: Added conversation storage, chat history, language support (9 languages), emotional financial guidance, compact responsive design with dark theme integration\n- July 14, 2025. Implemented GORK AI Advanced Learning System: Created sophisticated emotional intelligence engine with Supabase integration, game state access, multilingual support (English/Hindi/Hinglish), contextual responses based on XP/mood/financial status, conversation learning and player profiling. AI now provides personalized emotional financial guidance with real-time adaptation.\n- July 14, 2025. Fixed critical startup error: Made Supabase initialization conditional and graceful, preventing app crashes when database is unavailable. Added null-safety for all database operations.\n- July 14, 2025. Resolved APK build compatibility issues: Created mobile-specific package.json without vite-plugin-glsl (Node.js incompatibility), added automatic yarn.lock generation, EAS configuration with Node.js 18.18.0 compatibility, and mobile-optimized vite config for successful Expo builds.\n- July 15, 2025. Fixed GitHub push error and updated APK build system: Resolved \"src refspec main does not match any\" error by adding explicit main branch creation, implemented proper EAS project initialization with automatic project ID creation, updated to latest Expo SDK 52.0.0 with React Native 0.76.3, added comprehensive error handling and fallback mechanisms, created automatic mobile app icon generation, and improved build status polling with better error messages.\n```\n\n## User Preferences\n\n```\nPreferred communication style: Simple, everyday language.\n```","size_bytes":7524},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"app.icon.js/service-worker.js":{"content":"self.addEventListener('install', function(e) {\n  e.waitUntil(\n    caches.open('wealth-sprint-store').then(function(cache) {\n      return cache.addAll([\n        '/',\n        '/index.html',\n        '/style.css',\n        '/script.js'\n      ]);\n    })\n  );\n});\n\nself.addEventListener('fetch', function(e) {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      return response || fetch(e.request);\n    })\n  );\n});","size_bytes":432},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { APKBuilder } from \"./apk-builder\";\nimport { registerSageRoutes } from \"./gork-api\";\nimport { registerAdvancedAIRoutes } from \"./advanced-ai\";\nimport { initializeDatabase } from \"./supabase\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  // APK Build endpoint\n  app.post(\"/api/build-apk\", async (req, res) => {\n    try {\n      const builder = new APKBuilder();\n      \n      res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Cache-Control'\n      });\n\n      // Start the build process\n      const result = await builder.buildAPK((status) => {\n        res.write(`data: ${JSON.stringify(status)}\\n\\n`);\n      });\n\n      // Send final result and log to console\n      res.write(`data: ${JSON.stringify(result)}\\n\\n`);\n      \n      // Log the final output to console as specified\n      if (result.success && result.downloadUrl) {\n        console.log('\\n✅ GitHub push complete');\n        console.log('🔄 Expo build started');\n        console.log('⏳ Building APK...');\n        console.log(`📦 APK Ready: ${result.downloadUrl}`);\n      } else {\n        console.log('\\n❌ APK Build failed!');\n        console.log(`❌ Error: ${result.error}`);\n      }\n      \n      res.end();\n    } catch (error) {\n      res.write(`data: ${JSON.stringify({\n        step: 'error',\n        message: 'Build process failed',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      })}\\n\\n`);\n      res.end();\n    }\n  });\n\n  // Initialize database for AI learning\n  await initializeDatabase();\n  \n  // Register Sage AI routes\n  registerSageRoutes(app);\n  \n  // Register advanced AI routes\n  registerAdvancedAIRoutes(app);\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":2256},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/public/sw.js":{"content":"const CACHE_NAME = 'wealth-sprint-v1';\nconst urlsToCache = [\n  '/',\n  '/manifest.webmanifest',\n  '/icon-192.png',\n  '/icon-512.png'\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(urlsToCache))\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      })\n  );\n});","size_bytes":529},"client/src/App.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport GameDashboard from \"./components/game/GameDashboard\";\nimport { Toaster } from \"./components/ui/sonner\";\nimport { ErrorBoundary } from \"./components/ErrorBoundary\";\nimport \"@fontsource/inter\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [showGame, setShowGame] = useState(false);\n\n  useEffect(() => {\n    // Initialize game  \n    if (!gameStarted) {\n      setGameStarted(true);\n    }\n    setShowGame(true);\n  }, [gameStarted]);\n\n  if (!showGame) {\n    return (\n      <div className=\"min-h-screen bg-[#f5f0e6] flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold text-[#3a3a3a] mb-4\">Wealth Sprint</h1>\n          <p className=\"text-lg text-[#3a3a3a] opacity-70\">Loading your financial journey...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <div className=\"min-h-screen bg-[#f5f0e6] overflow-x-hidden\">\n          <ErrorBoundary>\n            <GameDashboard />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <Toaster position=\"bottom-right\" />\n          </ErrorBoundary>\n        </div>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":1441},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Mobile scrolling fixes */\nhtml, body {\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Safe area support for mobile devices */\n.safe-area-pb {\n  padding-bottom: env(safe-area-inset-bottom);\n}\n\n/* Ensure proper scrolling on mobile */\n.mobile-scroll {\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  max-height: calc(100vh - 200px);\n}\n\n/* Fix for mobile viewport */\n@media (max-width: 768px) {\n  .min-h-screen {\n    min-height: 100vh;\n    min-height: -webkit-fill-available;\n  }\n  \n  html {\n    height: -webkit-fill-available;\n  }\n}\n\n/* Theme Support */\n:root {\n  --primary: #d4af37;\n  --primary-foreground: white;\n  --secondary: #f5f0e6;\n  --secondary-foreground: #3a3a3a;\n  --background: #f5f0e6;\n  --foreground: #3a3a3a;\n  --card: white;\n  --card-foreground: #3a3a3a;\n  --border: #e5e7eb;\n  --muted: #f3f4f6;\n  --muted-foreground: #6b7280;\n}\n\n/* Dark Theme */\n.dark {\n  --primary: #d4af37;\n  --primary-foreground: white;\n  --secondary: #1f2937;\n  --secondary-foreground: #f9fafb;\n  --background: #111827;\n  --foreground: #f9fafb;\n  --card: #1f2937;\n  --card-foreground: #f9fafb;\n  --border: #374151;\n  --muted: #374151;\n  --muted-foreground: #9ca3af;\n}\n\n.dark body {\n  background-color: var(--background);\n  color: var(--foreground);\n}\n\n/* Cyber White Theme */\n.cyber {\n  --primary: #00ffff;\n  --primary-foreground: #000011;\n  --secondary: #000022;\n  --secondary-foreground: #ffffff;\n  --background: #000011;\n  --foreground: #ffffff;\n  --card: #001122;\n  --card-foreground: #ffffff;\n  --border: #00ffff;\n  --muted: #001133;\n  --muted-foreground: #00cccc;\n}\n\n.cyber body {\n  background: linear-gradient(135deg, #000011 0%, #000033 100%);\n  color: var(--foreground);\n}\n\n.cyber .border {\n  border-color: var(--border);\n  box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);\n}\n\n/* Notification styles */\n.notification-enter {\n  opacity: 0;\n  transform: translateX(100%);\n}\n\n.notification-enter-active {\n  opacity: 1;\n  transform: translateX(0);\n  transition: opacity 300ms, transform 300ms;\n}\n\n.notification-exit {\n  opacity: 1;\n}\n\n.notification-exit-active {\n  opacity: 0;\n  transform: translateX(100%);\n  transition: opacity 300ms, transform 300ms;\n}\n\n/* Button hover effects */\n.btn-hover {\n  transition: all 0.2s ease-in-out;\n}\n\n.btn-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n/* Money change animations */\n@keyframes money-increase {\n  0% { transform: scale(1); color: #16a34a; }\n  50% { transform: scale(1.1); color: #15803d; }\n  100% { transform: scale(1); color: #16a34a; }\n}\n\n@keyframes money-decrease {\n  0% { transform: scale(1); color: #dc2626; }\n  50% { transform: scale(0.95); color: #b91c1c; }\n  100% { transform: scale(1); color: #dc2626; }\n}\n\n.money-up {\n  animation: money-increase 0.6s ease-in-out;\n}\n\n.money-down {\n  animation: money-decrease 0.6s ease-in-out;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":3282},"client/src/main.tsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":184},"client/src/hooks/use-is-mobile.tsx":{"content":"import React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":560},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatIndianCurrency(amount: number): string {\n  if (amount < 1000) {\n    return `₹${amount}`;\n  } else if (amount < 100000) {\n    return `₹${(amount / 1000).toFixed(1)}k`;\n  } else if (amount < 10000000) {\n    return `₹${(amount / 100000).toFixed(1)}La`;\n  } else if (amount < 1000000000) {\n    return `₹${(amount / 10000000).toFixed(1)}Cr`;\n  } else if (amount < 100000000000) {\n    return `₹${(amount / 1000000000).toFixed(1)}B`;\n  } else {\n    return `₹${(amount / 100000000000).toFixed(1)}T`;\n  }\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":971},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/game/DashboardBar.tsx":{"content":"import React from 'react';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { formatIndianCurrency } from '../../lib/utils';\nimport { Card, CardContent } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Progress } from '../ui/progress';\nimport { \n  DollarSign, \n  Heart, \n  AlertTriangle, \n  Brain, \n  Scale, \n  Star, \n  Battery,\n  TrendingUp,\n  TrendingDown,\n  Target\n} from 'lucide-react';\n\nconst DashboardBar: React.FC = () => {\n  const { playerStats, financialData, currentWeek, currentDay, gameState } = useWealthSprintGame();\n\n  // Using the new Indian currency formatting function\n\n  const getStatColor = (value: number, isStress = false) => {\n    if (isStress) {\n      // For stress, lower is better\n      if (value <= 20) return 'text-green-600';\n      if (value <= 40) return 'text-yellow-600';\n      if (value <= 60) return 'text-orange-600';\n      return 'text-red-600';\n    } else {\n      // For other stats, higher is better\n      if (value >= 80) return 'text-green-600';\n      if (value >= 60) return 'text-yellow-600';\n      if (value >= 40) return 'text-orange-600';\n      return 'text-red-600';\n    }\n  };\n\n  const getStatBgColor = (value: number, isStress = false) => {\n    if (isStress) {\n      if (value <= 20) return 'bg-green-100';\n      if (value <= 40) return 'bg-yellow-100';\n      if (value <= 60) return 'bg-orange-100';\n      return 'bg-red-100';\n    } else {\n      if (value >= 80) return 'bg-green-100';\n      if (value >= 60) return 'bg-yellow-100';\n      if (value >= 40) return 'bg-orange-100';\n      return 'bg-red-100';\n    }\n  };\n\n  const fiProgress = Math.min(100, (financialData.sideIncome / financialData.monthlyExpenses) * 100);\n\n  const stats = [\n    {\n      icon: DollarSign,\n      label: 'Cash',\n      value: formatIndianCurrency(financialData.inHandCash),\n      color: 'text-green-600',\n      bgColor: 'bg-green-100'\n    },\n    {\n      icon: Heart,\n      label: 'Emotion',\n      value: playerStats.emotion,\n      color: getStatColor(playerStats.emotion),\n      bgColor: getStatBgColor(playerStats.emotion)\n    },\n    {\n      icon: AlertTriangle,\n      label: 'Stress',\n      value: playerStats.stress,\n      color: getStatColor(playerStats.stress, true),\n      bgColor: getStatBgColor(playerStats.stress, true)\n    },\n    {\n      icon: Brain,\n      label: 'Logic',\n      value: playerStats.logic,\n      color: getStatColor(playerStats.logic),\n      bgColor: getStatBgColor(playerStats.logic)\n    },\n    {\n      icon: Scale,\n      label: 'Karma',\n      value: playerStats.karma,\n      color: getStatColor(playerStats.karma),\n      bgColor: getStatBgColor(playerStats.karma)\n    },\n    {\n      icon: Star,\n      label: 'Reputation',\n      value: playerStats.reputation,\n      color: getStatColor(playerStats.reputation),\n      bgColor: getStatBgColor(playerStats.reputation)\n    },\n    {\n      icon: Battery,\n      label: 'Energy',\n      value: playerStats.energy,\n      color: getStatColor(playerStats.energy),\n      bgColor: getStatBgColor(playerStats.energy)\n    }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Financial Overview */}\n      <Card className=\"bg-gradient-to-r from-[#d4af37] to-[#b8941f] text-white\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center gap-1 mb-1\">\n                <TrendingUp size={16} />\n                <span className=\"text-sm opacity-90\">Net Worth</span>\n              </div>\n              <div className=\"text-lg font-bold\">{formatIndianCurrency(financialData.netWorth)}</div>\n              <div className=\"text-xs opacity-75\">\n                {financialData.netWorth >= 0 ? '↗ Positive' : '↘ Negative'}\n              </div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center gap-1 mb-1\">\n                <DollarSign size={16} />\n                <span className=\"text-sm opacity-90\">Monthly Income</span>\n              </div>\n              <div className=\"text-lg font-bold\">\n                {formatIndianCurrency(financialData.mainIncome + financialData.sideIncome)}\n              </div>\n              <div className=\"text-xs opacity-75\">Main + Side</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center gap-1 mb-1\">\n                <Target size={16} />\n                <span className=\"text-sm opacity-90\">FI Progress</span>\n              </div>\n              <div className=\"text-lg font-bold\">{fiProgress.toFixed(1)}%</div>\n              <div className=\"text-xs opacity-75\">\n                {fiProgress >= 100 ? 'Achieved!' : 'In Progress'}\n              </div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center gap-1 mb-1\">\n                <span className=\"text-sm opacity-90\">Week {currentWeek}, Day {currentDay}</span>\n              </div>\n              <div className=\"text-lg font-bold\">Game Time</div>\n              <div className=\"text-xs opacity-75\">\n                {Math.floor(((currentWeek - 1) * 7 + currentDay) / 7)} weeks played\n              </div>\n            </div>\n          </div>\n          \n          {/* FI Progress Bar */}\n          <div className=\"mt-4\">\n            <div className=\"flex justify-between text-sm mb-1\">\n              <span>Financial Independence Progress</span>\n              <span>{formatIndianCurrency(financialData.sideIncome)} / {formatIndianCurrency(financialData.monthlyExpenses)}</span>\n            </div>\n            <Progress \n              value={fiProgress} \n              className=\"h-3 bg-white bg-opacity-20\" \n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Player Stats */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-3 md:grid-cols-7 gap-3\">\n            {stats.map((stat, index) => {\n              const Icon = stat.icon;\n              return (\n                <div key={index} className={`${stat.bgColor} p-3 rounded-lg text-center transition-all hover:scale-105`}>\n                  <Icon size={20} className={`${stat.color} mx-auto mb-1`} />\n                  <div className=\"text-xs text-gray-600 mb-1\">{stat.label}</div>\n                  <div className={`font-bold ${stat.color}`}>\n                    {typeof stat.value === 'number' ? stat.value : stat.value}\n                  </div>\n                  {typeof stat.value === 'number' && stat.label !== 'Money' && (\n                    <div className=\"mt-1\">\n                      <Progress \n                        value={stat.value} \n                        className=\"h-1\" \n                      />\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          \n          {/* Special Status Indicators */}\n          {(gameState.isHospitalized || gameState.isMentalBreakdown || gameState.isBlackoutMode) && (\n            <div className=\"mt-4 flex gap-2 flex-wrap\">\n              {gameState.isHospitalized && (\n                <Badge variant=\"destructive\" className=\"bg-red-600\">\n                  🏥 Hospitalized ({gameState.hospitalizationTurnsLeft} turns left)\n                </Badge>\n              )}\n              {gameState.isMentalBreakdown && (\n                <Badge variant=\"destructive\" className=\"bg-purple-600\">\n                  💔 Mental Breakdown ({gameState.breakdownTurnsLeft} turns left)\n                </Badge>\n              )}\n              {gameState.isBlackoutMode && (\n                <Badge variant=\"destructive\" className=\"bg-gray-600\">\n                  😵 Blackout Mode ({gameState.blackoutTurnsLeft} turns left)\n                </Badge>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center gap-2\">\n              <Brain size={16} className=\"text-blue-600\" />\n              <div>\n                <div className=\"text-sm font-medium text-blue-800\">Logic Level</div>\n                <div className=\"text-xs text-blue-600\">\n                  {playerStats.logic >= 80 ? 'Excellent decision making' :\n                   playerStats.logic >= 60 ? 'Good analytical skills' :\n                   playerStats.logic >= 40 ? 'Decent reasoning' : 'Needs improvement'}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-red-50 border-red-200\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center gap-2\">\n              <Heart size={16} className=\"text-red-600\" />\n              <div>\n                <div className=\"text-sm font-medium text-red-800\">Emotional State</div>\n                <div className=\"text-xs text-red-600\">\n                  {playerStats.emotion >= 80 ? 'Very positive mood' :\n                   playerStats.emotion >= 60 ? 'Generally happy' :\n                   playerStats.emotion >= 40 ? 'Neutral feelings' : 'Feeling down'}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-purple-50 border-purple-200\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center gap-2\">\n              <Scale size={16} className=\"text-purple-600\" />\n              <div>\n                <div className=\"text-sm font-medium text-purple-800\">Karma Balance</div>\n                <div className=\"text-xs text-purple-600\">\n                  {playerStats.karma >= 80 ? 'Highly ethical choices' :\n                   playerStats.karma >= 60 ? 'Good moral compass' :\n                   playerStats.karma >= 40 ? 'Balanced approach' : 'Question your choices'}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardBar;","size_bytes":10268},"client/src/components/game/GameDashboard.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { useTeamManagement } from '../../lib/stores/useTeamManagement';\nimport { useAudio } from '../../lib/stores/useAudio';\nimport { useIsMobile } from '../../hooks/use-is-mobile';\nimport { formatIndianCurrency } from '../../lib/utils';\nimport StartScreen from './components/StartScreen';\nimport GameplayContent from './components/GameplayContent';\nimport CyberModeButton from './components/CyberModeButton';\nimport ScenarioEngine from './ScenarioEngine';\nimport DashboardBar from './DashboardBar';\nimport InvestmentTable from './InvestmentTable';\nimport RevenueOverview from './RevenueOverview';\nimport SoundManager from './components/SoundManager';\nimport NotificationCenter from './NotificationCenter';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\nimport { \n  Menu, \n  X, \n  Home, \n  TrendingUp, \n  DollarSign, \n  PiggyBank, \n  Users, \n  Briefcase, \n  Target, \n  Settings,\n  BarChart3,\n  ChevronLeft,\n  ChevronRight,\n  Heart,\n  Brain,\n  Scale,\n  AlertTriangle,\n  Star,\n  Battery,\n  Activity\n} from 'lucide-react';\nimport TaskPanel from './TaskPanel';\nimport WealthTracker from './WealthTracker';\nimport CashflowSection from './sections/CashflowSection';\nimport StocksSection from './sections/StocksSection';\nimport BondsSection from './sections/BondsSection';\nimport BankSection from './sections/BankSection';\n\nimport BusinessDealsSection from './sections/BusinessDealsSection';\nimport StrategyHubSection from './sections/StrategyHubSection';\nimport AssetsSection from './sections/AssetsSection';\nimport SettingsSection from './sections/SettingsSection';\nimport RevenueSection from './sections/RevenueSection';\nimport EnhancedTeamSection from './sections/EnhancedTeamSection';\nimport IndustrySectorsSection from './sections/IndustrySectorsSection';\nimport StrategyCardsSection from './sections/StrategyCardsSection';\nimport TeamHiringDashboard from './TeamHiringDashboard';\nimport StockMarketTicker from './StockMarketTicker';\nimport EnhancedStockMarket from './EnhancedStockMarket';\nimport SageAI from './GorkAI';\n\nconst GameDashboard: React.FC = () => {\n  const { financialData, playerStats, currentWeek, currentDay, gameStarted } = useWealthSprintGame();\n  const { initializeTeam } = useTeamManagement();\n  const isMobile = useIsMobile();\n  \n  const [activeSection, setActiveSection] = useState<string>('dashboard');\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [showHiringDashboard, setShowHiringDashboard] = useState(false);\n\n  useEffect(() => {\n    // Initialize team\n    initializeTeam();\n  }, [initializeTeam]);\n\n  useEffect(() => {\n    // Show hiring dashboard when team_hiring section is selected\n    if (activeSection === 'team_hiring') {\n      setShowHiringDashboard(true);\n    }\n  }, [activeSection]);\n\n  const navigationItems = [\n    { id: 'dashboard', label: 'Dashboard', icon: Home },\n    { id: 'cashflow', label: 'Cashflow', icon: DollarSign },\n    { id: 'stocks', label: 'Stocks', icon: TrendingUp },\n    { id: 'market_ticker', label: 'Live Market', icon: Activity },\n    { id: 'stock_market', label: 'Stock Market', icon: TrendingUp },\n    { id: 'bonds', label: 'Bonds', icon: PiggyBank },\n    { id: 'revenue', label: '5-Year Revenue', icon: BarChart3 },\n    { id: 'bank', label: 'Banking', icon: PiggyBank },\n    { id: 'enhanced_team', label: 'Team+', icon: Users },\n    { id: 'team_hiring', label: 'Elite Hiring', icon: Users },\n    { id: 'industry_sectors', label: 'Sectors', icon: Briefcase },\n    { id: 'strategy_cards', label: 'Cards', icon: Target },\n    { id: 'business_deals', label: 'Deals', icon: Briefcase },\n    { id: 'strategy_hub', label: 'Strategy', icon: Target },\n    { id: 'assets', label: 'Assets', icon: TrendingUp },\n    { id: 'settings', label: 'Settings', icon: Settings },\n  ];\n\n  const renderMainContent = () => {\n    switch (activeSection) {\n      case 'cashflow':\n        return <CashflowSection />;\n      case 'stocks':\n        return <InvestmentTable />;\n      case 'market_ticker':\n        return <StockMarketTicker />;\n      case 'stock_market':\n        return <EnhancedStockMarket />;\n      case 'bonds':\n        return <BondsSection />;\n      case 'revenue':\n        return <RevenueOverview />;\n      case 'bank':\n        return <BankSection />;\n      case 'enhanced_team':\n        return <EnhancedTeamSection />;\n      case 'team_hiring':\n        return <div></div>; // Placeholder content, actual dashboard is shown as overlay\n      case 'industry_sectors':\n        return <IndustrySectorsSection />;\n      case 'strategy_cards':\n        return <StrategyCardsSection />;\n      case 'business_deals':\n        return <BusinessDealsSection />;\n      case 'strategy_hub':\n        return <StrategyHubSection />;\n      case 'assets':\n        return <AssetsSection />;\n      case 'settings':\n        return <SettingsSection />;\n      default:\n        return (\n          <div className=\"space-y-6\">\n            <DashboardBar />\n            <ScenarioEngine />\n          </div>\n        );\n    }\n  };\n\n  // Show start screen if game hasn't started yet\n  if (!gameStarted) {\n    return <StartScreen />;\n  }\n\n  // Check for financial independence\n  if (financialData.sideIncome >= financialData.monthlyExpenses) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-[#d4af37] to-[#f5f0e6] flex items-center justify-center p-4\">\n        <div className=\"text-center p-4 md:p-8 bg-white rounded-lg shadow-2xl max-w-2xl w-full\">\n          <h1 className=\"text-2xl md:text-4xl font-bold text-[#3a3a3a] mb-4\">\n            🎉 Game Over – You have achieved Financial Independence!\n          </h1>\n          <p className=\"text-lg md:text-xl text-[#3a3a3a] mb-8\">\n            Your side income of ₹{financialData.sideIncome.toLocaleString()} now covers your monthly expenses of ₹{financialData.monthlyExpenses.toLocaleString()}.\n          </p>\n          <p className=\"text-base md:text-lg text-[#3a3a3a] mb-8\">\n            Do you want to continue to the next level of life mastery?\n          </p>\n          <div className=\"flex flex-col md:flex-row gap-4 justify-center\">\n            <button \n              className=\"bg-[#d4af37] text-white px-8 py-3 rounded-lg font-semibold hover:bg-[#b8941f] transition-colors\"\n              onClick={() => {/* Handle challenge mode */}}\n            >\n              YES – Challenge Mode\n            </button>\n            <button \n              className=\"bg-[#3a3a3a] text-white px-8 py-3 rounded-lg font-semibold hover:bg-[#2a2a2a] transition-colors\"\n              onClick={() => {/* Handle restart */}}\n            >\n              NO – Restart Journey\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#f5f0e6] flex flex-col\">\n      {/* Mobile Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200 px-4 py-3 flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setMenuOpen(!menuOpen)}\n            className=\"p-2\"\n          >\n            {menuOpen ? <X size={20} /> : <Menu size={20} />}\n          </Button>\n          <h1 className=\"text-lg font-bold text-[#3a3a3a]\">Wealth Sprint</h1>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\" className=\"text-xs\">\n            Week {currentWeek}\n          </Badge>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            Day {currentDay}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Enhanced Stats Bar */}\n      <div className=\"bg-white border-b border-gray-200 px-4 py-2\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center gap-6\">\n            <div className=\"flex items-center gap-2\">\n              <DollarSign size={16} className=\"text-green-600\" />\n              <span className=\"text-gray-600\">{formatIndianCurrency(financialData.bankBalance)}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Heart size={16} className=\"text-red-500\" />\n              <span className=\"text-gray-600\">{playerStats.emotion}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Brain size={16} className=\"text-blue-500\" />\n              <span className=\"text-gray-600\">{playerStats.logic}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Scale size={16} className=\"text-purple-500\" />\n              <span className=\"text-gray-600\">{playerStats.karma}</span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-xs text-gray-500\">FI Progress</div>\n            <div className={`font-semibold ${financialData.sideIncome >= financialData.monthlyExpenses ? 'text-green-600' : 'text-gray-600'}`}>\n              {Math.round((financialData.sideIncome / financialData.monthlyExpenses) * 100)}%\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu (Mobile) */}\n      {menuOpen && (\n        <div className=\"bg-white border-b border-gray-200 px-4 py-3\">\n          <div className=\"grid grid-cols-3 gap-3\">\n            {navigationItems.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Button\n                  key={item.id}\n                  variant={activeSection === item.id ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => {\n                    setActiveSection(item.id);\n                    setMenuOpen(false);\n                  }}\n                  className=\"flex flex-col items-center gap-1 h-auto py-2\"\n                >\n                  <Icon size={16} />\n                  <span className=\"text-xs\">{item.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 overflow-y-auto mobile-scroll\">\n        <div className=\"p-4 pb-20\">\n          {renderMainContent()}\n        </div>\n      </div>\n\n      {/* Bottom Navigation Bar */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 safe-area-pb\">\n        <div className=\"flex items-center justify-around\">\n          {navigationItems.slice(0, 5).map((item) => {\n            const Icon = item.icon;\n            return (\n              <Button\n                key={item.id}\n                variant={activeSection === item.id ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setActiveSection(item.id)}\n                className=\"flex flex-col items-center gap-1 h-auto py-2 px-3\"\n              >\n                <Icon size={16} />\n                <span className=\"text-xs\">{item.label}</span>\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n      \n      {/* Notification Center */}\n      <NotificationCenter />\n      \n      {/* Sound Manager */}\n      <SoundManager />\n      \n      {/* Team Hiring Dashboard Overlay */}\n      {showHiringDashboard && (\n        <TeamHiringDashboard \n          onClose={() => {\n            setShowHiringDashboard(false);\n            setActiveSection('dashboard');\n          }} \n        />\n      )}\n      \n      {/* Sage AI Assistant */}\n      <SageAI />\n    </div>\n  );\n};\n\nexport default GameDashboard;\n","size_bytes":11718},"client/src/components/game/InvestmentTable.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Badge } from '../ui/badge';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  ShoppingCart,\n  Eye,\n  LineChart,\n  Shield,\n  AlertCircle\n} from 'lucide-react';\n\ninterface Stock {\n  code: string;\n  name: string;\n  sector: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volatility: string;\n  risk: 'Low' | 'Medium' | 'High';\n  trend: number[];\n}\n\ninterface StockHolding {\n  code: string;\n  quantity: number;\n  avgPrice: number;\n  purchaseDate: Date;\n}\n\nconst InvestmentTable: React.FC = () => {\n  const { financialData, updateFinancialData, addGameEvent } = useWealthSprintGame();\n  \n  const [selectedStock, setSelectedStock] = useState<string | null>(null);\n  const [quantity, setQuantity] = useState<number>(1);\n  const [tradeType, setTradeType] = useState<'buy' | 'sell'>('buy');\n  const [portfolioHoldings, setPortfolioHoldings] = useState<StockHolding[]>([]);\n\n  const buyStock = (code: string, qty: number) => {\n    const stock = enhancedStocks.find(s => s.code === code);\n    if (!stock) return;\n    \n    const existingHolding = portfolioHoldings.find(h => h.code === code);\n    if (existingHolding) {\n      const totalQuantity = existingHolding.quantity + qty;\n      const totalValue = (existingHolding.avgPrice * existingHolding.quantity) + (stock.price * qty);\n      const newAvgPrice = totalValue / totalQuantity;\n      \n      setPortfolioHoldings(prev => prev.map(h => \n        h.code === code \n          ? { ...h, quantity: totalQuantity, avgPrice: newAvgPrice }\n          : h\n      ));\n    } else {\n      setPortfolioHoldings(prev => [...prev, {\n        code,\n        quantity: qty,\n        avgPrice: stock.price,\n        purchaseDate: new Date()\n      }]);\n    }\n  };\n\n  const sellStock = (code: string, qty: number) => {\n    setPortfolioHoldings(prev => prev.map(h => \n      h.code === code \n        ? { ...h, quantity: h.quantity - qty }\n        : h\n    ).filter(h => h.quantity > 0));\n  };\n\n  // Enhanced stock data with dummy 3-day trends and risk levels\n  const enhancedStocks: Stock[] = [\n    {\n      code: 'RELIANCE',\n      name: 'Reliance Industries',\n      sector: 'Oil & Gas',\n      price: 2850,\n      change: 45,\n      changePercent: 1.6,\n      volatility: 'medium',\n      risk: 'Medium',\n      trend: [2800, 2820, 2850]\n    },\n    {\n      code: 'INFY',\n      name: 'Infosys',\n      sector: 'IT',\n      price: 1650,\n      change: -20,\n      changePercent: -1.2,\n      volatility: 'low',\n      risk: 'Low',\n      trend: [1680, 1670, 1650]\n    },\n    {\n      code: 'HDFCBANK',\n      name: 'HDFC Bank',\n      sector: 'Banking',\n      price: 1580,\n      change: 25,\n      changePercent: 1.6,\n      volatility: 'low',\n      risk: 'Low',\n      trend: [1560, 1570, 1580]\n    }\n  ];\n\n  const selectedStockData = selectedStock ? enhancedStocks.find(s => s.code === selectedStock) : null;\n\n  const handleTrade = () => {\n    if (!selectedStockData || quantity <= 0) return;\n\n    const tradeValue = selectedStockData.price * quantity;\n\n    if (tradeType === 'buy') {\n      if (financialData.bankBalance >= tradeValue) {\n        buyStock(selectedStockData.code, quantity);\n        updateFinancialData({ \n          bankBalance: financialData.bankBalance - tradeValue,\n          totalAssets: financialData.totalAssets + tradeValue,\n        });\n        \n        // Show success notification\n        addGameEvent({\n          id: `stock_buy_${Date.now()}`,\n          type: 'financial',\n          title: '📈 Stock Purchase Successful',\n          description: `Bought ${quantity} shares of ${selectedStockData.code} for ₹${tradeValue.toLocaleString()}`,\n          impact: { duration: 1, effects: {} }\n        });\n        \n        setQuantity(1);\n      } else {\n        // Show insufficient funds notification\n        addGameEvent({\n          id: `insufficient_funds_${Date.now()}`,\n          type: 'warning',\n          title: '❌ Insufficient Funds',\n          description: `Need ₹${tradeValue.toLocaleString()} but only have ₹${financialData.bankBalance.toLocaleString()}`,\n          impact: { duration: 1, effects: {} }\n        });\n      }\n    } else {\n      const holding = portfolioHoldings.find(h => h.code === selectedStockData.code);\n      if (holding && holding.quantity >= quantity) {\n        sellStock(selectedStockData.code, quantity);\n        updateFinancialData({ \n          bankBalance: financialData.bankBalance + tradeValue,\n          totalAssets: financialData.totalAssets - (holding.avgPrice * quantity),\n        });\n        \n        const profit = (selectedStockData.price - holding.avgPrice) * quantity;\n        addGameEvent({\n          id: `stock_sell_${Date.now()}`,\n          type: 'financial',\n          title: '💰 Stock Sale Completed',\n          description: `Sold ${quantity} shares of ${selectedStockData.code} for ${profit >= 0 ? 'profit' : 'loss'} of ₹${Math.abs(profit).toLocaleString()}`,\n          impact: { duration: 1, effects: {} }\n        });\n        \n        setQuantity(1);\n      }\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'Low': return 'bg-green-100 text-green-800';\n      case 'Medium': return 'bg-yellow-100 text-yellow-800';\n      case 'High': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTrendIcon = (trend: number[]) => {\n    const recentChange = trend[trend.length - 1] - trend[0];\n    return recentChange >= 0 ? TrendingUp : TrendingDown;\n  };\n\n  const getTrendColor = (trend: number[]) => {\n    const recentChange = trend[trend.length - 1] - trend[0];\n    return recentChange >= 0 ? 'text-green-600' : 'text-red-600';\n  };\n\n  const formatTrend = (trend: number[]) => {\n    const change = ((trend[trend.length - 1] - trend[0]) / trend[0]) * 100;\n    return `${change >= 0 ? '+' : ''}${change.toFixed(1)}%`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Stock Market - Enhanced Interface</h1>\n        <Badge className=\"bg-[#d4af37] text-white\">\n          Live Market Data\n        </Badge>\n      </div>\n\n      {/* Stock Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <LineChart size={20} />\n            Market Overview\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-3 px-2\">Symbol</th>\n                  <th className=\"text-left py-3 px-2\">Name</th>\n                  <th className=\"text-left py-3 px-2\">Risk</th>\n                  <th className=\"text-right py-3 px-2\">Price</th>\n                  <th className=\"text-right py-3 px-2\">3-Day Trend</th>\n                  <th className=\"text-center py-3 px-2\">Quantity</th>\n                  <th className=\"text-center py-3 px-2\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {enhancedStocks.map((stock) => {\n                  const TrendIcon = getTrendIcon(stock.trend);\n                  const holding = portfolioHoldings.find(h => h.code === stock.code);\n                  \n                  return (\n                    <tr \n                      key={stock.code} \n                      className={`border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${\n                        selectedStock === stock.code ? 'bg-[#d4af37] bg-opacity-10' : ''\n                      }`}\n                      onClick={() => setSelectedStock(stock.code)}\n                    >\n                      <td className=\"py-4 px-2\">\n                        <div className=\"font-semibold text-[#3a3a3a]\">{stock.code}</div>\n                        <div className=\"text-sm text-gray-500\">{stock.sector}</div>\n                      </td>\n                      <td className=\"py-4 px-2\">\n                        <div className=\"font-medium\">{stock.name}</div>\n                        {holding && (\n                          <div className=\"text-xs text-blue-600\">\n                            Holding: {holding.quantity} shares\n                          </div>\n                        )}\n                      </td>\n                      <td className=\"py-4 px-2\">\n                        <Badge className={`text-xs ${getRiskColor(stock.risk)}`}>\n                          {stock.risk}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-2 text-right\">\n                        <div className=\"font-semibold\">₹{stock.price.toFixed(2)}</div>\n                        <div className={`text-sm ${stock.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-2 text-right\">\n                        <div className={`flex items-center justify-end gap-1 ${getTrendColor(stock.trend)}`}>\n                          <TrendIcon size={16} />\n                          <span className=\"text-sm font-medium\">{formatTrend(stock.trend)}</span>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-2 text-center\">\n                        {selectedStock === stock.code && (\n                          <Input\n                            type=\"number\"\n                            value={quantity}\n                            onChange={(e) => setQuantity(Math.max(1, Number(e.target.value)))}\n                            min=\"1\"\n                            className=\"w-20 text-center\"\n                            onClick={(e) => e.stopPropagation()}\n                          />\n                        )}\n                      </td>\n                      <td className=\"py-4 px-2 text-center\">\n                        {selectedStock === stock.code && (\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setTradeType('buy');\n                                handleTrade();\n                              }}\n                              className=\"bg-green-600 hover:bg-green-700 text-white\"\n                              disabled={financialData.bankBalance < stock.price * quantity}\n                            >\n                              Buy\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setTradeType('sell');\n                                handleTrade();\n                              }}\n                              className=\"bg-red-600 hover:bg-red-700 text-white\"\n                              disabled={!holding || holding.quantity < quantity}\n                            >\n                              Sell\n                            </Button>\n                          </div>\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Stock Details */}\n      {selectedStockData && (\n        <Card className=\"border-2 border-[#d4af37]\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye size={20} />\n              {selectedStockData.name} ({selectedStockData.code}) - Details\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"text-sm text-gray-600\">Current Price</div>\n                <div className=\"text-xl font-bold text-[#3a3a3a]\">₹{selectedStockData.price.toFixed(2)}</div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"text-sm text-gray-600\">Day Change</div>\n                <div className={`text-xl font-bold ${selectedStockData.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {selectedStockData.changePercent >= 0 ? '+' : ''}{selectedStockData.changePercent.toFixed(2)}%\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"text-sm text-gray-600\">Risk Level</div>\n                <Badge className={getRiskColor(selectedStockData.risk)}>\n                  {selectedStockData.risk}\n                </Badge>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"text-sm text-gray-600\">Trade Value</div>\n                <div className=\"text-xl font-bold text-[#d4af37]\">\n                  ₹{(selectedStockData.price * quantity).toLocaleString()}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <div className=\"flex items-start gap-2\">\n                <AlertCircle size={16} className=\"text-blue-600 mt-0.5\" />\n                <div>\n                  <div className=\"font-semibold text-blue-800\">Investment Tip</div>\n                  <div className=\"text-sm text-blue-700\">\n                    {selectedStockData.risk === 'Low' && \n                      'This is a stable stock suitable for conservative investors. Lower risk, steady returns.'}\n                    {selectedStockData.risk === 'Medium' && \n                      'Balanced risk-reward ratio. Good for moderate investors looking for growth.'}\n                    {selectedStockData.risk === 'High' && \n                      'High volatility stock. Potential for big gains but also significant losses. Invest carefully.'}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Portfolio Summary */}\n      {portfolioHoldings.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield size={20} />\n              Your Portfolio\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {portfolioHoldings.map((holding) => {\n                const stock = enhancedStocks.find(s => s.code === holding.code);\n                if (!stock) return null;\n                \n                const currentValue = stock.price * holding.quantity;\n                const investedValue = holding.avgPrice * holding.quantity;\n                const pnl = currentValue - investedValue;\n                const pnlPercent = (pnl / investedValue) * 100;\n\n                return (\n                  <div key={holding.code} className=\"flex justify-between items-center p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <div className=\"font-semibold\">{holding.code}</div>\n                      <div className=\"text-sm text-gray-600\">\n                        {holding.quantity} shares @ ₹{holding.avgPrice.toFixed(2)}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold\">₹{currentValue.toLocaleString()}</div>\n                      <div className={`text-sm ${pnl >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {pnl >= 0 ? '+' : ''}₹{pnl.toFixed(2)} ({pnlPercent.toFixed(1)}%)\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default InvestmentTable;","size_bytes":16370},"client/src/components/game/NotificationCenter.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { useAudio } from '../../lib/stores/useAudio';\nimport { \n  CheckCircle, \n  AlertCircle, \n  Info, \n  TrendingUp, \n  TrendingDown,\n  X,\n  Bell,\n  Crown,\n  DollarSign,\n  Briefcase,\n  Users,\n  Settings\n} from 'lucide-react';\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'financial' | 'achievement';\n  title: string;\n  message: string;\n  timestamp: Date;\n  duration?: number;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n}\n\nconst NotificationCenter: React.FC = () => {\n  const { gameEvents } = useWealthSprintGame();\n  const { playSuccess, playHit } = useAudio();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Convert game events to notifications\n  useEffect(() => {\n    const latestEvents = gameEvents.slice(-5); // Show last 5 events\n    \n    const newNotifications: Notification[] = latestEvents.map(event => ({\n      id: event.id,\n      type: getNotificationType(event.type),\n      title: event.title,\n      message: event.description,\n      timestamp: new Date(event.timestamp),\n      duration: 5000, // 5 seconds\n    }));\n\n    setNotifications(newNotifications);\n  }, [gameEvents]);\n\n  const getNotificationType = (eventType: string): 'success' | 'warning' | 'info' | 'financial' | 'achievement' => {\n    switch (eventType) {\n      case 'financial':\n        return 'financial';\n      case 'achievement':\n        return 'achievement';\n      case 'warning':\n        return 'warning';\n      case 'success':\n        return 'success';\n      default:\n        return 'info';\n    }\n  };\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'warning':\n        return <AlertCircle className=\"w-5 h-5 text-yellow-500\" />;\n      case 'financial':\n        return <DollarSign className=\"w-5 h-5 text-blue-500\" />;\n      case 'achievement':\n        return <Crown className=\"w-5 h-5 text-purple-500\" />;\n      default:\n        return <Info className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const playNotificationSound = (type: string) => {\n    // Sound is enabled by default - can be expanded later with settings\n    const soundEnabled = true;\n    if (!soundEnabled) return;\n    \n    switch (type) {\n      case 'success':\n      case 'achievement':\n        playSuccess();\n        break;\n      case 'warning':\n        playHit();\n        break;\n      default:\n        // Soft notification sound\n        break;\n    }\n  };\n\n  const dismissNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  const formatTime = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    const minutes = Math.floor(diff / 60000);\n    \n    if (minutes < 1) return 'just now';\n    if (minutes < 60) return `${minutes}m ago`;\n    return `${Math.floor(minutes / 60)}h ago`;\n  };\n\n  return (\n    <>\n      {/* Notification Bell */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <button\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"relative p-2 bg-white dark:bg-gray-800 rounded-full shadow-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n        >\n          <Bell className=\"w-5 h-5 text-gray-600 dark:text-gray-300\" />\n          {notifications.length > 0 && (\n            <span className=\"absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n              {notifications.length}\n            </span>\n          )}\n        </button>\n      </div>\n\n      {/* Notification Panel */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, x: 300 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 300 }}\n            className=\"fixed top-16 right-4 z-40 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 max-h-96 overflow-hidden\"\n          >\n            <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-semibold text-gray-900 dark:text-white\">Notifications</h3>\n                <button\n                  onClick={() => setIsExpanded(false)}\n                  className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\n                >\n                  <X className=\"w-4 h-4 text-gray-500\" />\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"max-h-80 overflow-y-auto\">\n              {notifications.length === 0 ? (\n                <div className=\"p-6 text-center text-gray-500 dark:text-gray-400\">\n                  No notifications yet\n                </div>\n              ) : (\n                notifications.map((notification) => (\n                  <motion.div\n                    key={notification.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -20 }}\n                    className=\"p-4 border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      {getIcon(notification.type)}\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {notification.title}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                          {notification.message}\n                        </p>\n                        <p className=\"text-xs text-gray-400 mt-2\">\n                          {formatTime(notification.timestamp)}\n                        </p>\n                      </div>\n                      <button\n                        onClick={() => dismissNotification(notification.id)}\n                        className=\"p-1 hover:bg-gray-200 dark:hover:bg-gray-600 rounded\"\n                      >\n                        <X className=\"w-3 h-3 text-gray-400\" />\n                      </button>\n                    </div>\n                  </motion.div>\n                ))\n              )}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Toast Notifications */}\n      <div className=\"fixed top-4 right-20 z-50 space-y-2\">\n        <AnimatePresence>\n          {notifications.slice(-3).map((notification) => (\n            <motion.div\n              key={`toast-${notification.id}`}\n              initial={{ opacity: 0, x: 100, scale: 0.8 }}\n              animate={{ opacity: 1, x: 0, scale: 1 }}\n              exit={{ opacity: 0, x: 100, scale: 0.8 }}\n              className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-3 min-w-64 max-w-80\"\n              onAnimationComplete={() => {\n                playNotificationSound(notification.type);\n                // Auto-dismiss after duration\n                setTimeout(() => dismissNotification(notification.id), notification.duration || 5000);\n              }}\n            >\n              <div className=\"flex items-start gap-3\">\n                {getIcon(notification.type)}\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {notification.title}\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                    {notification.message}\n                  </p>\n                </div>\n                <button\n                  onClick={() => dismissNotification(notification.id)}\n                  className=\"p-1 hover:bg-gray-200 dark:hover:bg-gray-600 rounded\"\n                >\n                  <X className=\"w-3 h-3 text-gray-400\" />\n                </button>\n              </div>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n    </>\n  );\n};\n\nexport default NotificationCenter;","size_bytes":8493},"client/src/components/game/RevenueOverview.tsx":{"content":"import React from 'react';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Progress } from '../ui/progress';\nimport { Chart } from '../ui/chart';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Calendar,\n  BarChart3,\n  PieChart,\n  Target,\n  Heart,\n  Brain,\n  Scale,\n  AlertTriangle,\n  Star,\n  Battery\n} from 'lucide-react';\n\nconst RevenueOverview: React.FC = () => {\n  const { playerStats, financialData, currentWeek } = useWealthSprintGame();\n\n  // Generate 5-year historical data (simulated based on current state)\n  const generateHistoricalData = () => {\n    const years = 5;\n    const currentYear = new Date().getFullYear();\n    const data = [];\n\n    for (let i = years - 1; i >= 0; i--) {\n      const year = currentYear - i;\n      const baseIncome = financialData.mainIncome * 12;\n      const growthFactor = Math.pow(1.1, years - 1 - i); // 10% annual growth assumption\n      \n      data.push({\n        year: year.toString(),\n        totalIncome: Math.round(baseIncome * growthFactor),\n        investments: Math.round(baseIncome * growthFactor * 0.3),\n        expenses: Math.round(financialData.monthlyExpenses * 12 * growthFactor * 0.9),\n        netWorth: Math.round(financialData.netWorth * growthFactor),\n      });\n    }\n\n    return data;\n  };\n\n  const historicalData = generateHistoricalData();\n\n  // Calculate portfolio performance\n  const portfolioValue = 0; // Simplified for now\n\n  const bondValue = financialData.investments.bonds;\n\n  // Chart data for revenue trends\n  const revenueChartData = {\n    labels: historicalData.map(d => d.year),\n    datasets: [\n      {\n        label: 'Total Income',\n        data: historicalData.map(d => d.totalIncome),\n        borderColor: '#d4af37',\n        backgroundColor: '#d4af37',\n        tension: 0.4,\n      },\n      {\n        label: 'Investment Returns',\n        data: historicalData.map(d => d.investments),\n        borderColor: '#10b981',\n        backgroundColor: '#10b981',\n        tension: 0.4,\n      },\n      {\n        label: 'Expenses',\n        data: historicalData.map(d => d.expenses),\n        borderColor: '#ef4444',\n        backgroundColor: '#ef4444',\n        tension: 0.4,\n      }\n    ]\n  };\n\n  // Asset allocation pie chart\n  const assetAllocationData = {\n    labels: ['Stocks', 'Bonds', 'Cash', 'Other Assets'],\n    datasets: [\n      {\n        data: [\n          financialData.investments.stocks,\n          financialData.investments.bonds,\n          financialData.bankBalance,\n          financialData.investments.realEstate + financialData.investments.fd\n        ],\n        backgroundColor: ['#d4af37', '#10b981', '#3b82f6', '#8b5cf6'],\n        borderWidth: 0,\n      }\n    ]\n  };\n\n  // Emotional stats history (simulated)\n  const emotionalHistoryData = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n    datasets: [\n      {\n        label: 'Emotion',\n        data: [45, 52, 48, 61, 58, playerStats.emotion],\n        borderColor: '#ef4444',\n        backgroundColor: 'rgba(239, 68, 68, 0.1)',\n        tension: 0.4,\n      },\n      {\n        label: 'Logic',\n        data: [40, 45, 55, 62, 65, playerStats.logic],\n        borderColor: '#3b82f6',\n        backgroundColor: 'rgba(59, 130, 246, 0.1)',\n        tension: 0.4,\n      },\n      {\n        label: 'Karma',\n        data: [50, 48, 55, 58, 60, playerStats.karma],\n        borderColor: '#10b981',\n        backgroundColor: 'rgba(16, 185, 129, 0.1)',\n        tension: 0.4,\n      }\n    ]\n  };\n\n  const formatCurrency = (amount: number) => {\n    if (amount >= 10000000) return `₹${(amount / 10000000).toFixed(1)}Cr`;\n    if (amount >= 100000) return `₹${(amount / 100000).toFixed(1)}L`;\n    if (amount >= 1000) return `₹${(amount / 1000).toFixed(1)}k`;\n    return `₹${amount.toLocaleString()}`;\n  };\n\n  const currentYearProjection = {\n    income: financialData.mainIncome * 12 + financialData.sideIncome * 12,\n    expenses: financialData.monthlyExpenses * 12,\n    savings: (financialData.mainIncome + financialData.sideIncome - financialData.monthlyExpenses) * 12,\n    investmentReturns: portfolioValue * 0.12 + bondValue * 0.08, // Assumed annual returns\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">5-Year Revenue Overview</h1>\n        <Badge className=\"bg-[#d4af37] text-white\">\n          Week {currentWeek} Analysis\n        </Badge>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 border-green-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"text-green-600\" size={24} />\n              </div>\n              <div>\n                <div className=\"text-sm text-green-600\">Current Year Income</div>\n                <div className=\"text-xl font-bold text-green-800\">\n                  {formatCurrency(currentYearProjection.income)}\n                </div>\n                <div className=\"text-xs text-green-600\">Projected Annual</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-blue-50 to-cyan-50 border-blue-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                <PieChart className=\"text-blue-600\" size={24} />\n              </div>\n              <div>\n                <div className=\"text-sm text-blue-600\">Investment Returns</div>\n                <div className=\"text-xl font-bold text-blue-800\">\n                  {formatCurrency(currentYearProjection.investmentReturns)}\n                </div>\n                <div className=\"text-xs text-blue-600\">Expected This Year</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-50 to-violet-50 border-purple-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                <Target className=\"text-purple-600\" size={24} />\n              </div>\n              <div>\n                <div className=\"text-sm text-purple-600\">Net Savings</div>\n                <div className=\"text-xl font-bold text-purple-800\">\n                  {formatCurrency(currentYearProjection.savings)}\n                </div>\n                <div className=\"text-xs text-purple-600\">Annual Projection</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-yellow-50 to-amber-50 border-yellow-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n                <DollarSign className=\"text-yellow-600\" size={24} />\n              </div>\n              <div>\n                <div className=\"text-sm text-yellow-600\">Net Worth</div>\n                <div className=\"text-xl font-bold text-yellow-800\">\n                  {formatCurrency(financialData.netWorth)}\n                </div>\n                <div className=\"text-xs text-yellow-600\">Current Value</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Revenue Trend Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 size={20} />\n            5-Year Financial Performance\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80\">\n            <Chart type=\"line\" data={revenueChartData} />\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Asset Allocation */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <PieChart size={20} />\n              Asset Allocation\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <Chart type=\"doughnut\" data={assetAllocationData} />\n            </div>\n            <div className=\"mt-4 space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Stocks Portfolio:</span>\n                <span className=\"font-semibold\">{formatCurrency(portfolioValue)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Bonds Investment:</span>\n                <span className=\"font-semibold\">{formatCurrency(bondValue)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Cash Balance:</span>\n                <span className=\"font-semibold\">{formatCurrency(financialData.bankBalance)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Emotional Intelligence History */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Heart size={20} />\n              Emotional Stats History\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <Chart type=\"line\" data={emotionalHistoryData} />\n            </div>\n            <div className=\"mt-4 grid grid-cols-3 gap-2\">\n              <div className=\"text-center\">\n                <Heart size={16} className=\"mx-auto text-red-500 mb-1\" />\n                <div className=\"text-xs text-gray-600\">Emotion</div>\n                <div className=\"font-semibold\">{playerStats.emotion}</div>\n              </div>\n              <div className=\"text-center\">\n                <Brain size={16} className=\"mx-auto text-blue-500 mb-1\" />\n                <div className=\"text-xs text-gray-600\">Logic</div>\n                <div className=\"font-semibold\">{playerStats.logic}</div>\n              </div>\n              <div className=\"text-center\">\n                <Scale size={16} className=\"mx-auto text-green-500 mb-1\" />\n                <div className=\"text-xs text-gray-600\">Karma</div>\n                <div className=\"font-semibold\">{playerStats.karma}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Financial Goals Progress */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target size={20} />\n            Financial Independence Progress\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Monthly Passive Income Goal</span>\n                <span className=\"text-sm\">\n                  {formatCurrency(financialData.sideIncome)} / {formatCurrency(financialData.monthlyExpenses)}\n                </span>\n              </div>\n              <Progress value={Math.min(100, (financialData.sideIncome / financialData.monthlyExpenses) * 100)} />\n              <div className=\"text-xs text-gray-500 mt-1\">\n                {financialData.sideIncome >= financialData.monthlyExpenses \n                  ? '🎉 Congratulations! You have achieved Financial Independence!' \n                  : `Need ₹${(financialData.monthlyExpenses - financialData.sideIncome).toLocaleString()} more in passive income`}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <div className=\"text-sm text-blue-600 mb-2\">Emergency Fund</div>\n                <div className=\"text-lg font-bold text-blue-800\">\n                  {formatCurrency(Math.min(financialData.bankBalance, financialData.monthlyExpenses * 6))}\n                </div>\n                <div className=\"text-xs text-blue-600\">\n                  Goal: {formatCurrency(financialData.monthlyExpenses * 6)} (6 months)\n                </div>\n                <Progress \n                  value={Math.min(100, (financialData.bankBalance / (financialData.monthlyExpenses * 6)) * 100)} \n                  className=\"mt-2\"\n                />\n              </div>\n\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <div className=\"text-sm text-green-600 mb-2\">Investment Portfolio</div>\n                <div className=\"text-lg font-bold text-green-800\">\n                  {formatCurrency(portfolioValue + bondValue)}\n                </div>\n                <div className=\"text-xs text-green-600\">\n                  Target: {formatCurrency(financialData.netWorth * 0.6)} (60% of net worth)\n                </div>\n                <Progress \n                  value={Math.min(100, ((portfolioValue + bondValue) / (financialData.netWorth * 0.6)) * 100)} \n                  className=\"mt-2\"\n                />\n              </div>\n\n              <div className=\"bg-purple-50 p-4 rounded-lg\">\n                <div className=\"text-sm text-purple-600 mb-2\">Wealth Milestone</div>\n                <div className=\"text-lg font-bold text-purple-800\">\n                  {formatCurrency(financialData.netWorth)}\n                </div>\n                <div className=\"text-xs text-purple-600\">\n                  Next: {formatCurrency(10000000)} (₹1 Crore)\n                </div>\n                <Progress \n                  value={Math.min(100, (financialData.netWorth / 10000000) * 100)} \n                  className=\"mt-2\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default RevenueOverview;","size_bytes":14234},"client/src/components/game/ScenarioEngine.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { Progress } from '../ui/progress';\nimport { CheckCircle, XCircle, TrendingUp, Brain, Heart, Zap, Scale, Star, AlertTriangle } from 'lucide-react';\nimport { getRandomScenarios, getContextualScenarios, GameScenario } from '../../lib/data/scenarios';\nimport { checkSpecialScenarioTriggers } from '../../lib/data/specialScenarios';\nimport { toast } from 'sonner';\n\ninterface ScenarioEngineProps {\n  onScenarioComplete?: () => void;\n}\n\nconst ScenarioEngine: React.FC<ScenarioEngineProps> = ({ onScenarioComplete }) => {\n  const { \n    playerStats, \n    financialData, \n    timeEngine, \n    gameState, \n    updatePlayerStats, \n    updateFinancialData, \n    addGameEvent,\n    processTurn,\n    checkReputationAccess\n  } = useWealthSprintGame();\n  \n  const [currentScenario, setCurrentScenario] = useState<GameScenario | null>(null);\n  const [selectedChoice, setSelectedChoice] = useState<number | null>(null);\n  const [showResult, setShowResult] = useState(false);\n  const [resultEffects, setResultEffects] = useState<any>(null);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  const getRandomScenario = (): GameScenario => {\n    // Check for special scenario triggers first\n    const specialScenario = checkSpecialScenarioTriggers(playerStats, financialData, gameState);\n    if (specialScenario) {\n      return specialScenario;\n    }\n    \n    // Try to get contextual scenarios\n    const contextualScenarios = getContextualScenarios(playerStats, financialData);\n    if (contextualScenarios.length > 0) {\n      const randomIndex = Math.floor(Math.random() * contextualScenarios.length);\n      return contextualScenarios[randomIndex];\n    }\n    \n    // Fall back to random scenarios\n    const randomScenarios = getRandomScenarios(1);\n    return randomScenarios[0];\n  };\n\n  const loadNextScenario = () => {\n    const nextScenario = getRandomScenario();\n    setCurrentScenario(nextScenario);\n    setSelectedChoice(null);\n    setShowResult(false);\n    setResultEffects(null);\n    setIsAnimating(true);\n    \n    setTimeout(() => setIsAnimating(false), 300);\n  };\n\n  useEffect(() => {\n    if (!currentScenario) {\n      loadNextScenario();\n    }\n  }, []);\n\n  const handleChoiceSelect = (choiceIndex: number) => {\n    if (showResult) return;\n    setSelectedChoice(choiceIndex);\n  };\n\n  const handleScenarioComplete = () => {\n    if (selectedChoice === null || !currentScenario) return;\n\n    const choice = currentScenario.options[selectedChoice];\n    const effects = choice.effects;\n    \n    // Apply effects to player stats\n    const statUpdates: any = {};\n    const financialUpdates: any = {};\n\n    if (effects.karma !== undefined) statUpdates.karma = Math.max(0, Math.min(100, playerStats.karma + effects.karma));\n    if (effects.logic !== undefined) statUpdates.logic = Math.max(0, Math.min(100, playerStats.logic + effects.logic));\n    if (effects.emotion !== undefined) statUpdates.emotion = Math.max(0, Math.min(100, playerStats.emotion + effects.emotion));\n    if (effects.stress !== undefined) statUpdates.stress = Math.max(0, Math.min(100, playerStats.stress + effects.stress));\n    if (effects.reputation !== undefined) statUpdates.reputation = Math.max(0, Math.min(100, playerStats.reputation + effects.reputation));\n    if (effects.energy !== undefined) statUpdates.energy = Math.max(0, Math.min(100, playerStats.energy + effects.energy));\n\n    // Handle financial effects - strict wallet vs bank separation\n    if (effects.bankBalance !== undefined) {\n      financialUpdates.bankBalance = Math.max(0, financialData.bankBalance + effects.bankBalance);\n    }\n    if (effects.inHandCash !== undefined) {\n      financialUpdates.inHandCash = Math.max(0, financialData.inHandCash + effects.inHandCash);\n    }\n    if (effects.mainIncome !== undefined) {\n      financialUpdates.mainIncome = Math.max(0, financialData.mainIncome + effects.mainIncome);\n    }\n    if (effects.sideIncome !== undefined) {\n      financialUpdates.sideIncome = Math.max(0, financialData.sideIncome + effects.sideIncome);\n    }\n    if (effects.monthlyExpenses !== undefined) {\n      financialUpdates.monthlyExpenses = Math.max(0, financialData.monthlyExpenses + effects.monthlyExpenses);\n    }\n\n    // Update the stores\n    if (Object.keys(statUpdates).length > 0) {\n      updatePlayerStats(statUpdates);\n    }\n    if (Object.keys(financialUpdates).length > 0) {\n      updateFinancialData(financialUpdates);\n    }\n\n    // Show result screen\n    setResultEffects(effects);\n    setShowResult(true);\n\n    // Add animated decision feedback with icons\n    const effectsText = Object.entries(effects)\n      .filter(([key, value]) => value !== undefined)\n      .map(([key, value]) => {\n        const icon = key === 'karma' ? '🌱' : \n                    key === 'stress' ? '⚠️' : \n                    key === 'energy' ? '🔋' : \n                    key === 'reputation' ? '⭐' : \n                    key === 'emotion' ? '❤️' : \n                    key === 'logic' ? '🧠' : \n                    key === 'bankBalance' ? '🏦' : \n                    key === 'inHandCash' ? '💰' : \n                    key === 'mainIncome' ? '💼' : \n                    key === 'sideIncome' ? '📊' : \n                    key === 'monthlyExpenses' ? '💸' : '📈';\n        return `${icon} ${key}: ${value > 0 ? '+' : ''}${value}`;\n      })\n      .join(', ');\n\n    addGameEvent({\n      id: `scenario_${currentScenario.id}_${Date.now()}`,\n      type: 'achievement',\n      title: `✅ Decision Made: ${currentScenario.title}`,\n      description: `You chose: ${choice.text}. Effects: ${effectsText}`,\n      impact: { duration: 1, effects: effects }\n    });\n\n    // Process turn and check all critical systems\n    processTurn();\n    \n    // Auto-advance after 3 seconds\n    setTimeout(() => {\n      loadNextScenario();\n      onScenarioComplete?.();\n    }, 3000);\n  };\n\n  const getCategoryColor = (section: string) => {\n    switch (section.toLowerCase()) {\n      case 'finance': return 'bg-green-500';\n      case 'emotion': return 'bg-pink-500';\n      case 'business': return 'bg-blue-500';\n      case 'personal': return 'bg-purple-500';\n      case 'investment': return 'bg-yellow-500';\n      case 'hr/team': return 'bg-orange-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getEffectIcon = (effect: string) => {\n    switch (effect) {\n      case 'bankBalance': return TrendingUp;\n      case 'inHandCash': return TrendingUp;\n      case 'mainIncome': return TrendingUp;\n      case 'sideIncome': return TrendingUp;\n      case 'monthlyExpenses': return TrendingUp;\n      case 'karma': return Scale;\n      case 'logic': return Brain;\n      case 'emotion': return Heart;\n      case 'stress': return AlertTriangle;\n      case 'reputation': return Star;\n      case 'energy': return Zap;\n      default: return TrendingUp;\n    }\n  };\n\n  const getEffectColor = (effect: string, value: number) => {\n    if (effect === 'stress' || effect === 'monthlyExpenses') {\n      return value > 0 ? 'text-red-500' : 'text-green-500';\n    }\n    return value > 0 ? 'text-green-500' : 'text-red-500';\n  };\n\n  if (!currentScenario) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-[#d4af37] border-t-transparent rounded-full mx-auto mb-2\"></div>\n            <p className=\"text-gray-500\">Loading scenario...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (showResult && resultEffects) {\n    return (\n      <Card className=\"border-2 border-green-200 bg-green-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"text-green-600\" size={24} />\n            Decision Result\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-green-800\">\n                Choice Made: {currentScenario.options[selectedChoice!].text}\n              </h3>\n              <p className=\"text-sm text-green-600 mt-2\">Effects Applied</p>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n              {Object.entries(resultEffects).map(([effect, value]) => {\n                if (value === 0) return null;\n                const Icon = getEffectIcon(effect);\n                return (\n                  <div key={effect} className=\"bg-white p-3 rounded-lg text-center\">\n                    <Icon size={20} className={`mx-auto mb-1 ${getEffectColor(effect, value as number)}`} />\n                    <div className=\"text-xs text-gray-600 capitalize\">{effect}</div>\n                    <div className={`font-semibold ${getEffectColor(effect, value as number)}`}>\n                      {value as number > 0 ? '+' : ''}{value as number}\n                      {effect === 'money' ? '' : ''}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"animate-pulse text-sm text-gray-500\">\n                Loading next scenario...\n              </div>\n              <Progress value={100} className=\"w-full mt-2\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`transition-all duration-300 ${isAnimating ? 'scale-95 opacity-50' : 'scale-100 opacity-100'}`}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <span className=\"text-2xl\">🎯</span>\n            {currentScenario.title}\n          </CardTitle>\n          <Badge className={`${getCategoryColor(currentScenario.section)} text-white`}>\n            {currentScenario.section}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <p className=\"text-gray-700 leading-relaxed\">\n            {currentScenario.description}\n          </p>\n          \n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold text-gray-800\">What will you do?</h3>\n            {currentScenario.options.map((choice, index) => (\n              <button\n                key={index}\n                onClick={() => handleChoiceSelect(index)}\n                className={`w-full p-4 rounded-lg text-left transition-all duration-200 border-2 ${\n                  selectedChoice === index \n                    ? 'border-[#d4af37] bg-[#d4af37] text-white shadow-lg scale-[1.02]' \n                    : 'border-gray-200 bg-white hover:border-[#d4af37] hover:bg-gray-50'\n                }`}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\n                    selectedChoice === index \n                      ? 'border-white bg-white' \n                      : 'border-gray-300'\n                  }`}>\n                    {selectedChoice === index && (\n                      <CheckCircle size={16} className=\"text-[#d4af37]\" />\n                    )}\n                  </div>\n                  <span className=\"font-medium\">{choice.text}</span>\n                </div>\n                \n                {/* Show preview of effects */}\n                <div className=\"mt-2 ml-9 flex flex-wrap gap-2\">\n                  {Object.entries(choice.effects).map(([effect, value]) => {\n                    if (value === 0) return null;\n                    const Icon = getEffectIcon(effect);\n                    return (\n                      <div key={effect} className={`flex items-center gap-1 text-xs px-2 py-1 rounded ${\n                        selectedChoice === index ? 'bg-white bg-opacity-20' : 'bg-gray-100'\n                      }`}>\n                        <Icon size={12} />\n                        <span className=\"capitalize\">{effect}</span>\n                        <span className={selectedChoice === index ? 'text-white' : getEffectColor(effect, value as number)}>\n                          {value as number > 0 ? '+' : ''}{value}\n                        </span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </button>\n            ))}\n          </div>\n          \n          <div className=\"flex justify-center pt-4\">\n            <Button\n              onClick={handleScenarioComplete}\n              disabled={selectedChoice === null}\n              className=\"bg-[#d4af37] hover:bg-[#b8941f] text-white px-8 py-2 font-semibold\"\n            >\n              {selectedChoice !== null ? 'Confirm Decision' : 'Select a Choice'}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ScenarioEngine;","size_bytes":13193},"client/src/components/game/Sidebar.tsx":{"content":"import React from 'react';\nimport { X, BarChart3, TrendingUp, Shield, Building, Users, Handshake, Target, Package, Settings } from 'lucide-react';\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nconst sidebarItems = [\n  { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },\n  { id: 'cashflow', label: 'Cashflow Statement', icon: TrendingUp },\n  { id: 'stocks', label: 'Stocks', icon: TrendingUp },\n  { id: 'bonds', label: 'Bonds', icon: Shield },\n  { id: 'bank', label: 'Bank', icon: Building },\n  { id: 'team', label: 'Team', icon: Users },\n  { id: 'business_deals', label: 'Business Deals', icon: Handshake },\n  { id: 'strategy_hub', label: 'Strategy Hub', icon: Target },\n  { id: 'assets', label: 'Assets', icon: Package },\n  { id: 'settings', label: 'Settings', icon: Settings },\n];\n\nconst Sidebar: React.FC<SidebarProps> = ({ isOpen, onClose, activeSection, onSectionChange }) => {\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed lg:static inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out\n        ${isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}\n      `}>\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h2 className=\"text-xl font-bold text-[#3a3a3a]\">Wealth Sprint</h2>\n          <button \n            onClick={onClose}\n            className=\"lg:hidden p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n        \n        <nav className=\"p-4\">\n          {sidebarItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <button\n                key={item.id}\n                onClick={() => {\n                  onSectionChange(item.id);\n                  onClose();\n                }}\n                className={`\n                  w-full flex items-center gap-3 px-4 py-3 rounded-lg text-left transition-colors mb-2\n                  ${activeSection === item.id \n                    ? 'bg-[#d4af37] text-white' \n                    : 'text-[#3a3a3a] hover:bg-gray-100'\n                  }\n                `}\n              >\n                <Icon size={20} />\n                {item.label}\n              </button>\n            );\n          })}\n        </nav>\n      </div>\n    </>\n  );\n};\n\nexport default Sidebar;\n","size_bytes":2659},"client/src/components/game/TaskPanel.tsx":{"content":"import React from 'react';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { useAudio } from '../../lib/stores/useAudio';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\n\nconst TaskPanel: React.FC = () => {\n  const { activeScenarios, completeScenario, generateNewScenarios } = useWealthSprintGame();\n  const { playHit } = useAudio();\n\n  const handleOptionClick = (scenarioId: string, optionId: string) => {\n    playHit();\n    completeScenario(scenarioId, optionId);\n  };\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return 'bg-gray-500';\n      case 'uncommon': return 'bg-green-500';\n      case 'rare': return 'bg-blue-500';\n      case 'legendary': return 'bg-purple-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'business': return 'bg-[#d4af37]';\n      case 'stocks': return 'bg-green-600';\n      case 'real_estate': return 'bg-blue-600';\n      case 'emotion': return 'bg-pink-600';\n      case 'logic': return 'bg-purple-600';\n      case 'health': return 'bg-red-600';\n      case 'risk': return 'bg-orange-600';\n      case 'ethics': return 'bg-indigo-600';\n      default: return 'bg-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <h1 className=\"text-xl sm:text-2xl font-bold text-[#3a3a3a]\">Active Scenarios</h1>\n        <Button \n          onClick={generateNewScenarios}\n          className=\"bg-[#d4af37] hover:bg-[#b8941f] text-white w-full sm:w-auto\"\n        >\n          Generate New Scenarios\n        </Button>\n      </div>\n\n      {activeScenarios.length === 0 ? (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500 mb-4\">No active scenarios available</p>\n              <Button \n                onClick={generateNewScenarios}\n                className=\"bg-[#d4af37] hover:bg-[#b8941f] text-white\"\n              >\n                Generate Scenarios\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {activeScenarios.map((scenario) => (\n            <Card key={scenario.id} className=\"shadow-lg\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex flex-wrap items-center gap-2 mb-2\">\n                  <Badge className={`${getCategoryColor(scenario.category)} text-white text-xs`}>\n                    {scenario.category.replace('_', ' ').toUpperCase()}\n                  </Badge>\n                  <Badge className={`${getRarityColor(scenario.rarity)} text-white text-xs`}>\n                    {scenario.rarity.toUpperCase()}\n                  </Badge>\n                </div>\n                <CardTitle className=\"text-[#3a3a3a] text-lg\">{scenario.title}</CardTitle>\n                <CardDescription className=\"text-gray-600 text-sm\">\n                  {scenario.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-gray-50 p-3 rounded-lg mb-4\">\n                  <p className=\"text-sm text-gray-700\">{scenario.context}</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {scenario.options.map((option) => (\n                    <Button\n                      key={option.id}\n                      onClick={() => handleOptionClick(scenario.id, option.id)}\n                      className=\"w-full text-left justify-start h-auto p-3 bg-white border border-gray-200 hover:bg-gray-50 text-[#3a3a3a]\"\n                      variant=\"outline\"\n                    >\n                      <div className=\"flex flex-col w-full\">\n                        <span className=\"font-medium text-sm\">{option.text}</span>\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {option.consequences.stats && Object.entries(option.consequences.stats).map(([key, value]) => (\n                            value !== 0 && (\n                              <Badge \n                                key={key} \n                                variant=\"secondary\"\n                                className={`text-xs px-2 py-1 ${value > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}\n                              >\n                                {key}: {value > 0 ? '+' : ''}{value}\n                              </Badge>\n                            )\n                          ))}\n                          {option.consequences.financial && Object.entries(option.consequences.financial).map(([key, value]) => (\n                            value !== 0 && (\n                              <Badge \n                                key={key} \n                                variant=\"secondary\"\n                                className={`text-xs px-2 py-1 ${value > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}\n                              >\n                                {key}: ₹{value > 0 ? '+' : ''}{Math.abs(value).toLocaleString()}\n                              </Badge>\n                            )\n                          ))}\n                        </div>\n                      </div>\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPanel;\n","size_bytes":5726},"client/src/components/game/TestSystemsButton.tsx":{"content":"import React from 'react';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { toast } from 'sonner';\n\nconst TestSystemsButton: React.FC = () => {\n  const { \n    playerStats, \n    financialData, \n    gameState, \n    updatePlayerStats, \n    updateFinancialData, \n    checkStressSystem, \n    checkEmotionSystem, \n    checkBankruptcy,\n    checkReputationAccess,\n    checkBlackoutMode,\n    processTurn\n  } = useWealthSprintGame();\n\n  const testStressSystem = () => {\n    console.log('Testing stress system...');\n    updatePlayerStats({ stress: 95 });\n    checkStressSystem();\n    toast.success('Stress system test - Set stress to 95');\n  };\n\n  const testEmotionSystem = () => {\n    console.log('Testing emotion system...');\n    updatePlayerStats({ emotion: 5 });\n    checkEmotionSystem();\n    toast.success('Emotion system test - Set emotion to 5');\n  };\n\n  const testBankruptcy = () => {\n    console.log('Testing bankruptcy system...');\n    updateFinancialData({ bankBalance: -150000 });\n    const isBankrupt = checkBankruptcy();\n    toast.success(`Bankruptcy test - Balance: -₹1.5L, Bankrupt: ${isBankrupt}`);\n  };\n\n  const testReputationAccess = () => {\n    console.log('Testing reputation access...');\n    updatePlayerStats({ reputation: 5 });\n    const hasAccess = checkReputationAccess();\n    toast.success(`Reputation test - Reputation: 5, Access: ${hasAccess}`);\n  };\n\n  const testBlackoutMode = () => {\n    console.log('Testing blackout mode...');\n    updatePlayerStats({ stress: 100, emotion: 0 });\n    checkBlackoutMode();\n    toast.success('Blackout mode test - Stress: 100, Emotion: 0');\n  };\n\n  const testProcessTurn = () => {\n    console.log('Testing process turn...');\n    processTurn();\n    toast.success('Process turn test completed');\n  };\n\n  const resetStats = () => {\n    console.log('Resetting stats to normal...');\n    updatePlayerStats({\n      stress: 40,\n      emotion: 60,\n      karma: 50,\n      logic: 60,\n      reputation: 50,\n      energy: 70\n    });\n    updateFinancialData({\n      bankBalance: 200000,\n      netWorth: 200000\n    });\n    toast.success('Stats reset to normal levels');\n  };\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">🧪 System Tests (Development Only)</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n            <Button size=\"sm\" onClick={testStressSystem} variant=\"outline\">\n              Test Stress (95)\n            </Button>\n            <Button size=\"sm\" onClick={testEmotionSystem} variant=\"outline\">\n              Test Emotion (5)\n            </Button>\n            <Button size=\"sm\" onClick={testBankruptcy} variant=\"outline\">\n              Test Bankruptcy\n            </Button>\n            <Button size=\"sm\" onClick={testReputationAccess} variant=\"outline\">\n              Test Reputation (5)\n            </Button>\n            <Button size=\"sm\" onClick={testBlackoutMode} variant=\"outline\">\n              Test Blackout\n            </Button>\n            <Button size=\"sm\" onClick={testProcessTurn} variant=\"outline\">\n              Test Process Turn\n            </Button>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button size=\"sm\" onClick={resetStats} variant=\"default\">\n              Reset to Normal\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-xs\">\n            <div>\n              <span className=\"font-semibold\">Game State:</span>\n              <div className=\"space-y-1\">\n                {gameState.isHospitalized && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    Hospitalized ({gameState.hospitalizationTurnsLeft})\n                  </Badge>\n                )}\n                {gameState.isMentalBreakdown && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    Breakdown ({gameState.breakdownTurnsLeft})\n                  </Badge>\n                )}\n                {gameState.isBlackoutMode && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    Blackout ({gameState.blackoutTurnsLeft})\n                  </Badge>\n                )}\n                {!gameState.isHospitalized && !gameState.isMentalBreakdown && !gameState.isBlackoutMode && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">Normal</Badge>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <span className=\"font-semibold\">Critical Stats:</span>\n              <div>Stress: {playerStats.stress}</div>\n              <div>Emotion: {playerStats.emotion}</div>\n              <div>Reputation: {playerStats.reputation}</div>\n            </div>\n            \n            <div>\n              <span className=\"font-semibold\">Financial:</span>\n              <div>Balance: ₹{(financialData.bankBalance / 100000).toFixed(1)}L</div>\n              <div>Net Worth: ₹{(financialData.netWorth / 100000).toFixed(1)}L</div>\n            </div>\n            \n            <div>\n              <span className=\"font-semibold\">Access:</span>\n              <div>Reputation: {checkReputationAccess() ? '✅' : '❌'}</div>\n              <div>Bankrupt: {checkBankruptcy() ? '❌' : '✅'}</div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TestSystemsButton;","size_bytes":5647},"client/src/components/game/TopBar.tsx":{"content":"import React from 'react';\nimport { Menu, Calendar, Clock, Heart, Brain, Scale, Zap, TrendingUp } from 'lucide-react';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { useAudio } from '../../lib/stores/useAudio';\n\ninterface TopBarProps {\n  onMenuClick: () => void;\n}\n\nconst TopBar: React.FC<TopBarProps> = ({ onMenuClick }) => {\n  const { currentWeek, currentDay, playerStats, advanceTime } = useWealthSprintGame();\n  const { toggleMute, isMuted } = useAudio();\n\n  const getStatColor = (value: number) => {\n    if (value >= 80) return 'text-green-600';\n    if (value >= 60) return 'text-yellow-600';\n    if (value >= 40) return 'text-orange-600';\n    return 'text-red-600';\n  };\n\n  return (\n    <div className=\"bg-white border-b border-gray-200 p-4 flex items-center justify-between\">\n      {/* Left side - Menu and Time */}\n      <div className=\"flex items-center gap-4\">\n        <button \n          onClick={onMenuClick}\n          className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n        >\n          <Menu size={20} />\n        </button>\n        \n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Calendar size={16} className=\"text-[#3a3a3a]\" />\n            <span className=\"text-sm font-medium text-[#3a3a3a]\">\n              Week {currentWeek}, Day {currentDay}\n            </span>\n          </div>\n          \n          <button \n            onClick={advanceTime}\n            className=\"bg-[#d4af37] text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-[#b8941f] transition-colors\"\n          >\n            <Clock size={14} className=\"inline mr-1\" />\n            Next Day\n          </button>\n        </div>\n      </div>\n\n      {/* Center - Player Stats */}\n      <div className=\"flex items-center gap-6\">\n        <div className=\"flex items-center gap-2\">\n          <Brain size={16} className={getStatColor(playerStats.logic)} />\n          <span className=\"text-sm font-medium\">Logic: {playerStats.logic}</span>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Heart size={16} className={getStatColor(playerStats.emotion)} />\n          <span className=\"text-sm font-medium\">Emotion: {playerStats.emotion}</span>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Scale size={16} className={getStatColor(playerStats.karma)} />\n          <span className=\"text-sm font-medium\">Karma: {playerStats.karma}</span>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <TrendingUp size={16} className={getStatColor(100 - playerStats.stress)} />\n          <span className=\"text-sm font-medium\">Stress: {playerStats.stress}</span>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Zap size={16} className={getStatColor(playerStats.energy)} />\n          <span className=\"text-sm font-medium\">Energy: {playerStats.energy}</span>\n        </div>\n      </div>\n\n      {/* Right side - Controls */}\n      <div className=\"flex items-center gap-4\">\n        <button \n          onClick={toggleMute}\n          className=\"p-2 rounded-lg hover:bg-gray-100 transition-colors\"\n        >\n          {isMuted ? '🔇' : '🔊'}\n        </button>\n        \n        <div className=\"text-sm text-[#3a3a3a]\">\n          <span className=\"font-medium\">Wealth Sprint</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TopBar;\n","size_bytes":3464},"client/src/components/game/WealthTracker.tsx":{"content":"import React from 'react';\nimport { TrendingUp, TrendingDown, DollarSign, Target } from 'lucide-react';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { formatIndianCurrency } from '../../lib/utils';\nimport { Progress } from '../ui/progress';\n\nconst WealthTracker: React.FC = () => {\n  const { financialData } = useWealthSprintGame();\n  \n  const progressToFI = Math.min(100, (financialData.sideIncome / financialData.monthlyExpenses) * 100);\n  const isFinanciallyIndependent = financialData.sideIncome >= financialData.monthlyExpenses;\n\n  return (\n    <div className=\"bg-white border-t border-gray-200 p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-[#3a3a3a]\">Wealth Sprint Tracker</h3>\n        <div className=\"flex items-center gap-2\">\n          <Target size={16} className=\"text-[#d4af37]\" />\n          <span className=\"text-sm font-medium text-[#3a3a3a]\">\n            Financial Independence: {progressToFI.toFixed(1)}%\n          </span>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <DollarSign size={16} className=\"text-green-600\" />\n          <div>\n            <p className=\"text-xs text-gray-500\">Net Worth</p>\n            <p className=\"text-sm font-semibold text-[#3a3a3a]\">\n{formatIndianCurrency(financialData.netWorth)}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <TrendingUp size={16} className=\"text-blue-600\" />\n          <div>\n            <p className=\"text-xs text-gray-500\">Side Income</p>\n            <p className=\"text-sm font-semibold text-[#3a3a3a]\">\n{formatIndianCurrency(financialData.sideIncome)}/month\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <TrendingDown size={16} className=\"text-red-600\" />\n          <div>\n            <p className=\"text-xs text-gray-500\">Monthly Expenses</p>\n            <p className=\"text-sm font-semibold text-[#3a3a3a]\">\n{formatIndianCurrency(financialData.monthlyExpenses)}/month\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <DollarSign size={16} className=\"text-purple-600\" />\n          <div>\n            <p className=\"text-xs text-gray-500\">Monthly Cashflow</p>\n            <p className={`text-sm font-semibold ${financialData.cashflow >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n{formatIndianCurrency(financialData.cashflow)}/month\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-500\">Progress to Financial Independence</span>\n          <span className={`font-medium ${isFinanciallyIndependent ? 'text-green-600' : 'text-gray-700'}`}>\n            {isFinanciallyIndependent ? 'Achieved!' : `${progressToFI.toFixed(1)}%`}\n          </span>\n        </div>\n        <Progress \n          value={progressToFI} \n          className=\"h-2\"\n        />\n        <p className=\"text-xs text-gray-500 text-center\">\n          {isFinanciallyIndependent \n            ? '🎉 Congratulations! You have achieved Financial Independence!' \n            : `You need ${formatIndianCurrency(financialData.monthlyExpenses - financialData.sideIncome)} more in side income`\n          }\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default WealthTracker;\n","size_bytes":3580},"client/src/components/ui/accordion.tsx":{"content":"import React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1996},"client/src/components/ui/alert-dialog.tsx":{"content":"import React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4414},"client/src/components/ui/alert.tsx":{"content":"import React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1593},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1414},"client/src/components/ui/badge.tsx":{"content":"import React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1135},"client/src/components/ui/breadcrumb.tsx":{"content":"import React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2707},"client/src/components/ui/button.tsx":{"content":"import React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1897},"client/src/components/ui/calendar.tsx":{"content":"import React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2930},"client/src/components/ui/card.tsx":{"content":"import React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1823},"client/src/components/ui/carousel.tsx":{"content":"import React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6205},"client/src/components/ui/chart.tsx":{"content":"import React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js';\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n);\n\ninterface ChartProps {\n  type: 'line' | 'bar' | 'doughnut';\n  data: any;\n  options?: any;\n  className?: string;\n}\n\nexport function Chart({ type, data, options, className }: ChartProps) {\n  const defaultOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n    },\n    scales: type !== 'doughnut' ? {\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n      },\n      x: {\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n        },\n      },\n    } : undefined,\n  };\n\n  const mergedOptions = { ...defaultOptions, ...options };\n\n  const renderChart = () => {\n    switch (type) {\n      case 'line':\n        return <Line data={data} options={mergedOptions} />;\n      case 'bar':\n        return <Bar data={data} options={mergedOptions} />;\n      case 'doughnut':\n        return <Doughnut data={data} options={mergedOptions} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={`w-full h-full ${className}`}>\n      {renderChart()}\n    </div>\n  );\n}\n","size_bytes":1509},"client/src/components/ui/checkbox.tsx":{"content":"import React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1007},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4868},"client/src/components/ui/context-menu.tsx":{"content":"import React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7219},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3844},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3016},"client/src/components/ui/dropdown-menu.tsx":{"content":"import React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7475},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4127},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1193},"client/src/components/ui/input-otp.tsx":{"content":"import React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2138},"client/src/components/ui/input.tsx":{"content":"import React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":763},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { Confetti } from \"../game/Confetti\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        document.activeElement?.blur(); // Remove focus from any button\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      <Confetti />\n      \n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3154},"client/src/components/ui/label.tsx":{"content":"import React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":705},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8517},"client/src/components/ui/navigation-menu.tsx":{"content":"import React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5119},"client/src/components/ui/pagination.tsx":{"content":"import React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2746},"client/src/components/ui/popover.tsx":{"content":"import React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1287},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":787},"client/src/components/ui/radio-group.tsx":{"content":"import React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1405},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1637},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5634},"client/src/components/ui/separator.tsx":{"content":"import React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":751},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4275},"client/src/components/ui/sidebar.tsx":{"content":"import React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23785},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1032},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1143},"client/src/components/ui/table.tsx":{"content":"import React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2854},"client/src/components/ui/tabs.tsx":{"content":"import React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1872},"client/src/components/ui/textarea.tsx":{"content":"import React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":644},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1748},"client/src/components/ui/toggle.tsx":{"content":"import React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1481},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1212},"client/src/lib/data/scenarios.ts":{"content":"// Enhanced Scenario System for Wealth Sprint\nexport interface ScenarioChoice {\n  id: string;\n  text: string;\n  effects: {\n    bankBalance?: number;\n    inHandCash?: number;\n    emotion?: number;\n    stress?: number;\n    karma?: number;\n    logic?: number;\n    reputation?: number;\n    energy?: number;\n    mainIncome?: number;\n    sideIncome?: number;\n    monthlyExpenses?: number;\n  };\n  description: string;\n}\n\nexport interface GameScenario {\n  id: number;\n  section: 'Finance' | 'Emotion' | 'Business' | 'Personal' | 'Investment' | 'HR/Team';\n  title: string;\n  description: string;\n  urgency: 'low' | 'medium' | 'high';\n  options: ScenarioChoice[];\n  tags: string[];\n}\n\nexport const scenarioDatabase: GameScenario[] = [\n  // FINANCE SCENARIOS (200+)\n  {\n    id: 1,\n    section: 'Finance',\n    title: 'FD Maturity Decision',\n    description: 'Your 5-year FD of ₹5 lakhs has matured. Interest rates have dropped significantly since you invested.',\n    urgency: 'medium',\n    tags: ['FD', 'Investment', 'Interest rates'],\n    options: [\n      {\n        id: 'renew_fd',\n        text: 'Renew FD at lower rate (6.5%)',\n        effects: { bankBalance: 500000, emotion: -5, logic: 5 },\n        description: 'Safe but lower returns'\n      },\n      {\n        id: 'equity_invest',\n        text: 'Invest in equity mutual funds',\n        effects: { bankBalance: 500000, stress: 10, logic: 10 },\n        description: 'Higher risk, potentially higher returns'\n      },\n      {\n        id: 'real_estate',\n        text: 'Use as down payment for property',\n        effects: { bankBalance: 500000, stress: 20, reputation: 10 },\n        description: 'Leverage for real estate investment'\n      }\n    ]\n  },\n  {\n    id: 2,\n    section: 'Finance',\n    title: 'EMI Burden Crisis',\n    description: 'Your monthly EMIs are consuming 65% of your income. You need to make a difficult decision.',\n    urgency: 'high',\n    tags: ['EMI', 'Debt', 'Financial crisis'],\n    options: [\n      {\n        id: 'sell_asset',\n        text: 'Sell investments to pay off loans',\n        effects: { bankBalance: 200000, stress: -20, logic: 10 },\n        description: 'Reduce debt burden but lose investment potential'\n      },\n      {\n        id: 'extend_tenure',\n        text: 'Extend loan tenure to reduce EMI',\n        effects: { monthlyExpenses: -5000, stress: 5, karma: -5 },\n        description: 'Lower EMI but more total interest'\n      },\n      {\n        id: 'side_income',\n        text: 'Start freelancing for extra income',\n        effects: { sideIncome: 15000, stress: 15, energy: -10 },\n        description: 'More income but work-life balance suffers'\n      }\n    ]\n  },\n  {\n    id: 3,\n    section: 'Finance',\n    title: 'Salary Delayed Crisis',\n    description: 'Your company has delayed salaries for 3 months due to cash flow issues. Bills are piling up.',\n    urgency: 'high',\n    tags: ['Salary', 'Cash flow', 'Emergency'],\n    options: [\n      {\n        id: 'personal_loan',\n        text: 'Take personal loan for expenses',\n        effects: { bankBalance: 150000, stress: 20, karma: -5 },\n        description: 'Immediate relief but debt burden'\n      },\n      {\n        id: 'family_help',\n        text: 'Ask family for financial help',\n        effects: { inHandCash: 50000, emotion: -15, reputation: -10 },\n        description: 'Family support but damaged pride'\n      },\n      {\n        id: 'job_switch',\n        text: 'Start looking for new job immediately',\n        effects: { stress: 10, logic: 15, energy: -5 },\n        description: 'Long-term solution but uncertain timing'\n      }\n    ]\n  },\n  {\n    id: 4,\n    section: 'Finance',\n    title: 'Debt Trap Warning',\n    description: 'Credit card bills have reached ₹3 lakhs. Minimum payments are becoming difficult.',\n    urgency: 'high',\n    tags: ['Credit card', 'Debt trap', 'Financial crisis'],\n    options: [\n      {\n        id: 'debt_consolidation',\n        text: 'Take personal loan for debt consolidation',\n        effects: { bankBalance: 300000, stress: 10, logic: 10 },\n        description: 'Lower interest but still debt'\n      },\n      {\n        id: 'sell_everything',\n        text: 'Sell all non-essential assets',\n        effects: { bankBalance: 200000, emotion: -20, stress: -10 },\n        description: 'Drastic step but debt freedom'\n      },\n      {\n        id: 'negotiate_settlement',\n        text: 'Negotiate with bank for settlement',\n        effects: { bankBalance: 150000, reputation: -20, karma: -10 },\n        description: 'Partial relief but credit score damage'\n      }\n    ]\n  },\n  {\n    id: 5,\n    section: 'Finance',\n    title: 'Bond Investment Opportunity',\n    description: 'Government bonds with 8% return for 10 years are available. Should you invest your savings?',\n    urgency: 'medium',\n    tags: ['Bonds', 'Government', 'Long-term investment'],\n    options: [\n      {\n        id: 'invest_bonds',\n        text: 'Invest ₹2 lakhs in bonds',\n        effects: { bankBalance: -200000, logic: 10, stress: -5 },\n        description: 'Safe long-term investment'\n      },\n      {\n        id: 'equity_instead',\n        text: 'Invest in equity for better returns',\n        effects: { bankBalance: -200000, stress: 10, logic: 5 },\n        description: 'Higher risk but potential for better returns'\n      },\n      {\n        id: 'keep_liquid',\n        text: 'Keep money in savings account',\n        effects: { emotion: -5, logic: -10 },\n        description: 'Liquid but inflation erosion'\n      }\n    ]\n  },\n\n  // EMOTION SCENARIOS (200+)\n  {\n    id: 101,\n    section: 'Emotion',\n    title: 'Midnight Burnout',\n    description: 'You\\'ve worked 22 days non-stop. Your energy is at 20%. Family is complaining about your absence.',\n    urgency: 'high',\n    tags: ['Burnout', 'Overwork', 'Work-life balance'],\n    options: [\n      {\n        id: 'take_rest',\n        text: 'Take 2-day rest',\n        effects: { energy: 40, mainIncome: -10000, emotion: 20 },\n        description: 'Rest and recover but lose income'\n      },\n      {\n        id: 'push_harder',\n        text: 'Push through for the deadline',\n        effects: { karma: -10, stress: 30, mainIncome: 20000 },\n        description: 'Complete work but risk health'\n      },\n      {\n        id: 'delegate_work',\n        text: 'Delegate some tasks to team',\n        effects: { stress: -10, reputation: 5, logic: 10 },\n        description: 'Smart delegation but depends on team'\n      }\n    ]\n  },\n  {\n    id: 102,\n    section: 'Emotion',\n    title: 'Regret Over Investment Loss',\n    description: 'You lost ₹2 lakhs in a risky stock investment. You\\'re feeling depressed and making poor decisions.',\n    urgency: 'medium',\n    tags: ['Regret', 'Loss', 'Depression'],\n    options: [\n      {\n        id: 'accept_move_on',\n        text: 'Accept the loss and move on',\n        effects: { emotion: 15, logic: 20, stress: -10 },\n        description: 'Healthy response to failure'\n      },\n      {\n        id: 'revenge_trading',\n        text: 'Try to recover losses with more trading',\n        effects: { bankBalance: -50000, emotion: -20, stress: 25 },\n        description: 'Dangerous emotional response'\n      },\n      {\n        id: 'seek_counseling',\n        text: 'Talk to a financial counselor',\n        effects: { inHandCash: -5000, emotion: 10, logic: 15 },\n        description: 'Professional help for emotional recovery'\n      }\n    ]\n  },\n  {\n    id: 103,\n    section: 'Emotion',\n    title: 'Motivation Crisis',\n    description: 'You\\'ve been feeling unmotivated for weeks. Work performance is declining.',\n    urgency: 'medium',\n    tags: ['Motivation', 'Performance', 'Career'],\n    options: [\n      {\n        id: 'take_vacation',\n        text: 'Take a week-long vacation',\n        effects: { inHandCash: -25000, energy: 30, emotion: 25 },\n        description: 'Recharge but expensive'\n      },\n      {\n        id: 'new_challenges',\n        text: 'Request new challenging projects',\n        effects: { stress: 10, logic: 15, reputation: 10 },\n        description: 'Stimulate motivation through challenge'\n      },\n      {\n        id: 'career_counseling',\n        text: 'Seek career counseling',\n        effects: { inHandCash: -10000, logic: 20, emotion: 10 },\n        description: 'Professional guidance for career direction'\n      }\n    ]\n  },\n\n  // BUSINESS SCENARIOS (200+)\n  {\n    id: 201,\n    section: 'Business',\n    title: 'Team Conflict Resolution',\n    description: 'Two senior team members are in serious conflict, affecting entire team productivity.',\n    urgency: 'high',\n    tags: ['Team conflict', 'Leadership', 'Productivity'],\n    options: [\n      {\n        id: 'mediate_conflict',\n        text: 'Mediate the conflict personally',\n        effects: { stress: 15, reputation: 10, logic: 10 },\n        description: 'Direct intervention but time-consuming'\n      },\n      {\n        id: 'separate_teams',\n        text: 'Separate them into different teams',\n        effects: { stress: 5, reputation: -5, logic: 5 },\n        description: 'Quick fix but may not solve root cause'\n      },\n      {\n        id: 'hr_intervention',\n        text: 'Let HR handle the situation',\n        effects: { stress: -5, reputation: -10, karma: -5 },\n        description: 'Avoid direct confrontation but seen as weak'\n      }\n    ]\n  },\n  {\n    id: 202,\n    section: 'Business',\n    title: 'Major Deal Opportunity',\n    description: 'A potential client offers ₹50 lakh contract but demands 90-day payment terms.',\n    urgency: 'medium',\n    tags: ['Deal', 'Cash flow', 'Business growth'],\n    options: [\n      {\n        id: 'accept_deal',\n        text: 'Accept the deal with payment terms',\n        effects: { mainIncome: 500000, stress: 20, reputation: 15 },\n        description: 'Big opportunity but cash flow risk'\n      },\n      {\n        id: 'negotiate_terms',\n        text: 'Negotiate for 30-day payment terms',\n        effects: { mainIncome: 350000, stress: 10, logic: 10 },\n        description: 'Balanced approach with lower risk'\n      },\n      {\n        id: 'reject_deal',\n        text: 'Reject due to payment terms',\n        effects: { emotion: -10, logic: 15, stress: -5 },\n        description: 'Conservative but safe approach'\n      }\n    ]\n  },\n  {\n    id: 203,\n    section: 'Business',\n    title: 'Product Pivot Decision',\n    description: 'Market research shows your main product needs major changes. This will cost ₹20 lakhs.',\n    urgency: 'high',\n    tags: ['Product pivot', 'Market research', 'Investment'],\n    options: [\n      {\n        id: 'full_pivot',\n        text: 'Invest in complete product pivot',\n        effects: { bankBalance: -200000, stress: 25, logic: 15 },\n        description: 'Major change but better market fit'\n      },\n      {\n        id: 'gradual_changes',\n        text: 'Make gradual improvements',\n        effects: { bankBalance: -75000, stress: 10, logic: 10 },\n        description: 'Safer approach but slower adaptation'\n      },\n      {\n        id: 'continue_current',\n        text: 'Continue with current product',\n        effects: { mainIncome: -50000, stress: -5, logic: -10 },\n        description: 'No investment but declining market share'\n      }\n    ]\n  },\n\n  // PERSONAL SCENARIOS (200+)\n  {\n    id: 301,\n    section: 'Personal',\n    title: 'Family Emergency Fund',\n    description: 'Your sibling needs ₹3 lakhs for their child\\'s education. You have the money but it\\'s your emergency fund.',\n    urgency: 'high',\n    tags: ['Family', 'Emergency fund', 'Education'],\n    options: [\n      {\n        id: 'help_family',\n        text: 'Give the money to help family',\n        effects: { bankBalance: -300000, emotion: 20, karma: 25 },\n        description: 'Family support but depleted emergency fund'\n      },\n      {\n        id: 'partial_help',\n        text: 'Give ₹1.5 lakhs as partial help',\n        effects: { bankBalance: -150000, emotion: 5, karma: 10 },\n        description: 'Balanced approach but family may be disappointed'\n      },\n      {\n        id: 'suggest_loan',\n        text: 'Suggest they take an education loan',\n        effects: { emotion: -10, logic: 15, karma: -5 },\n        description: 'Practical but may strain relationship'\n      }\n    ]\n  },\n  {\n    id: 302,\n    section: 'Personal',\n    title: 'Relationship vs Career',\n    description: 'Your partner wants to relocate for their career. This means you\\'ll have to leave your high-paying job.',\n    urgency: 'high',\n    tags: ['Relationship', 'Career', 'Relocation'],\n    options: [\n      {\n        id: 'relocate_together',\n        text: 'Relocate and find new job',\n        effects: { mainIncome: -25000, emotion: 20, stress: 15 },\n        description: 'Support partner but career setback'\n      },\n      {\n        id: 'long_distance',\n        text: 'Maintain long-distance relationship',\n        effects: { monthlyExpenses: 10000, emotion: -15, stress: 20 },\n        description: 'Keep job but strain relationship'\n      },\n      {\n        id: 'remote_work',\n        text: 'Negotiate remote work arrangement',\n        effects: { mainIncome: -10000, emotion: 10, logic: 15 },\n        description: 'Compromise solution but income reduction'\n      }\n    ]\n  },\n  {\n    id: 303,\n    section: 'Personal',\n    title: 'Health Insurance Decision',\n    description: 'Your health insurance premium has increased by 40%. You need to decide on coverage.',\n    urgency: 'medium',\n    tags: ['Health insurance', 'Healthcare', 'Premium'],\n    options: [\n      {\n        id: 'pay_premium',\n        text: 'Pay increased premium',\n        effects: { monthlyExpenses: 5000, stress: 5, logic: 15 },\n        description: 'Maintain coverage but higher cost'\n      },\n      {\n        id: 'reduce_coverage',\n        text: 'Reduce coverage to lower premium',\n        effects: { monthlyExpenses: 1000, stress: 10, logic: 5 },\n        description: 'Lower cost but higher risk'\n      },\n      {\n        id: 'switch_provider',\n        text: 'Switch to different insurance provider',\n        effects: { monthlyExpenses: 2000, stress: 15, logic: 10 },\n        description: 'Moderate cost but coverage uncertainty'\n      }\n    ]\n  },\n\n  // INVESTMENT SCENARIOS (200+)\n  {\n    id: 401,\n    section: 'Investment',\n    title: 'Crypto Investment Hype',\n    description: 'Everyone around you is making money in cryptocurrency. You have ₹2 lakhs to invest.',\n    urgency: 'medium',\n    tags: ['Cryptocurrency', 'FOMO', 'High risk'],\n    options: [\n      {\n        id: 'invest_crypto',\n        text: 'Invest ₹2 lakhs in cryptocurrency',\n        effects: { bankBalance: -200000, stress: 25, emotion: 10 },\n        description: 'High risk, high reward but very volatile'\n      },\n      {\n        id: 'small_investment',\n        text: 'Invest only ₹50,000 to test waters',\n        effects: { bankBalance: -50000, stress: 10, logic: 10 },\n        description: 'Conservative approach to high-risk investment'\n      },\n      {\n        id: 'avoid_crypto',\n        text: 'Avoid cryptocurrency completely',\n        effects: { emotion: -5, logic: 20, stress: -5 },\n        description: 'Safe but might miss opportunities'\n      }\n    ]\n  },\n  {\n    id: 402,\n    section: 'Investment',\n    title: 'Real Estate Scam Alert',\n    description: 'A property dealer offers 40% below market rate. Something seems fishy but the deal looks attractive.',\n    urgency: 'high',\n    tags: ['Real estate', 'Scam', 'Due diligence'],\n    options: [\n      {\n        id: 'investigate_deal',\n        text: 'Hire lawyer to investigate the deal',\n        effects: { inHandCash: -25000, logic: 20, stress: 10 },\n        description: 'Due diligence but additional cost'\n      },\n      {\n        id: 'trust_dealer',\n        text: 'Trust the dealer and proceed',\n        effects: { bankBalance: -500000, stress: 30, karma: -15 },\n        description: 'High risk of fraud'\n      },\n      {\n        id: 'walk_away',\n        text: 'Walk away from the deal',\n        effects: { emotion: -5, logic: 15, stress: -10 },\n        description: 'Safe but might miss genuine opportunity'\n      }\n    ]\n  },\n  {\n    id: 403,\n    section: 'Investment',\n    title: 'Stock Market Crash',\n    description: 'Market has crashed 30% in two days. Your portfolio is down ₹3 lakhs.',\n    urgency: 'high',\n    tags: ['Stock market', 'Crash', 'Portfolio'],\n    options: [\n      {\n        id: 'hold_investments',\n        text: 'Hold all investments and wait',\n        effects: { stress: 20, logic: 15, emotion: -10 },\n        description: 'Patient approach but uncertain recovery'\n      },\n      {\n        id: 'sell_everything',\n        text: 'Sell everything to prevent further losses',\n        effects: { bankBalance: -300000, stress: 30, logic: -10 },\n        description: 'Panic selling often leads to losses'\n      },\n      {\n        id: 'buy_more',\n        text: 'Buy more stocks at discounted prices',\n        effects: { bankBalance: -100000, stress: 15, logic: 20 },\n        description: 'Contrarian approach but requires courage'\n      }\n    ]\n  },\n\n  // HR/TEAM SCENARIOS (200+)\n  {\n    id: 501,\n    section: 'HR/Team',\n    title: 'Key Employee Resignation',\n    description: 'Your best developer wants to quit for 40% salary hike at another company.',\n    urgency: 'high',\n    tags: ['Resignation', 'Retention', 'Salary hike'],\n    options: [\n      {\n        id: 'counter_offer',\n        text: 'Match the salary offer',\n        effects: { monthlyExpenses: 30000, stress: 10, reputation: 10 },\n        description: 'Retain talent but cost increase'\n      },\n      {\n        id: 'negotiate_benefits',\n        text: 'Offer better benefits instead of salary',\n        effects: { monthlyExpenses: 15000, stress: 15, logic: 10 },\n        description: 'Creative retention but may not work'\n      },\n      {\n        id: 'let_them_go',\n        text: 'Let them go and hire replacement',\n        effects: { mainIncome: -50000, stress: 25, logic: 5 },\n        description: 'Cheaper but productivity loss'\n      }\n    ]\n  },\n  {\n    id: 502,\n    section: 'HR/Team',\n    title: 'Loyalty Crisis',\n    description: 'Anonymous survey shows 60% of team is considering leaving. Morale is at all-time low.',\n    urgency: 'high',\n    tags: ['Loyalty', 'Morale', 'Team management'],\n    options: [\n      {\n        id: 'team_bonuses',\n        text: 'Give surprise bonuses to everyone',\n        effects: { bankBalance: -200000, emotion: 15, reputation: 20 },\n        description: 'Expensive but immediate morale boost'\n      },\n      {\n        id: 'restructure_management',\n        text: 'Restructure management approach',\n        effects: { stress: 20, logic: 15, reputation: 10 },\n        description: 'Fundamental change but time-consuming'\n      },\n      {\n        id: 'one_on_one',\n        text: 'Conduct one-on-one meetings with each member',\n        effects: { stress: 15, emotion: 10, logic: 10 },\n        description: 'Personal attention but very time-consuming'\n      }\n    ]\n  },\n  {\n    id: 503,\n    section: 'HR/Team',\n    title: 'Promotion Dilemma',\n    description: 'Two equally qualified team members are competing for the same promotion. Both threaten to leave if not promoted.',\n    urgency: 'medium',\n    tags: ['Promotion', 'Competition', 'Team dynamics'],\n    options: [\n      {\n        id: 'promote_both',\n        text: 'Create two positions and promote both',\n        effects: { monthlyExpenses: 40000, stress: 5, reputation: 15 },\n        description: 'Expensive but maintains team harmony'\n      },\n      {\n        id: 'merit_based',\n        text: 'Promote based on clear merit criteria',\n        effects: { stress: 15, logic: 20, reputation: 10 },\n        description: 'Fair but may lose one person'\n      },\n      {\n        id: 'external_hire',\n        text: 'Hire external candidate for the position',\n        effects: { monthlyExpenses: 25000, stress: 10, reputation: -15 },\n        description: 'Neutral but team may feel betrayed'\n      }\n    ]\n  }\n];\n\n// Helper functions for scenario management\nexport const getRandomScenarios = (count: number = 3): GameScenario[] => {\n  const shuffled = [...scenarioDatabase].sort(() => Math.random() - 0.5);\n  return shuffled.slice(0, count);\n};\n\nexport const getScenariosBySection = (section: string): GameScenario[] => {\n  return scenarioDatabase.filter(scenario => scenario.section === section);\n};\n\nexport const getScenariosByUrgency = (urgency: string): GameScenario[] => {\n  return scenarioDatabase.filter(scenario => scenario.urgency === urgency);\n};\n\nexport const getScenariosByTag = (tag: string): GameScenario[] => {\n  return scenarioDatabase.filter(scenario => scenario.tags.includes(tag));\n};\n\nexport const getRandomScenarioBySection = (section: string): GameScenario | null => {\n  const sectionScenarios = getScenariosBySection(section);\n  if (sectionScenarios.length === 0) return null;\n  return sectionScenarios[Math.floor(Math.random() * sectionScenarios.length)];\n};\n\nexport const getScenarioById = (id: number): GameScenario | null => {\n  return scenarioDatabase.find(scenario => scenario.id === id) || null;\n};\n\n// Advanced scenario selection based on player state\nexport const getContextualScenarios = (playerStats: any, financialData: any): GameScenario[] => {\n  const contextualScenarios: GameScenario[] = [];\n  \n  // Financial stress scenarios\n  if (financialData.bankBalance < 50000) {\n    contextualScenarios.push(...getScenariosByTag('Financial crisis'));\n  }\n  \n  // Emotional scenarios based on stats\n  if (playerStats.stress > 70) {\n    contextualScenarios.push(...getScenariosByTag('Burnout'));\n  }\n  \n  if (playerStats.emotion < 40) {\n    contextualScenarios.push(...getScenariosByTag('Motivation'));\n  }\n  \n  // Business scenarios for high performers\n  if (playerStats.reputation > 80) {\n    contextualScenarios.push(...getScenariosByTag('Leadership'));\n  }\n  \n  // Investment scenarios for wealthy players\n  if (financialData.bankBalance > 500000) {\n    contextualScenarios.push(...getScenariosBySection('Investment'));\n  }\n  \n  // Remove duplicates and shuffle\n  const uniqueScenarios = [...new Set(contextualScenarios)];\n  return uniqueScenarios.sort(() => Math.random() - 0.5).slice(0, 3);\n};","size_bytes":22037},"client/src/lib/data/specialScenarios.ts":{"content":"import { GameScenario } from './scenarios';\n\n// Special scenarios triggered by specific game conditions\nexport const specialScenarios: { [key: string]: GameScenario } = {\n  // Stress >= 100 (Hospitalization)\n  hospitalization: {\n    id: 9001,\n    section: 'Personal',\n    title: 'Hospital Emergency',\n    description: 'You collapsed in the office and woke up in the ICU. The doctors say you need immediate rest.',\n    urgency: 'high',\n    options: [\n      {\n        id: 'rest',\n        text: 'Take the rest seriously',\n        effects: {\n          stress: -60,\n          bankBalance: -10000,\n          energy: 20,\n          emotion: 10\n        },\n        description: 'Rest and recover properly'\n      },\n      {\n        id: 'ignore',\n        text: 'Ignore and get back to work',\n        effects: {\n          stress: 10,\n          karma: -20,\n          energy: -10,\n          bankBalance: -5000\n        },\n        description: 'Push through the pain'\n      }\n    ],\n    tags: ['stress', 'health', 'emergency']\n  },\n\n  // Emotion <= 0 (Mental Breakdown)\n  mentalBreakdown: {\n    id: 9002,\n    section: 'Emotion',\n    title: 'Mental Breakdown',\n    description: 'You lost the will to continue. Everything feels pointless and overwhelming.',\n    urgency: 'high',\n    options: [\n      {\n        id: 'therapy',\n        text: 'Seek professional help',\n        effects: {\n          emotion: 30,\n          bankBalance: -15000,\n          stress: -20,\n          karma: 5\n        },\n        description: 'Invest in mental health'\n      },\n      {\n        id: 'isolate',\n        text: 'Isolate and handle alone',\n        effects: {\n          emotion: 10,\n          stress: 20,\n          reputation: -10,\n          karma: -5\n        },\n        description: 'Try to cope alone'\n      }\n    ],\n    tags: ['emotion', 'mental health', 'breakdown']\n  },\n\n  // Bankruptcy (Bank Balance < -100000)\n  bankruptcy: {\n    id: 9003,\n    section: 'Finance',\n    title: 'Bankruptcy Alert',\n    description: 'You are ₹1L in debt. Your financial situation is critical and recovery seems impossible.',\n    urgency: 'high',\n    options: [\n      {\n        id: 'emergency_loan',\n        text: 'Take emergency loan',\n        effects: {\n          bankBalance: 150000,\n          stress: 30,\n          karma: -10,\n          reputation: -20\n        },\n        description: 'Get emergency funding'\n      },\n      {\n        id: 'give_up',\n        text: 'Accept defeat',\n        effects: {\n          emotion: -50,\n          stress: -20,\n          karma: -30\n        },\n        description: 'End the struggle'\n      }\n    ],\n    tags: ['finance', 'bankruptcy', 'crisis']\n  },\n\n  // Reputation < 10 (Low Reputation)\n  lowReputation: {\n    id: 9004,\n    section: 'Business',\n    title: 'Reputation Crisis',\n    description: 'Your reputation is so low that investors and partners are avoiding you.',\n    urgency: 'high',\n    options: [\n      {\n        id: 'public_apology',\n        text: 'Make public apology',\n        effects: {\n          reputation: 15,\n          emotion: -10,\n          stress: 10,\n          karma: 10\n        },\n        description: 'Humble yourself publicly'\n      },\n      {\n        id: 'rebrand',\n        text: 'Rebrand and start fresh',\n        effects: {\n          reputation: 25,\n          bankBalance: -50000,\n          stress: 20,\n          energy: -15\n        },\n        description: 'Complete image overhaul'\n      }\n    ],\n    tags: ['reputation', 'business', 'crisis']\n  },\n\n  // Karma < 10 (Low Karma)\n  lowKarma: {\n    id: 9005,\n    section: 'Personal',\n    title: 'Moral Reckoning',\n    description: 'Your unethical decisions are catching up. People are questioning your integrity.',\n    urgency: 'medium',\n    options: [\n      {\n        id: 'charity',\n        text: 'Donate to charity',\n        effects: {\n          karma: 20,\n          bankBalance: -25000,\n          reputation: 10,\n          emotion: 5\n        },\n        description: 'Make amends through giving'\n      },\n      {\n        id: 'continue_path',\n        text: 'Continue current path',\n        effects: {\n          karma: -5,\n          reputation: -10,\n          stress: 15,\n          bankBalance: 10000\n        },\n        description: 'Stay the course'\n      }\n    ],\n    tags: ['karma', 'ethics', 'moral']\n  },\n\n  // Burnout (6+ turns without break)\n  burnout: {\n    id: 9006,\n    section: 'Personal',\n    title: 'Burnout Syndrome',\n    description: 'You haven\\'t taken a break in weeks. Your body and mind are exhausted.',\n    urgency: 'high',\n    options: [\n      {\n        id: 'vacation',\n        text: 'Take a vacation',\n        effects: {\n          stress: -40,\n          energy: 30,\n          emotion: 15,\n          bankBalance: -20000\n        },\n        description: 'Recharge completely'\n      },\n      {\n        id: 'power_through',\n        text: 'Power through it',\n        effects: {\n          stress: 25,\n          energy: -20,\n          emotion: -10,\n          bankBalance: 5000\n        },\n        description: 'Keep working hard'\n      }\n    ],\n    tags: ['burnout', 'rest', 'health']\n  },\n\n  // High Stress + Low Emotion (Blackout Mode)\n  blackout: {\n    id: 9007,\n    section: 'Personal',\n    title: 'Blackout Episode',\n    description: 'High stress and low emotion triggered a blackout. You woke up not remembering the last few hours.',\n    urgency: 'high',\n    options: [\n      {\n        id: 'medical_help',\n        text: 'Seek medical attention',\n        effects: {\n          stress: -30,\n          emotion: 20,\n          bankBalance: -15000,\n          energy: 10\n        },\n        description: 'Get professional help'\n      },\n      {\n        id: 'self_medicate',\n        text: 'Self-medicate and continue',\n        effects: {\n          stress: 10,\n          emotion: -5,\n          karma: -10,\n          energy: -15\n        },\n        description: 'Handle it yourself'\n      }\n    ],\n    tags: ['blackout', 'crisis', 'health']\n  }\n};\n\n// Function to check for special scenario triggers\nexport const checkSpecialScenarioTriggers = (\n  playerStats: any,\n  financialData: any,\n  gameState: any\n): GameScenario | null => {\n  // Check for stress hospitalization\n  if (playerStats.stress >= 100 && !gameState.isHospitalized) {\n    return specialScenarios.hospitalization;\n  }\n\n  // Check for mental breakdown\n  if (playerStats.emotion <= 0 && !gameState.isMentalBreakdown) {\n    return specialScenarios.mentalBreakdown;\n  }\n\n  // Check for bankruptcy\n  if (financialData.bankBalance < -100000) {\n    return specialScenarios.bankruptcy;\n  }\n\n  // Check for low reputation\n  if (playerStats.reputation < 10) {\n    return specialScenarios.lowReputation;\n  }\n\n  // Check for low karma\n  if (playerStats.karma < 10) {\n    return specialScenarios.lowKarma;\n  }\n\n  // Check for burnout\n  if (gameState.turnsWithoutBreak >= 6) {\n    return specialScenarios.burnout;\n  }\n\n  // Check for blackout mode\n  if (playerStats.stress >= 90 && playerStats.emotion <= 10 && !gameState.isBlackoutMode) {\n    return specialScenarios.blackout;\n  }\n\n  return null;\n};","size_bytes":7020},"client/src/lib/data/teamRoles.ts":{"content":"// Team+ Enhanced Role System with Emotional Business Simulation\nexport interface TeamRole {\n  id: string;\n  name: string;\n  department: string;\n  color: string;\n  emoji: string;\n  theme: string;\n  description: string;\n  emotionalTrait: string;\n  loopVulnerability: string;\n  skills: string[];\n  synergies: string[];\n  baseSalary: number;\n  unlockRequirement?: {\n    clarityXP?: number;\n    sectorsCompleted?: number;\n    defeatedBosses?: string[];\n  };\n}\n\nexport interface TeamMember {\n  id: string;\n  name: string;\n  role: string;\n  roleId: string;\n  department: string;\n  color: string;\n  emoji: string;\n  isActive: boolean;\n  salary: number;\n  experience: number;\n  loyalty: number;\n  performance: number;\n  stress: number;\n  hireDate: Date;\n  emotionalTrait: string;\n  clarityContribution: number;\n  loopRisk: number;\n  status: 'Active' | 'Overloaded' | 'In Loop' | 'Stable' | 'Warning' | 'Critical';\n}\n\n// Core team roles for Team+\nexport const teamRoles: TeamRole[] = [\n  // Executive Roles\n  {\n    id: 'ceo',\n    name: 'Chief Executive Officer',\n    department: 'Executive',\n    color: '#0059FF',\n    emoji: '👑',\n    theme: 'Vision vs Isolation',\n    description: 'Leads everything with maximum Clarity XP impact. When CEO enters loop, entire game slows down.',\n    emotionalTrait: 'Visionary but prone to isolation',\n    loopVulnerability: 'Burnout from carrying too much responsibility',\n    skills: ['Vision Setting', 'Strategic Planning', 'Team Inspiration', 'Investor Relations'],\n    synergies: ['cmo_managing', 'cso', 'cfo'],\n    baseSalary: 200000,\n    unlockRequirement: { clarityXP: 100 }\n  },\n  {\n    id: 'cmo_managing',\n    name: 'Chief Managing Officer',\n    department: 'Executive',\n    color: '#FF5722',\n    emoji: '🧩',\n    theme: 'Execution vs Burnout',\n    description: 'Handles operations, schedules, chaos control. Efficiency leads to faster unlocks.',\n    emotionalTrait: 'Organized perfectionist',\n    loopVulnerability: 'Over-control leading to team friction',\n    skills: ['Operations Management', 'Process Optimization', 'Team Coordination', 'Crisis Management'],\n    synergies: ['operator', 'administrator', 'cpo'],\n    baseSalary: 150000,\n    unlockRequirement: { clarityXP: 75 }\n  },\n  {\n    id: 'cfo',\n    name: 'Chief Financial Officer',\n    department: 'Executive',\n    color: '#388E3C',\n    emoji: '💰',\n    theme: 'Caution vs Greed',\n    description: 'Handles budget, investments, cost optimization, and risk hedging.',\n    emotionalTrait: 'Conservative financial strategist',\n    loopVulnerability: 'Fear-greed seesaw affecting decisions',\n    skills: ['Financial Planning', 'Investment Strategy', 'Risk Management', 'Investor Relations'],\n    synergies: ['finance', 'ceo', 'administrator'],\n    baseSalary: 155000,\n    unlockRequirement: { clarityXP: 85 }\n  },\n  {\n    id: 'cto',\n    name: 'Chief Technology Officer',\n    department: 'Executive',\n    color: '#607D8B',\n    emoji: '💻',\n    theme: 'Precision vs Detachment',\n    description: 'Builds AI, automation, product backend. High skill unlocks clarity tools.',\n    emotionalTrait: 'Technical perfectionist',\n    loopVulnerability: 'Emotional detachment from team needs',\n    skills: ['Technical Architecture', 'AI/ML Strategy', 'Product Engineering', 'Team Leadership'],\n    synergies: ['technology', 'administrator'],\n    baseSalary: 165000,\n    unlockRequirement: { clarityXP: 100 }\n  },\n\n  // Core Operational Roles\n  {\n    id: 'operator',\n    name: 'Operator',\n    department: 'Operations',\n    color: '#69788C',\n    emoji: '⚙️',\n    theme: 'Reliability vs Invisible Burnout',\n    description: 'Converts strategy into operations. Handles logistics, scheduling, daily task chains.',\n    emotionalTrait: 'Calm under pressure',\n    loopVulnerability: 'Invisible overload from taking on too much without reflection',\n    skills: ['Process Management', 'Quality Control', 'Team Coordination', 'Problem Solving'],\n    synergies: ['administrator', 'technology'],\n    baseSalary: 75000\n  },\n  {\n    id: 'administrator',\n    name: 'Administrator',\n    department: 'Operations',\n    color: '#A67C52',\n    emoji: '🗂️',\n    theme: 'Order vs Over-Organization',\n    description: 'Manages backend workflows, schedules, legal compliance, and documentation.',\n    emotionalTrait: 'Silent organizer',\n    loopVulnerability: 'Over-organization leading to paralysis by process',\n    skills: ['Documentation', 'Compliance', 'Process Design', 'Legal Operations'],\n    synergies: ['legal', 'finance', 'hr'],\n    baseSalary: 65000\n  },\n  {\n    id: 'finance',\n    name: 'Finance',\n    department: 'Operations',\n    color: '#2E8B57',\n    emoji: '💸',\n    theme: 'Discipline vs Fear-Greed',\n    description: 'Manages budgets, forecasts, investor reports, and tax strategy.',\n    emotionalTrait: 'Number monk',\n    loopVulnerability: 'Fear-greed seesaw preventing optimal decisions',\n    skills: ['Financial Analysis', 'Budget Management', 'Tax Strategy', 'Investment Tracking'],\n    synergies: ['cfo', 'administrator', 'sales'],\n    baseSalary: 80000\n  },\n  {\n    id: 'technology',\n    name: 'Technology',\n    department: 'Operations',\n    color: '#008080',\n    emoji: '💻',\n    theme: 'Innovation vs Technical Debt',\n    description: 'Builds product backend, manages technical infrastructure and automation.',\n    emotionalTrait: 'Code architect',\n    loopVulnerability: 'Technical perfectionism over user needs',\n    skills: ['Software Development', 'System Architecture', 'DevOps', 'Technical Strategy'],\n    synergies: ['cto', 'operator'],\n    baseSalary: 95000\n  },\n\n  // Public Interface Roles\n  {\n    id: 'marketing',\n    name: 'Marketing',\n    department: 'Public',\n    color: '#FF4081',\n    emoji: '📣',\n    theme: 'Emotion vs Narrative Control',\n    description: 'Drives brand identity, user trust, influencer impact, and campaign reach.',\n    emotionalTrait: 'Story sculptor',\n    loopVulnerability: 'Fame addiction losing touch with product reality',\n    skills: ['Brand Strategy', 'Content Creation', 'Social Media', 'Campaign Management'],\n    synergies: ['sales', 'communicator'],\n    baseSalary: 70000\n  },\n  {\n    id: 'sales',\n    name: 'Sales',\n    department: 'Public',\n    color: '#FBC02D',\n    emoji: '🤝',\n    theme: 'Confidence vs Rejection Trauma',\n    description: 'Drives revenue by closing deals, building partnerships, handling frontline objections.',\n    emotionalTrait: 'Closer with soul',\n    loopVulnerability: 'Rejection spiral leading to call avoidance',\n    skills: ['Deal Closing', 'Relationship Building', 'Negotiation', 'Customer Development'],\n    synergies: ['marketing', 'finance', 'customer_service'],\n    baseSalary: 85000\n  },\n  {\n    id: 'customer_service',\n    name: 'Customer Service',\n    department: 'Public',\n    color: '#03A9F4',\n    emoji: '🧑‍💼',\n    theme: 'Loyalty vs Emotional Absorption',\n    description: 'Maintains customer relationships, handles support, and gathers user feedback.',\n    emotionalTrait: 'Customer advocate',\n    loopVulnerability: 'Absorbing customer emotions without boundaries',\n    skills: ['Customer Support', 'Relationship Management', 'Problem Resolution', 'Feedback Analysis'],\n    synergies: ['sales', 'hr', 'marketing'],\n    baseSalary: 55000\n  },\n\n  // Culture & Support Roles\n  {\n    id: 'hr',\n    name: 'Human Resources',\n    department: 'Culture',\n    color: '#A78BFA',\n    emoji: '🫂',\n    theme: 'Harmony vs Hidden Conflict',\n    description: 'Manages hiring, morale, team alignment, and emotional loop balancing.',\n    emotionalTrait: 'Team harmony keeper',\n    loopVulnerability: 'Invisible role loop - feeling undervalued while managing others',\n    skills: ['Team Building', 'Conflict Resolution', 'Hiring Strategy', 'Culture Development'],\n    synergies: ['administrator', 'customer_service'],\n    baseSalary: 70000\n  },\n  {\n    id: 'creative',\n    name: 'Creative',\n    department: 'Innovation',\n    color: '#BA68C8',\n    emoji: '🎨',\n    theme: 'Innovation vs Perfectionism',\n    description: 'Handles product design, user experience, and creative problem solving.',\n    emotionalTrait: 'Artistic visionary',\n    loopVulnerability: 'Perfectionist paralysis preventing launches',\n    skills: ['Design Strategy', 'UX/UI Design', 'Creative Direction', 'Brand Design'],\n    synergies: ['marketing', 'technology'],\n    baseSalary: 75000\n  },\n  {\n    id: 'communicator',\n    name: 'Communicator',\n    department: 'Public',\n    color: '#2CD3C6',\n    emoji: '🗣️',\n    theme: 'Clarity vs Message Distortion',\n    description: 'Manages internal and external communications, PR, and team alignment.',\n    emotionalTrait: 'Message clarity expert',\n    loopVulnerability: 'Message distortion under pressure',\n    skills: ['Internal Communications', 'Public Relations', 'Content Strategy', 'Crisis Communication'],\n    synergies: ['marketing', 'hr'],\n    baseSalary: 65000\n  },\n  {\n    id: 'visionary',\n    name: 'Visionary',\n    department: 'Strategy',\n    color: '#FFD700',\n    emoji: '🔭',\n    theme: 'Big Picture vs Reality Disconnect',\n    description: 'Provides strategic vision, future planning, and innovative thinking.',\n    emotionalTrait: 'Big picture thinker',\n    loopVulnerability: 'Disconnect from operational reality',\n    skills: ['Strategic Vision', 'Future Planning', 'Innovation Strategy', 'Market Trends'],\n    synergies: ['ceo'],\n    baseSalary: 90000\n  },\n  {\n    id: 'empath',\n    name: 'Empath',\n    department: 'Culture',\n    color: '#FF808B',\n    emoji: '🤝',\n    theme: 'Team Connection vs Emotional Overwhelm',\n    description: 'Maintains team morale, emotional intelligence, and interpersonal harmony.',\n    emotionalTrait: 'Team emotional anchor',\n    loopVulnerability: 'Emotional overwhelm from absorbing team stress',\n    skills: ['Emotional Intelligence', 'Team Counseling', 'Conflict Mediation', 'Culture Building'],\n    synergies: ['hr', 'customer_service'],\n    baseSalary: 60000\n  }\n];\n\n// Helper functions\nexport const getRoleById = (id: string): TeamRole | undefined => {\n  return teamRoles.find(role => role.id === id);\n};\n\nexport const getRolesByDepartment = (department: string): TeamRole[] => {\n  return teamRoles.filter(role => role.department === department);\n};\n\nexport const getDepartments = (): string[] => {\n  return [...new Set(teamRoles.map(role => role.department))];\n};\n\nexport const getUnlockedRoles = (clarityXP: number, sectorsCompleted: number, defeatedBosses: string[]): TeamRole[] => {\n  return teamRoles.filter(role => {\n    if (!role.unlockRequirement) return true;\n    \n    const requirements = role.unlockRequirement;\n    \n    if (requirements.clarityXP && clarityXP < requirements.clarityXP) return false;\n    if (requirements.sectorsCompleted && sectorsCompleted < requirements.sectorsCompleted) return false;\n    if (requirements.defeatedBosses && !requirements.defeatedBosses.every(boss => defeatedBosses.includes(boss))) return false;\n    \n    return true;\n  });\n};\n\n// Name generation\nexport const indianNames = {\n  first: [\n    'Aarav', 'Riya', 'Kabir', 'Saanvi', 'Vivaan', 'Tanya', 'Ishaan', 'Meera', 'Aryan', 'Kiara',\n    'Aditya', 'Naina', 'Dev', 'Ananya', 'Rahul', 'Shruti', 'Kunal', 'Avni', 'Yash', 'Pooja',\n    'Rohan', 'Priya', 'Harsh', 'Sneha', 'Karan', 'Divya', 'Varun', 'Neha', 'Siddharth', 'Kavya'\n  ],\n  last: [\n    'Mehta', 'Shah', 'Roy', 'Singh', 'Kapoor', 'Reddy', 'Nair', 'Verma', 'Joshi', 'Gupta',\n    'Sharma', 'Patel', 'Kumar', 'Agarwal', 'Bansal', 'Malhotra', 'Chopra', 'Sinha', 'Iyer', 'Rao'\n  ]\n};\n\nexport const emotionalTraits = [\n  'Visionary dreamer',\n  'Calm under pressure',\n  'Insecure but genius',\n  'Perfectionist streak',\n  'Natural motivator',\n  'Data-driven thinker',\n  'Creative visionary',\n  'People-first mentality',\n  'Results-focused',\n  'Quietly brilliant',\n  'Empathic leader',\n  'Strategic mastermind'\n];\n\nexport const generateRandomTeamMember = (roleId: string): Omit<TeamMember, 'id'> => {\n  const role = getRoleById(roleId);\n  if (!role) throw new Error(`Role ${roleId} not found`);\n  \n  const firstName = indianNames.first[Math.floor(Math.random() * indianNames.first.length)];\n  const lastName = indianNames.last[Math.floor(Math.random() * indianNames.last.length)];\n  const trait = emotionalTraits[Math.floor(Math.random() * emotionalTraits.length)];\n  \n  const basePerformance = 60 + Math.random() * 35;\n  const baseLoyalty = 50 + Math.random() * 40;\n  const baseStress = Math.random() * 50;\n  \n  let status: TeamMember['status'] = 'Active';\n  if (baseStress > 70) status = 'Critical';\n  else if (baseStress > 50 || basePerformance < 70) status = 'Warning';\n  else if (basePerformance > 85 && baseStress < 20) status = 'Stable';\n  \n  return {\n    name: `${firstName} ${lastName}`,\n    role: role.name,\n    roleId: role.id,\n    department: role.department,\n    color: role.color,\n    emoji: role.emoji,\n    isActive: true,\n    salary: role.baseSalary + Math.floor(Math.random() * 20000),\n    experience: Math.floor(Math.random() * 100),\n    loyalty: Math.round(baseLoyalty),\n    performance: Math.round(basePerformance),\n    stress: Math.round(baseStress),\n    hireDate: new Date(),\n    emotionalTrait: trait,\n    clarityContribution: Math.round(basePerformance * 0.8),\n    loopRisk: Math.round(baseStress + (100 - baseLoyalty) * 0.5),\n    status\n  };\n};\n\n// Additional helper functions for Team+ system\nexport const generateRandomName = (): string => {\n  const firstName = indianNames.first[Math.floor(Math.random() * indianNames.first.length)];\n  const lastName = indianNames.last[Math.floor(Math.random() * indianNames.last.length)];\n  return `${firstName} ${lastName}`;\n};\n\nexport const calculatePromotionCost = (currentSalary: number, newSalary: number): number => {\n  const salaryIncrease = newSalary - currentSalary;\n  return Math.round(salaryIncrease * 2.5); // 2.5x the annual increase as promotion cost\n};\n\nexport const calculateBonusAmount = (salary: number, performance: number): number => {\n  const baseBonus = salary * 0.1; // 10% of salary as base\n  const performanceMultiplier = performance / 100; // Scale by performance\n  return Math.round(baseBonus * performanceMultiplier);\n};","size_bytes":14124},"client/src/lib/engines/FinancialEngine.tsx":{"content":"import { FinancialData } from \"../types/GameTypes\";\n\nexport function calculateNetWorth(financialData: FinancialData): number {\n  return financialData.totalAssets - financialData.totalLiabilities;\n}\n\nexport function checkFinancialIndependence(financialData: FinancialData): boolean {\n  return financialData.sideIncome >= financialData.monthlyExpenses;\n}\n\nexport function calculateCashflow(financialData: FinancialData): number {\n  return financialData.mainIncome + financialData.sideIncome - financialData.monthlyExpenses;\n}\n\nexport function generateStockPrice(basePrice: number, volatility: number): number {\n  const randomFactor = (Math.random() - 0.5) * 2; // -1 to 1\n  const change = basePrice * (volatility / 100) * randomFactor;\n  return Math.max(1, basePrice + change);\n}\n\nexport function calculatePortfolioValue(stocks: any[], holdings: any[]): number {\n  return holdings.reduce((total, holding) => {\n    const stock = stocks.find(s => s.code === holding.code);\n    if (stock) {\n      return total + (stock.price * holding.quantity);\n    }\n    return total;\n  }, 0);\n}\n\nexport function calculateBondValue(bond: any, investment: number, timeElapsed: number): number {\n  const yearlyReturn = investment * (bond.interestRate / 100);\n  return investment + (yearlyReturn * timeElapsed);\n}\n\nexport function calculateLoanEMI(principal: number, rate: number, tenure: number): number {\n  const monthlyRate = rate / (12 * 100);\n  const emi = principal * monthlyRate * Math.pow(1 + monthlyRate, tenure) / \n              (Math.pow(1 + monthlyRate, tenure) - 1);\n  return Math.round(emi);\n}\n\nexport function calculateTaxLiability(income: number, deductions: number = 0): number {\n  const taxableIncome = Math.max(0, income - deductions);\n  \n  // Simplified Indian tax slabs\n  let tax = 0;\n  if (taxableIncome > 250000) {\n    tax += Math.min(taxableIncome - 250000, 250000) * 0.05;\n  }\n  if (taxableIncome > 500000) {\n    tax += Math.min(taxableIncome - 500000, 500000) * 0.20;\n  }\n  if (taxableIncome > 1000000) {\n    tax += (taxableIncome - 1000000) * 0.30;\n  }\n  \n  return Math.round(tax);\n}\n\nexport function generateMarketSentiment(): number {\n  // Returns a value between -1 (very bearish) and 1 (very bullish)\n  return (Math.random() - 0.5) * 2;\n}\n\nexport function applyMarketSentiment(price: number, sentiment: number): number {\n  const sentimentFactor = 1 + (sentiment * 0.1); // Max 10% impact\n  return price * sentimentFactor;\n}\n","size_bytes":2432},"client/src/lib/engines/MarketEngine.tsx":{"content":"import { Stock, Bond, BankAccount } from '../types/financialTypes';\n\nexport interface MarketConditions {\n  sentiment: 'bullish' | 'bearish' | 'neutral';\n  volatility: 'low' | 'medium' | 'high';\n  interestRate: number;\n  inflationRate: number;\n  economicGrowth: number;\n  timestamp: Date;\n}\n\nexport class MarketEngine {\n  private static instance: MarketEngine;\n  private currentConditions: MarketConditions;\n  private priceHistory: Map<string, number[]> = new Map();\n  private updateInterval: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    this.currentConditions = {\n      sentiment: 'neutral',\n      volatility: 'medium',\n      interestRate: 6.5,\n      inflationRate: 4.2,\n      economicGrowth: 6.8,\n      timestamp: new Date(),\n    };\n  }\n\n  static getInstance(): MarketEngine {\n    if (!MarketEngine.instance) {\n      MarketEngine.instance = new MarketEngine();\n    }\n    return MarketEngine.instance;\n  }\n\n  // Start real-time market updates\n  startMarketUpdates(updateCallback: (stocks: Stock[], bonds: Bond[]) => void) {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n\n    // Update every 30 seconds in game\n    this.updateInterval = setInterval(() => {\n      this.updateMarketConditions();\n      // This would trigger stock/bond price updates\n    }, 30000);\n  }\n\n  stopMarketUpdates() {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n  }\n\n  // Update market conditions based on various factors\n  private updateMarketConditions() {\n    const sentimentChange = (Math.random() - 0.5) * 0.3;\n    const volatilityChange = (Math.random() - 0.5) * 0.2;\n    const interestRateChange = (Math.random() - 0.5) * 0.1;\n\n    // Update sentiment\n    const sentimentScore = this.getSentimentScore() + sentimentChange;\n    if (sentimentScore > 0.3) {\n      this.currentConditions.sentiment = 'bullish';\n    } else if (sentimentScore < -0.3) {\n      this.currentConditions.sentiment = 'bearish';\n    } else {\n      this.currentConditions.sentiment = 'neutral';\n    }\n\n    // Update volatility\n    const volatilityScore = this.getVolatilityScore() + volatilityChange;\n    if (volatilityScore > 0.4) {\n      this.currentConditions.volatility = 'high';\n    } else if (volatilityScore < 0.2) {\n      this.currentConditions.volatility = 'low';\n    } else {\n      this.currentConditions.volatility = 'medium';\n    }\n\n    // Update interest rate\n    this.currentConditions.interestRate = Math.max(3.0, Math.min(12.0, \n      this.currentConditions.interestRate + interestRateChange));\n\n    this.currentConditions.timestamp = new Date();\n  }\n\n  // Calculate new stock price based on market conditions\n  calculateStockPrice(stock: Stock): number {\n    const basePrice = stock.currentPrice;\n    const sentiment = this.getSentimentMultiplier();\n    const volatility = this.getVolatilityMultiplier();\n    const sectorInfluence = this.getSectorInfluence(stock.sector);\n    \n    // Random price movement between -10% to +10%\n    const randomChange = (Math.random() - 0.5) * 0.2;\n    \n    // Apply all factors\n    const priceChange = randomChange * sentiment * volatility * sectorInfluence;\n    const newPrice = basePrice * (1 + priceChange);\n    \n    // Store price history\n    this.updatePriceHistory(stock.code, newPrice);\n    \n    return Math.max(0.1, newPrice); // Ensure price doesn't go below 0.1\n  }\n\n  // Calculate bond yield based on market conditions\n  calculateBondYield(bond: Bond): number {\n    const baseYield = bond.currentYield;\n    const interestRateInfluence = this.currentConditions.interestRate / 100;\n    const creditRiskAdjustment = this.getCreditRiskAdjustment(bond.rating);\n    \n    // Government bonds are affected by interest rates\n    if (bond.type === 'government') {\n      return Math.max(0.01, baseYield + interestRateInfluence * 0.3);\n    }\n    \n    // Corporate bonds add credit risk\n    return Math.max(0.01, baseYield + interestRateInfluence * 0.5 + creditRiskAdjustment);\n  }\n\n  // Calculate bank account interest rates\n  calculateBankInterestRate(accountType: string): number {\n    const baseRate = this.currentConditions.interestRate / 100;\n    \n    switch (accountType) {\n      case 'savings':\n        return baseRate * 0.6; // 60% of base rate\n      case 'fixed_deposit':\n        return baseRate * 0.9; // 90% of base rate\n      case 'current':\n        return baseRate * 0.1; // 10% of base rate\n      default:\n        return baseRate * 0.5;\n    }\n  }\n\n  // Generate market events\n  generateMarketEvent(): {\n    type: 'bull_run' | 'bear_market' | 'sector_boom' | 'interest_rate_change' | 'inflation_news';\n    title: string;\n    description: string;\n    impact: {\n      stocks?: number;\n      bonds?: number;\n      sector?: string;\n      duration: number; // in game days\n    };\n  } | null {\n    // Only generate events 10% of the time\n    if (Math.random() > 0.1) return null;\n\n    const eventTypes = [\n      {\n        type: 'bull_run' as const,\n        title: 'Market Rally Begins',\n        description: 'Strong economic indicators drive market optimism',\n        impact: { stocks: 0.15, duration: 7 }\n      },\n      {\n        type: 'bear_market' as const,\n        title: 'Market Correction',\n        description: 'Concerns over economic slowdown affect investor confidence',\n        impact: { stocks: -0.12, duration: 5 }\n      },\n      {\n        type: 'sector_boom' as const,\n        title: 'Tech Sector Surge',\n        description: 'Technology stocks outperform on innovation news',\n        impact: { stocks: 0.08, sector: 'technology', duration: 3 }\n      },\n      {\n        type: 'interest_rate_change' as const,\n        title: 'RBI Rate Cut',\n        description: 'Reserve Bank reduces interest rates to stimulate growth',\n        impact: { bonds: -0.05, stocks: 0.03, duration: 14 }\n      },\n      {\n        type: 'inflation_news' as const,\n        title: 'Inflation Concerns Rise',\n        description: 'Rising commodity prices fuel inflation worries',\n        impact: { bonds: -0.03, stocks: -0.02, duration: 10 }\n      }\n    ];\n\n    return eventTypes[Math.floor(Math.random() * eventTypes.length)];\n  }\n\n  // Helper methods\n  private getSentimentScore(): number {\n    switch (this.currentConditions.sentiment) {\n      case 'bullish': return 0.5;\n      case 'bearish': return -0.5;\n      default: return 0;\n    }\n  }\n\n  private getVolatilityScore(): number {\n    switch (this.currentConditions.volatility) {\n      case 'high': return 0.8;\n      case 'low': return 0.2;\n      default: return 0.5;\n    }\n  }\n\n  private getSentimentMultiplier(): number {\n    switch (this.currentConditions.sentiment) {\n      case 'bullish': return 1.2;\n      case 'bearish': return 0.8;\n      default: return 1.0;\n    }\n  }\n\n  private getVolatilityMultiplier(): number {\n    switch (this.currentConditions.volatility) {\n      case 'high': return 1.5;\n      case 'low': return 0.5;\n      default: return 1.0;\n    }\n  }\n\n  private getSectorInfluence(sector: string): number {\n    // Some sectors perform better in certain conditions\n    const sectorMultipliers: Record<string, number> = {\n      technology: this.currentConditions.sentiment === 'bullish' ? 1.1 : 0.9,\n      healthcare: 1.0, // Generally stable\n      finance: this.currentConditions.interestRate > 7 ? 1.1 : 0.9,\n      consumer: this.currentConditions.economicGrowth > 6 ? 1.1 : 0.9,\n      energy: Math.random() > 0.5 ? 1.2 : 0.8, // Highly volatile\n      manufacturing: this.currentConditions.economicGrowth > 5 ? 1.1 : 0.9,\n    };\n\n    return sectorMultipliers[sector] || 1.0;\n  }\n\n  private getCreditRiskAdjustment(rating: string): number {\n    const riskAdjustments: Record<string, number> = {\n      'AAA': 0.001,\n      'AA': 0.002,\n      'A': 0.005,\n      'BBB': 0.010,\n      'BB': 0.020,\n      'B': 0.035,\n      'CCC': 0.050,\n    };\n\n    return riskAdjustments[rating] || 0.025;\n  }\n\n  private updatePriceHistory(code: string, price: number) {\n    if (!this.priceHistory.has(code)) {\n      this.priceHistory.set(code, []);\n    }\n    \n    const history = this.priceHistory.get(code)!;\n    history.push(price);\n    \n    // Keep only last 100 prices\n    if (history.length > 100) {\n      history.shift();\n    }\n  }\n\n  // Public getters\n  getMarketConditions(): MarketConditions {\n    return { ...this.currentConditions };\n  }\n\n  getPriceHistory(code: string): number[] {\n    return this.priceHistory.get(code) || [];\n  }\n\n  getMarketTrend(code: string): 'up' | 'down' | 'stable' {\n    const history = this.getPriceHistory(code);\n    if (history.length < 2) return 'stable';\n    \n    const recent = history.slice(-5);\n    const avg = recent.reduce((a, b) => a + b, 0) / recent.length;\n    const oldest = recent[0];\n    \n    if (avg > oldest * 1.02) return 'up';\n    if (avg < oldest * 0.98) return 'down';\n    return 'stable';\n  }\n}\n\nexport default MarketEngine;","size_bytes":8843},"client/src/lib/engines/ScenarioData.tsx":{"content":"export const scenarioTemplates = [\n  // Business Scenarios\n  {\n    category: 'business',\n    title: 'Venture Capital Proposal',\n    description: 'A prominent VC firm is interested in funding your startup',\n    context: 'TechVenture Capital wants to invest ₹5 crores for 25% equity in your company. They also want a board seat.',\n    options: [\n      {\n        text: 'Accept the deal immediately',\n        consequences: {\n          stats: { logic: -5, emotion: 10, stress: -10 },\n          financial: { bankBalance: 50000000, monthlyExpenses: 2000000 },\n        },\n      },\n      {\n        text: 'Negotiate for better terms',\n        consequences: {\n          stats: { logic: 10, emotion: -5, stress: 5 },\n          financial: { bankBalance: 40000000 },\n        },\n      },\n      {\n        text: 'Decline and seek alternatives',\n        consequences: {\n          stats: { logic: 5, karma: 5, stress: 10 },\n          financial: {},\n        },\n      },\n    ],\n    rarity: 'uncommon',\n    requiredStats: { logic: 60 },\n  },\n  {\n    category: 'business',\n    title: 'Key Employee Resignation',\n    description: 'Your CTO is threatening to quit over work-life balance',\n    context: 'Your best engineer says they are burnt out and considering leaving for a competitor offering better work-life balance.',\n    options: [\n      {\n        text: 'Offer a 40% salary increase',\n        consequences: {\n          stats: { emotion: 5, stress: 5 },\n          financial: { monthlyExpenses: 50000 },\n        },\n      },\n      {\n        text: 'Implement flexible working hours',\n        consequences: {\n          stats: { karma: 10, emotion: 5 },\n          financial: {},\n        },\n      },\n      {\n        text: 'Let them go and hire someone new',\n        consequences: {\n          stats: { logic: -10, karma: -15, stress: 15 },\n          financial: { monthlyExpenses: -20000 },\n        },\n      },\n    ],\n    rarity: 'common',\n  },\n  {\n    category: 'stocks',\n    title: 'Market Crash Alert',\n    description: 'The stock market is experiencing a major downturn',\n    context: 'News reports indicate a 15% market crash today. Your portfolio is down ₹2 lakhs.',\n    options: [\n      {\n        text: 'Sell everything to minimize losses',\n        consequences: {\n          stats: { emotion: -15, stress: 20 },\n          financial: { totalAssets: -200000 },\n        },\n      },\n      {\n        text: 'Hold your positions and wait',\n        consequences: {\n          stats: { logic: 10, stress: 10 },\n          financial: { totalAssets: -300000 },\n        },\n      },\n      {\n        text: 'Buy more stocks at lower prices',\n        consequences: {\n          stats: { logic: 15, emotion: -10 },\n          financial: { totalAssets: 100000, bankBalance: -500000 },\n        },\n      },\n    ],\n    rarity: 'rare',\n  },\n  {\n    category: 'stocks',\n    title: 'Hot Stock Tip',\n    description: 'A friend recommends a \"guaranteed\" stock pick',\n    context: 'Your college friend claims to have insider information about a startup going public next week.',\n    options: [\n      {\n        text: 'Invest heavily based on the tip',\n        consequences: {\n          stats: { emotion: 10, karma: -10, logic: -15 },\n          financial: { totalAssets: 200000, bankBalance: -300000 },\n        },\n      },\n      {\n        text: 'Invest a small amount to test',\n        consequences: {\n          stats: { logic: 5, emotion: 5 },\n          financial: { totalAssets: 50000, bankBalance: -50000 },\n        },\n      },\n      {\n        text: 'Ignore the tip and do your own research',\n        consequences: {\n          stats: { logic: 15, karma: 5 },\n          financial: {},\n        },\n      },\n    ],\n    rarity: 'common',\n  },\n  {\n    category: 'ethics',\n    title: 'Tax Evasion Opportunity',\n    description: 'Your accountant suggests a questionable tax strategy',\n    context: 'Your CA claims you can save ₹5 lakhs in taxes using a \"creative\" interpretation of the law.',\n    options: [\n      {\n        text: 'Go ahead with the plan',\n        consequences: {\n          stats: { karma: -20, stress: 15 },\n          financial: { bankBalance: 500000 },\n        },\n      },\n      {\n        text: 'Seek a second opinion',\n        consequences: {\n          stats: { logic: 10, karma: 5 },\n          financial: { bankBalance: 250000 },\n        },\n      },\n      {\n        text: 'Pay the full tax amount',\n        consequences: {\n          stats: { karma: 15, logic: 5 },\n          financial: {},\n        },\n      },\n    ],\n    rarity: 'uncommon',\n  },\n  {\n    category: 'real_estate',\n    title: 'Property Investment Opportunity',\n    description: 'A prime real estate opportunity has emerged',\n    context: 'A property developer is offering pre-launch prices for a commercial complex in a growing area.',\n    options: [\n      {\n        text: 'Invest ₹50 lakhs immediately',\n        consequences: {\n          stats: { emotion: 10, stress: 20 },\n          financial: { totalAssets: 2000000, bankBalance: -5000000 },\n        },\n      },\n      {\n        text: 'Negotiate payment terms',\n        consequences: {\n          stats: { logic: 10, emotion: 5 },\n          financial: { totalAssets: 1500000, bankBalance: -3000000 },\n        },\n      },\n      {\n        text: 'Skip this opportunity',\n        consequences: {\n          stats: { logic: 5, emotion: -5 },\n          financial: {},\n        },\n      },\n    ],\n    rarity: 'uncommon',\n  },\n  {\n    category: 'health',\n    title: 'Stress Management',\n    description: 'You are feeling overwhelmed with work pressure',\n    context: 'Long working hours and constant decision-making are taking a toll on your mental health.',\n    options: [\n      {\n        text: 'Take a week-long vacation',\n        consequences: {\n          stats: { stress: -25, emotion: 15, energy: 20 },\n          financial: { bankBalance: -100000 },\n        },\n      },\n      {\n        text: 'Hire a personal assistant',\n        consequences: {\n          stats: { stress: -10, energy: 10 },\n          financial: { monthlyExpenses: 35000 },\n        },\n      },\n      {\n        text: 'Push through and work harder',\n        consequences: {\n          stats: { stress: 15, emotion: -10, energy: -15 },\n          financial: { mainIncome: 20000 },\n        },\n      },\n    ],\n    rarity: 'common',\n  },\n  {\n    category: 'emotion',\n    title: 'Family Emergency',\n    description: 'A family member needs urgent financial help',\n    context: 'Your cousin needs ₹3 lakhs for emergency medical treatment and has nowhere else to turn.',\n    options: [\n      {\n        text: 'Give the money without hesitation',\n        consequences: {\n          stats: { karma: 20, emotion: 10, stress: 10 },\n          financial: { bankBalance: -300000 },\n        },\n      },\n      {\n        text: 'Lend the money with interest',\n        consequences: {\n          stats: { logic: 5, karma: -5, emotion: -5 },\n          financial: { bankBalance: -300000, sideIncome: 5000 },\n        },\n      },\n      {\n        text: 'Suggest they find other sources',\n        consequences: {\n          stats: { logic: -5, karma: -15, emotion: -20 },\n          financial: {},\n        },\n      },\n    ],\n    rarity: 'uncommon',\n  },\n  {\n    category: 'logic',\n    title: 'Market Analysis Decision',\n    description: 'Conflicting market reports are confusing your strategy',\n    context: 'Two reputable analysts have opposite views on the market direction for the next quarter.',\n    options: [\n      {\n        text: 'Follow the bullish analyst',\n        consequences: {\n          stats: { emotion: 10, logic: -5 },\n          financial: { totalAssets: 150000 },\n        },\n      },\n      {\n        text: 'Follow the bearish analyst',\n        consequences: {\n          stats: { logic: 5, emotion: -10 },\n          financial: { totalAssets: -50000 },\n        },\n      },\n      {\n        text: 'Do your own analysis',\n        consequences: {\n          stats: { logic: 15, energy: -10 },\n          financial: { totalAssets: 100000 },\n        },\n      },\n    ],\n    rarity: 'common',\n  },\n  {\n    category: 'risk',\n    title: 'Cryptocurrency Investment',\n    description: 'A new cryptocurrency promises massive returns',\n    context: 'A blockchain startup is offering early investor tokens at a 90% discount from expected listing price.',\n    options: [\n      {\n        text: 'Invest ₹10 lakhs for maximum returns',\n        consequences: {\n          stats: { emotion: 15, stress: 25, logic: -10 },\n          financial: { totalAssets: 500000, bankBalance: -1000000 },\n        },\n      },\n      {\n        text: 'Invest ₹2 lakhs as a small bet',\n        consequences: {\n          stats: { emotion: 5, stress: 10 },\n          financial: { totalAssets: 100000, bankBalance: -200000 },\n        },\n      },\n      {\n        text: 'Avoid the risky investment',\n        consequences: {\n          stats: { logic: 10, emotion: -5 },\n          financial: {},\n        },\n      },\n    ],\n    rarity: 'uncommon',\n  },\n  // Additional scenarios for variety\n  {\n    category: 'business',\n    title: 'Partnership Proposal',\n    description: 'A competitor wants to merge operations',\n    context: 'Your main competitor proposes a strategic partnership that could double your market reach.',\n    options: [\n      {\n        text: 'Accept the partnership',\n        consequences: {\n          stats: { logic: 10, reputation: 15 },\n          financial: { mainIncome: 40000, monthlyExpenses: 20000 },\n        },\n      },\n      {\n        text: 'Negotiate better terms',\n        consequences: {\n          stats: { logic: 15, stress: 5 },\n          financial: { mainIncome: 30000 },\n        },\n      },\n      {\n        text: 'Decline and compete independently',\n        consequences: {\n          stats: { emotion: 5, stress: 10 },\n          financial: { mainIncome: 10000 },\n        },\n      },\n    ],\n    rarity: 'uncommon',\n  },\n  {\n    category: 'stocks',\n    title: 'Dividend Declaration',\n    description: 'Your major holding announces a special dividend',\n    context: 'The company you hold 1000 shares of announces a ₹50 per share special dividend.',\n    options: [\n      {\n        text: 'Reinvest the dividend',\n        consequences: {\n          stats: { logic: 10, emotion: 5 },\n          financial: { totalAssets: 75000 },\n        },\n      },\n      {\n        text: 'Take cash and diversify',\n        consequences: {\n          stats: { logic: 5, emotion: 5 },\n          financial: { bankBalance: 50000 },\n        },\n      },\n      {\n        text: 'Use dividend for personal expenses',\n        consequences: {\n          stats: { emotion: 10, logic: -5 },\n          financial: { bankBalance: 50000, monthlyExpenses: -10000 },\n        },\n      },\n    ],\n    rarity: 'common',\n  },\n  {\n    category: 'ethics',\n    title: 'Bribery Demand',\n    description: 'An official demands a bribe for license approval',\n    context: 'A government official hints that ₹2 lakhs could expedite your business license approval.',\n    options: [\n      {\n        text: 'Pay the bribe for quick approval',\n        consequences: {\n          stats: { karma: -25, stress: 20 },\n          financial: { bankBalance: -200000, mainIncome: 50000 },\n        },\n      },\n      {\n        text: 'Report the official',\n        consequences: {\n          stats: { karma: 20, stress: 15 },\n          financial: { mainIncome: -20000 },\n        },\n      },\n      {\n        text: 'Wait for legal processing',\n        consequences: {\n          stats: { karma: 10, logic: 5, stress: 10 },\n          financial: { mainIncome: 10000 },\n        },\n      },\n    ],\n    rarity: 'rare',\n  },\n  {\n    category: 'health',\n    title: 'Work-Life Balance',\n    description: 'Your family complains about your work schedule',\n    context: 'Your spouse and children feel neglected due to your 80-hour work weeks.',\n    options: [\n      {\n        text: 'Reduce work hours significantly',\n        consequences: {\n          stats: { emotion: 20, stress: -15, energy: 10 },\n          financial: { mainIncome: -30000 },\n        },\n      },\n      {\n        text: 'Hire more staff to delegate',\n        consequences: {\n          stats: { emotion: 10, stress: -10 },\n          financial: { monthlyExpenses: 80000 },\n        },\n      },\n      {\n        text: 'Explain the necessity and continue',\n        consequences: {\n          stats: { emotion: -15, stress: 10 },\n          financial: { mainIncome: 20000 },\n        },\n      },\n    ],\n    rarity: 'common',\n  },\n  {\n    category: 'emotion',\n    title: 'Success Celebration',\n    description: 'Your startup reaches a major milestone',\n    context: 'Your company has achieved its first ₹1 crore revenue month. The team wants to celebrate.',\n    options: [\n      {\n        text: 'Throw a lavish celebration party',\n        consequences: {\n          stats: { emotion: 20, reputation: 15 },\n          financial: { bankBalance: -500000 },\n        },\n      },\n      {\n        text: 'Give team bonuses instead',\n        consequences: {\n          stats: { karma: 15, emotion: 10 },\n          financial: { bankBalance: -300000 },\n        },\n      },\n      {\n        text: 'Reinvest the profit for growth',\n        consequences: {\n          stats: { logic: 15, emotion: -5 },\n          financial: { totalAssets: 200000 },\n        },\n      },\n    ],\n    rarity: 'uncommon',\n  },\n];\n","size_bytes":13272},"client/src/lib/engines/TaskEngine.tsx":{"content":"import { GameScenario, PlayerStats } from \"../types/GameTypes\";\nimport { scenarioTemplates } from \"./ScenarioData\";\n\nexport function generateInitialScenarios(count: number): GameScenario[] {\n  const scenarios: GameScenario[] = [];\n  \n  for (let i = 0; i < count; i++) {\n    const template = scenarioTemplates[Math.floor(Math.random() * scenarioTemplates.length)];\n    const scenario: GameScenario = {\n      id: `scenario_${Date.now()}_${i}`,\n      category: template.category,\n      title: template.title,\n      description: template.description,\n      context: template.context,\n      options: template.options.map((option, index) => ({\n        id: `option_${index}`,\n        text: option.text,\n        consequences: option.consequences,\n      })),\n      rarity: template.rarity,\n      requiredStats: template.requiredStats,\n    };\n    scenarios.push(scenario);\n  }\n  \n  return scenarios;\n}\n\nexport function generateScenarioBasedOnStats(playerStats: PlayerStats): GameScenario {\n  // Filter scenarios based on player stats\n  const suitableScenarios = scenarioTemplates.filter(template => {\n    if (!template.requiredStats) return true;\n    \n    return Object.entries(template.requiredStats).every(([key, value]) => {\n      if (value === undefined) return true;\n      return (playerStats as any)[key] >= value;\n    });\n  });\n  \n  const template = suitableScenarios[Math.floor(Math.random() * suitableScenarios.length)];\n  \n  return {\n    id: `scenario_${Date.now()}`,\n    category: template.category,\n    title: template.title,\n    description: template.description,\n    context: template.context,\n    options: template.options.map((option, index) => ({\n      id: `option_${index}`,\n      text: option.text,\n      consequences: option.consequences,\n    })),\n    rarity: template.rarity,\n    requiredStats: template.requiredStats,\n  };\n}\n\nexport function getScenariosByCategory(category: string): GameScenario[] {\n  return scenarioTemplates\n    .filter(template => template.category === category)\n    .map(template => ({\n      id: `scenario_${Date.now()}_${Math.random()}`,\n      category: template.category,\n      title: template.title,\n      description: template.description,\n      context: template.context,\n      options: template.options.map((option, index) => ({\n        id: `option_${index}`,\n        text: option.text,\n        consequences: option.consequences,\n      })),\n      rarity: template.rarity,\n      requiredStats: template.requiredStats,\n    }));\n}\n","size_bytes":2468},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useFinancialData.tsx":{"content":"import { create } from \"zustand\";\nimport { Stock, Bond, BankAccount } from \"../types/GameTypes\";\nimport { generateStockPrice, generateMarketSentiment } from \"../engines/FinancialEngine\";\n\ninterface FinancialDataState {\n  stocks: Stock[];\n  bonds: Bond[];\n  bankAccounts: BankAccount[];\n  portfolioHoldings: { code: string; quantity: number; avgPrice: number }[];\n  bondInvestments: { bondId: string; amount: number; purchaseDate: Date }[];\n  marketSentiment: number;\n  \n  // Actions\n  updateStockPrices: () => void;\n  buyStock: (code: string, quantity: number) => void;\n  sellStock: (code: string, quantity: number) => void;\n  buyBond: (bondId: string, amount: number) => void;\n  createBankAccount: (account: BankAccount) => void;\n  updateMarketSentiment: () => void;\n  initializeFinancialData: () => void;\n}\n\nconst initialStocks: Stock[] = [\n  {\n    code: \"ZMTA\",\n    name: \"Zomota Ltd.\",\n    sector: \"Food Delivery\",\n    price: 122,\n    change: 0,\n    changePercent: 0,\n    volatility: \"high\",\n    volume: 1250000,\n    marketCap: 12500000000,\n    peRatio: 25.5,\n    dividend: 0,\n    beta: 1.8,\n    high52w: 145,\n    low52w: 98,\n    priceHistory: [],\n  },\n  {\n    code: \"ZRDX\",\n    name: \"ZerodhaX\",\n    sector: \"FinTech\",\n    price: 930,\n    change: 0,\n    changePercent: 0,\n    volatility: \"low\",\n    volume: 850000,\n    marketCap: 45000000000,\n    peRatio: 18.2,\n    dividend: 2.5,\n    beta: 0.8,\n    high52w: 1050,\n    low52w: 780,\n    priceHistory: [],\n  },\n  {\n    code: \"PYFX\",\n    name: \"PayFlex Corp.\",\n    sector: \"Payments\",\n    price: 620,\n    change: 0,\n    changePercent: 0,\n    volatility: \"high\",\n    volume: 2100000,\n    marketCap: 28000000000,\n    peRatio: 45.8,\n    dividend: 0,\n    beta: 2.1,\n    high52w: 750,\n    low52w: 420,\n    priceHistory: [],\n  },\n  {\n    code: \"FLPK\",\n    name: \"Flipkart Tech\",\n    sector: \"eCommerce\",\n    price: 1580,\n    change: 0,\n    changePercent: 0,\n    volatility: \"medium\",\n    volume: 680000,\n    marketCap: 85000000000,\n    peRatio: 32.1,\n    dividend: 1.2,\n    beta: 1.4,\n    high52w: 1750,\n    low52w: 1200,\n    priceHistory: [],\n  },\n  {\n    code: \"NYKA\",\n    name: \"Nyra Beauty\",\n    sector: \"Beauty Retail\",\n    price: 1450,\n    change: 0,\n    changePercent: 0,\n    volatility: \"medium\",\n    volume: 420000,\n    marketCap: 15000000000,\n    peRatio: 28.9,\n    dividend: 0.8,\n    beta: 1.2,\n    high52w: 1680,\n    low52w: 1100,\n    priceHistory: [],\n  },\n];\n\nconst initialBonds: Bond[] = [\n  {\n    id: \"RBI75\",\n    name: \"7.5% RBI G-Sec\",\n    type: \"government\",\n    interestRate: 7.5,\n    maturityYears: 5,\n    rating: \"AAA\",\n    minInvestment: 5000,\n    issuer: \"Reserve Bank of India\",\n    couponFrequency: \"yearly\",\n    earlyExitAllowed: true,\n    earlyExitPenalty: 2,\n  },\n  {\n    id: \"HDFC65\",\n    name: \"HDFC Corporate Bond\",\n    type: \"corporate\",\n    interestRate: 6.5,\n    maturityYears: 3,\n    rating: \"AA\",\n    minInvestment: 10000,\n    issuer: \"HDFC Bank\",\n    couponFrequency: \"quarterly\",\n    earlyExitAllowed: true,\n    earlyExitPenalty: 5,\n  },\n  {\n    id: \"NTPC76\",\n    name: \"NTPC Infrastructure Bond\",\n    type: \"tax_free\",\n    interestRate: 7.6,\n    maturityYears: 10,\n    rating: \"AAA\",\n    minInvestment: 15000,\n    issuer: \"NTPC Limited\",\n    couponFrequency: \"yearly\",\n    earlyExitAllowed: false,\n    earlyExitPenalty: 0,\n  },\n];\n\nexport const useFinancialData = create<FinancialDataState>((set, get) => ({\n  stocks: initialStocks,\n  bonds: initialBonds,\n  bankAccounts: [],\n  portfolioHoldings: [],\n  bondInvestments: [],\n  marketSentiment: 0,\n\n  updateStockPrices: () => {\n    const state = get();\n    const newStocks = state.stocks.map(stock => {\n      const volatilityMap = { low: 2, medium: 5, high: 10, very_high: 20 };\n      const volatility = volatilityMap[stock.volatility];\n      const newPrice = generateStockPrice(stock.price, volatility);\n      const change = newPrice - stock.price;\n      const changePercent = (change / stock.price) * 100;\n      \n      return {\n        ...stock,\n        price: Math.round(newPrice * 100) / 100,\n        change: Math.round(change * 100) / 100,\n        changePercent: Math.round(changePercent * 100) / 100,\n        priceHistory: [\n          ...stock.priceHistory.slice(-29), // Keep last 30 points\n          { date: new Date(), price: newPrice, volume: stock.volume }\n        ],\n      };\n    });\n    \n    set({ stocks: newStocks });\n  },\n\n  buyStock: (code: string, quantity: number) => {\n    const state = get();\n    const stock = state.stocks.find(s => s.code === code);\n    if (!stock) return;\n\n    const existingHolding = state.portfolioHoldings.find(h => h.code === code);\n    if (existingHolding) {\n      const totalQuantity = existingHolding.quantity + quantity;\n      const totalValue = (existingHolding.avgPrice * existingHolding.quantity) + (stock.price * quantity);\n      const newAvgPrice = totalValue / totalQuantity;\n      \n      set({\n        portfolioHoldings: state.portfolioHoldings.map(h => \n          h.code === code \n            ? { ...h, quantity: totalQuantity, avgPrice: newAvgPrice }\n            : h\n        ),\n      });\n    } else {\n      set({\n        portfolioHoldings: [...state.portfolioHoldings, {\n          code,\n          quantity,\n          avgPrice: stock.price,\n        }],\n      });\n    }\n  },\n\n  sellStock: (code: string, quantity: number) => {\n    const state = get();\n    const holding = state.portfolioHoldings.find(h => h.code === code);\n    if (!holding || holding.quantity < quantity) return;\n\n    if (holding.quantity === quantity) {\n      set({\n        portfolioHoldings: state.portfolioHoldings.filter(h => h.code !== code),\n      });\n    } else {\n      set({\n        portfolioHoldings: state.portfolioHoldings.map(h => \n          h.code === code \n            ? { ...h, quantity: h.quantity - quantity }\n            : h\n        ),\n      });\n    }\n  },\n\n  buyBond: (bondId: string, amount: number) => {\n    const state = get();\n    set({\n      bondInvestments: [...state.bondInvestments, {\n        bondId,\n        amount,\n        purchaseDate: new Date(),\n      }],\n    });\n  },\n\n  createBankAccount: (account: BankAccount) => {\n    const state = get();\n    set({\n      bankAccounts: [...state.bankAccounts, account],\n    });\n  },\n\n  updateMarketSentiment: () => {\n    const newSentiment = generateMarketSentiment();\n    set({ marketSentiment: newSentiment });\n  },\n\n  initializeFinancialData: () => {\n    set({\n      stocks: initialStocks,\n      bonds: initialBonds,\n      bankAccounts: [\n        {\n          id: \"savings_1\",\n          type: \"savings\",\n          balance: 100000,\n          interestRate: 3.5,\n        },\n      ],\n      portfolioHoldings: [],\n      bondInvestments: [],\n      marketSentiment: 0,\n    });\n  },\n}));\n","size_bytes":6710},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/useTeamManagement.tsx":{"content":"import { create } from \"zustand\";\nimport { TeamMember } from \"../types/GameTypes\";\n\nexport interface JobApplicant {\n  id: string;\n  name: string;\n  role: string;\n  avatar: string;\n  expectedSalary: number;\n  experience: number;\n  skills: string[];\n  strengths: string[];\n  weaknesses: string[];\n  interviewQuestions: {\n    question: string;\n    options: string[];\n    correctAnswer: number;\n  }[];\n  autoHireThreshold: number; // HR can auto-hire if applicant score >= this\n}\n\ninterface TeamManagementState {\n  teamMembers: TeamMember[];\n  teamSynergy: number;\n  burnoutRisk: number;\n  jobApplicants: JobApplicant[];\n  \n  // Actions\n  addTeamMember: (member: TeamMember) => void;\n  removeTeamMember: (memberId: string) => void;\n  updateTeamMember: (memberId: string, updates: Partial<TeamMember>) => void;\n  calculateTeamSynergy: () => void;\n  calculateBurnoutRisk: () => void;\n  initializeTeam: () => void;\n  \n  // Hiring system\n  generateJobApplicant: () => void;\n  hireCandidateDirectly: (applicantId: string) => boolean;\n  fireMember: (memberId: string) => void;\n  promoteTeamMember: (memberId: string) => void;\n  giveBonusToMember: (memberId: string, amount: number) => void;\n}\n\nconst initialTeamMembers: TeamMember[] = [\n  {\n    id: \"cto_1\",\n    name: \"Arjun Mehta\",\n    role: \"Chief Technology Officer\",\n    avatar: \"👨‍💻\",\n    stats: {\n      loyalty: 85,\n      impact: 92,\n      energy: 70,\n      mood: \"motivated\",\n    },\n    salary: 180000,\n    joinDate: new Date(\"2023-01-15\"),\n    skills: [\"React\", \"Node.js\", \"System Design\", \"Team Leadership\"],\n    achievements: [\"Led migration to microservices\", \"Reduced server costs by 40%\"],\n    personality: {\n      type: \"INTJ-A\",\n      motivationTriggers: [\"Technical challenges\", \"Equity participation\", \"Recognition\"],\n      weakSpots: [\"Micromanagement\", \"Unrealistic deadlines\"],\n    },\n  },\n  {\n    id: \"cmo_1\",\n    name: \"Priya Sharma\",\n    role: \"Chief Marketing Officer\",\n    avatar: \"👩‍💼\",\n    stats: {\n      loyalty: 78,\n      impact: 88,\n      energy: 85,\n      mood: \"motivated\",\n    },\n    salary: 150000,\n    joinDate: new Date(\"2023-03-10\"),\n    skills: [\"Digital Marketing\", \"Brand Strategy\", \"Analytics\", \"Content Creation\"],\n    achievements: [\"Increased user acquisition by 300%\", \"Built brand presence\"],\n    personality: {\n      type: \"ENFP-T\",\n      motivationTriggers: [\"Creative freedom\", \"Public recognition\", \"Team bonding\"],\n      weakSpots: [\"Routine tasks\", \"Micromanagement\"],\n    },\n  },\n  {\n    id: \"cfo_1\",\n    name: \"Rajesh Kumar\",\n    role: \"Chief Financial Officer\",\n    avatar: \"👨‍💼\",\n    stats: {\n      loyalty: 90,\n      impact: 85,\n      energy: 75,\n      mood: \"neutral\",\n    },\n    salary: 160000,\n    joinDate: new Date(\"2023-02-20\"),\n    skills: [\"Financial Planning\", \"Fundraising\", \"Risk Management\", \"Compliance\"],\n    achievements: [\"Secured Series A funding\", \"Improved cash flow by 150%\"],\n    personality: {\n      type: \"ISTJ-A\",\n      motivationTriggers: [\"Clear objectives\", \"Process improvement\", \"Stability\"],\n      weakSpots: [\"Rapid changes\", \"Ambiguous goals\"],\n    },\n  },\n  {\n    id: \"lead_dev_1\",\n    name: \"Sneha Patel\",\n    role: \"Lead Developer\",\n    avatar: \"👩‍💻\",\n    stats: {\n      loyalty: 82,\n      impact: 90,\n      energy: 65,\n      mood: \"neutral\",\n    },\n    salary: 120000,\n    joinDate: new Date(\"2023-04-05\"),\n    skills: [\"Python\", \"Machine Learning\", \"Database Design\", \"API Development\"],\n    achievements: [\"Built recommendation engine\", \"Optimized database performance\"],\n    personality: {\n      type: \"INTP-T\",\n      motivationTriggers: [\"Technical challenges\", \"Learning opportunities\", \"Autonomy\"],\n      weakSpots: [\"Too many meetings\", \"Unrealistic timelines\"],\n    },\n  },\n  {\n    id: \"hr_1\",\n    name: \"Amit Singh\",\n    role: \"Head of Human Resources\",\n    avatar: \"👨‍🎓\",\n    stats: {\n      loyalty: 88,\n      impact: 75,\n      energy: 80,\n      mood: \"motivated\",\n    },\n    salary: 100000,\n    joinDate: new Date(\"2023-05-12\"),\n    skills: [\"Talent Acquisition\", \"Employee Relations\", \"Performance Management\", \"Culture Building\"],\n    achievements: [\"Reduced employee turnover by 60%\", \"Implemented performance system\"],\n    personality: {\n      type: \"ESFJ-A\",\n      motivationTriggers: [\"Team harmony\", \"Employee development\", \"Recognition\"],\n      weakSpots: [\"Conflict situations\", \"Layoffs\"],\n    },\n  },\n];\n\n// Job roles data\nconst jobRoles = [\n  { role: \"Junior Accountant\", baseSalary: 35000, productivity: 15 },\n  { role: \"Sales Intern\", baseSalary: 25000, productivity: 20 },\n  { role: \"Assistant HR\", baseSalary: 40000, productivity: 10 },\n  { role: \"Senior HR\", baseSalary: 80000, productivity: 25 },\n  { role: \"Marketing Analyst\", baseSalary: 60000, productivity: 35 },\n  { role: \"Product Head\", baseSalary: 140000, productivity: 80 },\n  { role: \"Lead Developer\", baseSalary: 120000, productivity: 90 },\n  { role: \"Senior Developer\", baseSalary: 100000, productivity: 70 },\n];\n\n// Sample names for applicants\nconst candidateNames = [\n  \"Rahul Gupta\", \"Anita Desai\", \"Vikram Singh\", \"Meera Kapoor\", \"Arun Nair\",\n  \"Deepika Sharma\", \"Rohan Joshi\", \"Kavya Reddy\", \"Nitin Agarwal\", \"Pooja Malhotra\",\n  \"Sanjay Yadav\", \"Ritu Choudhary\", \"Karan Malhotra\", \"Nisha Bansal\", \"Ajay Verma\"\n];\n\n// Helper functions for generating candidate data\nconst generateSkillsForRole = (role: string): string[] => {\n  const skillsMap: Record<string, string[]> = {\n    \"Junior Accountant\": [\"Excel\", \"Accounting\", \"Bookkeeping\", \"GST\"],\n    \"Sales Intern\": [\"Communication\", \"CRM\", \"Lead Generation\", \"Customer Service\"],\n    \"Assistant HR\": [\"Recruitment\", \"Employee Relations\", \"HR Policies\", \"Payroll\"],\n    \"Senior HR\": [\"Talent Management\", \"Leadership\", \"Strategic Planning\", \"Culture Building\"],\n    \"Marketing Analyst\": [\"Analytics\", \"Digital Marketing\", \"SEO\", \"Campaign Management\"],\n    \"Product Head\": [\"Product Strategy\", \"Market Research\", \"User Experience\", \"Leadership\"],\n    \"Lead Developer\": [\"React\", \"Node.js\", \"System Architecture\", \"Team Leadership\"],\n    \"Senior Developer\": [\"JavaScript\", \"Python\", \"Database Design\", \"API Development\"],\n  };\n  return skillsMap[role] || [\"General Skills\", \"Problem Solving\", \"Communication\"];\n};\n\nconst generateStrengthsForRole = (role: string): string[] => {\n  const strengthsMap: Record<string, string[]> = {\n    \"Junior Accountant\": [\"Attention to detail\", \"Analytical thinking\", \"Process oriented\"],\n    \"Sales Intern\": [\"Enthusiasm\", \"Quick learner\", \"People skills\"],\n    \"Assistant HR\": [\"Organizational skills\", \"Empathy\", \"Multi-tasking\"],\n    \"Senior HR\": [\"Strategic thinking\", \"Leadership\", \"Conflict resolution\"],\n    \"Marketing Analyst\": [\"Data-driven\", \"Creative thinking\", \"Result-oriented\"],\n    \"Product Head\": [\"Vision\", \"Decision making\", \"User focus\"],\n    \"Lead Developer\": [\"Technical expertise\", \"Mentoring\", \"Problem solving\"],\n    \"Senior Developer\": [\"Code quality\", \"Innovation\", \"Collaboration\"],\n  };\n  return strengthsMap[role] || [\"Dedicated\", \"Reliable\", \"Team player\"];\n};\n\nconst generateWeaknessesForRole = (role: string): string[] => {\n  const weaknessesMap: Record<string, string[]> = {\n    \"Junior Accountant\": [\"New to industry\", \"Needs guidance\", \"Limited experience\"],\n    \"Sales Intern\": [\"Inexperienced\", \"Needs training\", \"Impatient\"],\n    \"Assistant HR\": [\"Limited experience\", \"Needs supervision\", \"Overwhelmed by workload\"],\n    \"Senior HR\": [\"Resistant to change\", \"Perfectionist\", \"Delegation issues\"],\n    \"Marketing Analyst\": [\"Overthinking\", \"Perfectionist\", \"Impatient with results\"],\n    \"Product Head\": [\"Micromanagement\", \"Perfectionist\", \"Impatient\"],\n    \"Lead Developer\": [\"Perfectionist\", \"Workaholic\", \"Impatient with junior devs\"],\n    \"Senior Developer\": [\"Perfectionist\", \"Prefers working alone\", \"Resistant to feedback\"],\n  };\n  return weaknessesMap[role] || [\"Perfectionist\", \"Workaholic\", \"Impatient\"];\n};\n\nconst generateInterviewQuestions = (role: string) => {\n  const questionsMap: Record<string, Array<{question: string, options: string[], correctAnswer: number}>> = {\n    \"Junior Accountant\": [\n      {\n        question: \"What is the primary purpose of a trial balance?\",\n        options: [\"To calculate profit\", \"To ensure debits equal credits\", \"To prepare tax returns\", \"To track expenses\"],\n        correctAnswer: 1\n      },\n      {\n        question: \"Which software is commonly used for accounting?\",\n        options: [\"Photoshop\", \"Tally\", \"AutoCAD\", \"Figma\"],\n        correctAnswer: 1\n      },\n      {\n        question: \"What does GST stand for?\",\n        options: [\"General Sales Tax\", \"Goods and Services Tax\", \"Government Standard Tax\", \"Global Service Tax\"],\n        correctAnswer: 1\n      }\n    ],\n    \"Sales Intern\": [\n      {\n        question: \"What is the first step in the sales process?\",\n        options: [\"Closing the deal\", \"Prospecting\", \"Follow-up\", \"Presentation\"],\n        correctAnswer: 1\n      },\n      {\n        question: \"What does CRM stand for?\",\n        options: [\"Customer Relationship Management\", \"Customer Revenue Management\", \"Client Record Management\", \"Customer Retention Model\"],\n        correctAnswer: 0\n      },\n      {\n        question: \"How do you handle rejection in sales?\",\n        options: [\"Give up immediately\", \"Learn from it and move on\", \"Argue with the customer\", \"Wait for them to call back\"],\n        correctAnswer: 1\n      }\n    ],\n    \"Marketing Analyst\": [\n      {\n        question: \"What is CTR in digital marketing?\",\n        options: [\"Cost to Revenue\", \"Click Through Rate\", \"Customer Tracking Rate\", \"Conversion Target Rate\"],\n        correctAnswer: 1\n      },\n      {\n        question: \"Which metric measures customer acquisition cost?\",\n        options: [\"ROI\", \"CAC\", \"LTV\", \"ARPU\"],\n        correctAnswer: 1\n      },\n      {\n        question: \"What is A/B testing used for?\",\n        options: [\"Bug testing\", \"Comparing two versions\", \"Security testing\", \"Performance testing\"],\n        correctAnswer: 1\n      }\n    ],\n    \"Lead Developer\": [\n      {\n        question: \"What is the main benefit of using React hooks?\",\n        options: [\"Better performance\", \"Functional components state management\", \"Easier debugging\", \"Smaller bundle size\"],\n        correctAnswer: 1\n      },\n      {\n        question: \"What does API stand for?\",\n        options: [\"Application Programming Interface\", \"Automated Program Integration\", \"Advanced Programming Interface\", \"Application Process Integration\"],\n        correctAnswer: 0\n      },\n      {\n        question: \"What is the purpose of version control?\",\n        options: [\"Bug tracking\", \"Code collaboration and history\", \"Performance monitoring\", \"Security testing\"],\n        correctAnswer: 1\n      }\n    ]\n  };\n  \n  return questionsMap[role] || [\n    {\n      question: \"What motivates you to work?\",\n      options: [\"Money only\", \"Learning and growth\", \"Just a job\", \"Free time\"],\n      correctAnswer: 1\n    },\n    {\n      question: \"How do you handle pressure?\",\n      options: [\"Panic\", \"Stay calm and prioritize\", \"Avoid it\", \"Blame others\"],\n      correctAnswer: 1\n    },\n    {\n      question: \"What is your strength?\",\n      options: [\"I don't have any\", \"Problem solving\", \"I'm perfect\", \"I work slowly\"],\n      correctAnswer: 1\n    }\n  ];\n};\n\nexport const useTeamManagement = create<TeamManagementState>((set, get) => ({\n  teamMembers: initialTeamMembers,\n  teamSynergy: 0,\n  burnoutRisk: 0,\n  jobApplicants: [],\n\n  addTeamMember: (member: TeamMember) => {\n    const state = get();\n    set({\n      teamMembers: [...state.teamMembers, member],\n    });\n    get().calculateTeamSynergy();\n    get().calculateBurnoutRisk();\n  },\n\n  removeTeamMember: (memberId: string) => {\n    const state = get();\n    set({\n      teamMembers: state.teamMembers.filter(member => member.id !== memberId),\n    });\n    get().calculateTeamSynergy();\n    get().calculateBurnoutRisk();\n  },\n\n  updateTeamMember: (memberId: string, updates: Partial<TeamMember>) => {\n    const state = get();\n    set({\n      teamMembers: state.teamMembers.map(member => \n        member.id === memberId \n          ? { ...member, ...updates }\n          : member\n      ),\n    });\n    get().calculateTeamSynergy();\n    get().calculateBurnoutRisk();\n  },\n\n  calculateTeamSynergy: () => {\n    const state = get();\n    if (state.teamMembers.length === 0) {\n      set({ teamSynergy: 0 });\n      return;\n    }\n\n    const averageLoyalty = state.teamMembers.reduce((sum, member) => sum + member.stats.loyalty, 0) / state.teamMembers.length;\n    const averageImpact = state.teamMembers.reduce((sum, member) => sum + member.stats.impact, 0) / state.teamMembers.length;\n    const averageEnergy = state.teamMembers.reduce((sum, member) => sum + member.stats.energy, 0) / state.teamMembers.length;\n    \n    // Calculate synergy bonus based on team composition\n    const roleCount = state.teamMembers.reduce((acc, member) => {\n      acc[member.role] = (acc[member.role] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const diversityBonus = Object.keys(roleCount).length * 5; // 5 points per unique role\n    const synergy = Math.min(100, (averageLoyalty + averageImpact + averageEnergy) / 3 + diversityBonus);\n    \n    set({ teamSynergy: Math.round(synergy) });\n  },\n\n  calculateBurnoutRisk: () => {\n    const state = get();\n    if (state.teamMembers.length === 0) {\n      set({ burnoutRisk: 0 });\n      return;\n    }\n\n    const overworkedMembers = state.teamMembers.filter(member => member.stats.energy < 50).length;\n    const burntOutMembers = state.teamMembers.filter(member => member.stats.mood === 'burnt_out').length;\n    const lowLoyaltyMembers = state.teamMembers.filter(member => member.stats.loyalty < 60).length;\n    \n    const riskFactors = (overworkedMembers * 2) + (burntOutMembers * 3) + lowLoyaltyMembers;\n    const burnoutRisk = Math.min(100, (riskFactors / state.teamMembers.length) * 20);\n    \n    set({ burnoutRisk: Math.round(burnoutRisk) });\n  },\n\n  initializeTeam: () => {\n    set({\n      teamMembers: initialTeamMembers,\n    });\n    get().calculateTeamSynergy();\n    get().calculateBurnoutRisk();\n  },\n\n  generateJobApplicant: () => {\n    const roleData = jobRoles[Math.floor(Math.random() * jobRoles.length)];\n    const name = candidateNames[Math.floor(Math.random() * candidateNames.length)];\n    const avatars = [\"👨‍💼\", \"👩‍💼\", \"👨‍💻\", \"👩‍💻\", \"👨‍🎓\", \"👩‍🎓\"];\n    \n    const applicant: JobApplicant = {\n      id: `applicant_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name,\n      role: roleData.role,\n      avatar: avatars[Math.floor(Math.random() * avatars.length)],\n      expectedSalary: roleData.baseSalary + Math.floor(Math.random() * 20000 - 10000),\n      experience: Math.floor(Math.random() * 8) + 1,\n      skills: generateSkillsForRole(roleData.role),\n      strengths: generateStrengthsForRole(roleData.role),\n      weaknesses: generateWeaknessesForRole(roleData.role),\n      interviewQuestions: generateInterviewQuestions(roleData.role),\n      autoHireThreshold: 70 + Math.floor(Math.random() * 20),\n    };\n    \n    set(state => ({\n      jobApplicants: [...state.jobApplicants, applicant],\n    }));\n  },\n\n  hireCandidateDirectly: (applicantId: string) => {\n    const state = get();\n    const applicant = state.jobApplicants.find(app => app.id === applicantId);\n    \n    if (applicant) {\n      const newMember: TeamMember = {\n        id: `member_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        name: applicant.name,\n        role: applicant.role,\n        avatar: applicant.avatar,\n        salary: applicant.expectedSalary,\n        joinDate: new Date(),\n        skills: applicant.skills,\n        achievements: [],\n        stats: {\n          loyalty: 60 + Math.floor(Math.random() * 20),\n          impact: 40 + Math.floor(Math.random() * 30),\n          energy: 70 + Math.floor(Math.random() * 20),\n          mood: 'neutral' as const,\n        },\n        personality: {\n          type: \"ENFP-T\",\n          motivationTriggers: [\"Growth opportunities\", \"Recognition\", \"Team collaboration\"],\n          weakSpots: [\"Micromanagement\", \"Unrealistic expectations\"],\n        },\n      };\n      \n      set(state => ({\n        teamMembers: [...state.teamMembers, newMember],\n        jobApplicants: state.jobApplicants.filter(app => app.id !== applicantId),\n      }));\n      \n      get().calculateTeamSynergy();\n      get().calculateBurnoutRisk();\n      return true;\n    }\n    return false;\n  },\n\n  fireMember: (memberId: string) => {\n    const state = get();\n    const member = state.teamMembers.find(m => m.id === memberId);\n    \n    if (member) {\n      set(state => ({\n        teamMembers: state.teamMembers.filter(m => m.id !== memberId),\n      }));\n      \n      get().calculateTeamSynergy();\n      get().calculateBurnoutRisk();\n      return true;\n    }\n    return false;\n  },\n\n  promoteTeamMember: (memberId: string) => {\n    const state = get();\n    const member = state.teamMembers.find(m => m.id === memberId);\n    \n    if (member) {\n      const promotedMember = {\n        ...member,\n        salary: member.salary * 1.25,\n        stats: {\n          ...member.stats,\n          loyalty: Math.min(100, member.stats.loyalty + 20),\n          impact: Math.min(100, member.stats.impact + 10),\n          energy: Math.min(100, member.stats.energy + 15),\n          mood: 'motivated' as const,\n        },\n      };\n      \n      set(state => ({\n        teamMembers: state.teamMembers.map(m => \n          m.id === memberId ? promotedMember : m\n        ),\n      }));\n      \n      get().calculateTeamSynergy();\n      return true;\n    }\n    return false;\n  },\n\n  giveBonusToMember: (memberId: string, amount: number) => {\n    const state = get();\n    const member = state.teamMembers.find(m => m.id === memberId);\n    \n    if (member) {\n      const updatedMember = {\n        ...member,\n        stats: {\n          ...member.stats,\n          loyalty: Math.min(100, member.stats.loyalty + 15),\n          energy: Math.min(100, member.stats.energy + 10),\n          mood: 'motivated' as const,\n        },\n      };\n      \n      set(state => ({\n        teamMembers: state.teamMembers.map(m => \n          m.id === memberId ? updatedMember : m\n        ),\n      }));\n      \n      get().calculateTeamSynergy();\n      return true;\n    }\n    return false;\n  },\n}));\n","size_bytes":18331},"client/src/lib/stores/useWealthSprintGame.tsx":{"content":"import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { TeamMember, TeamRole, teamRoles, generateRandomTeamMember, generateRandomName, calculatePromotionCost, calculateBonusAmount } from '../data/teamRoles';\n\nexport interface PlayerStats {\n  name?: string;\n  emotion: number;\n  stress: number;\n  karma: number;\n  logic: number;\n  reputation: number;\n  energy: number;\n  // Enhanced emotional business simulation stats\n  clarityXP: number;\n  loopScore: number; // Tracks accumulated emotional damage\n  founderTrait: 'visionary' | 'empathic' | 'capitalist' | 'manipulator' | 'reflective';\n  strategyCards: string[]; // Cards earned through progress\n  defeatedBosses: string[]; // Loop bosses defeated\n  recentActions: string[]; // Track recent actions for loop detection\n}\n\nexport interface Bond {\n  id: string;\n  type: 'Government' | 'Corporate' | 'Junk';\n  investedAmount: number;\n  interestRate: number;\n  turnsToMature: number;\n  status: 'active' | 'matured' | 'defaulted';\n  purchaseDate: Date;\n}\n\nexport interface Transaction {\n  id: string;\n  type: 'bond_purchase' | 'bond_maturity' | 'wallet_transfer' | 'salary_credit' | 'bonus_paid' | 'loan_deducted' | 'team_payment' | 'fd_maturity' | 'investment';\n  amount: number;\n  description: string;\n  timestamp: Date;\n  fromAccount: 'bank' | 'wallet';\n  toAccount: 'bank' | 'wallet';\n}\n\nexport interface FinancialData {\n  bankBalance: number;\n  inHandCash: number;\n  netWorth: number;\n  mainIncome: number;\n  sideIncome: number;\n  monthlyExpenses: number;\n  totalAssets: number;\n  totalLiabilities: number;\n  cashflow: number;\n  investments: {\n    stocks: number;\n    bonds: number;\n    fd: number;\n    mutualFunds: number;\n    realEstate: number;\n  };\n  savingsGoal: number;\n  currentSavings: number;\n  bondPortfolio: Bond[];\n  transactionHistory: Transaction[];\n  teamSalaries: number; // Total monthly team salaries\n}\n\nexport interface GameEvent {\n  id: string;\n  type: 'scenario' | 'financial' | 'achievement' | 'warning' | 'info';\n  title: string;\n  description: string;\n  timestamp?: Date;\n  impact?: {\n    duration: number;\n    effects: any;\n  };\n}\n\ninterface WealthSprintGameState {\n  // Game State\n  currentWeek: number;\n  currentDay: number;\n  gameStarted: boolean;\n  gameEnded: boolean;\n  endingType: 'rich' | 'balanced' | 'failure' | 'blackout' | null;\n  \n  // Time Engine State (Background Only)\n  timeEngine: {\n    currentGameDay: number;\n    currentGameMonth: number;\n    currentGameYear: number;\n    daysSinceLastScenario: number;\n    isGameEnded: boolean;\n  };\n  \n  // Game State Trackers\n  gameState: {\n    isHospitalized: boolean;\n    hospitalizationTurnsLeft: number;\n    isMentalBreakdown: boolean;\n    breakdownTurnsLeft: number;\n    isBlackoutMode: boolean;\n    blackoutTurnsLeft: number;\n    turnsWithoutBreak: number;\n    lastAutoSaveTurn: number;\n  };\n  \n  // Player Data\n  playerStats: PlayerStats;\n  financialData: FinancialData;\n  gameEvents: GameEvent[];\n  teamMembers: TeamMember[];\n  \n  // Actions\n  updatePlayerStats: (updates: Partial<PlayerStats>) => void;\n  updateFinancialData: (updates: Partial<FinancialData>) => void;\n  addGameEvent: (event: GameEvent) => void;\n  advanceTime: () => void;\n  advanceGameTime: () => void;\n  startGame: () => void;\n  resetGame: () => void;\n  endGame: (endingType: 'rich' | 'balanced' | 'failure' | 'blackout') => void;\n  \n  // Critical Game Logic\n  checkStressSystem: () => void;\n  checkEmotionSystem: () => void;\n  checkBankruptcy: () => boolean;\n  checkReputationAccess: () => boolean;\n  checkBlackoutMode: () => void;\n  processTurn: () => void;\n  \n  // Enhanced wallet functions\n  transferToWallet: (amount: number) => boolean;\n  transferFromWallet: (amount: number) => boolean;\n  spendFromWallet: (amount: number, description: string) => boolean;\n  maturityToBank: (amount: number, type: 'FD' | 'Bond', instrumentName: string) => void;\n  \n  // Investment functions\n  makeInvestment: (type: 'stocks' | 'bonds' | 'fd' | 'mutualFunds' | 'realEstate', amount: number) => boolean;\n  setSavingsGoal: (goal: number) => void;\n  addToSavings: (amount: number) => void;\n  \n  // Bond management functions\n  purchaseBond: (bondType: 'Government' | 'Corporate' | 'Junk', amount: number) => boolean;\n  processBondMaturity: () => void;\n  addTransaction: (transaction: Omit<Transaction, 'id' | 'timestamp'>) => void;\n  \n  // Team management functions\n  hireEmployee: (employeeId: string, name: string, role: string, salary: number, department: string) => boolean;\n  promoteEmployee: (employeeId: string, newRoleId: string) => boolean;\n  giveBonus: (employeeId: string, amount?: number) => boolean;\n  fireEmployee: (employeeId: string) => boolean;\n  updateEmployeePerformance: (employeeId: string, performance: number) => void;\n  processTeamSalaries: () => void;\n  \n  // Enhanced emotional business simulation functions\n  addRecentAction: (action: string) => void;\n  checkLoopBosses: () => void;\n  defeatLoopBoss: (bossId: string, strategyCardId?: string) => void;\n  earnStrategyCard: (cardId: string) => void;\n  useStrategyCard: (cardId: string) => boolean;\n  gainClarityXP: (amount: number, reason: string) => void;\n  increaseLoopScore: (amount: number, reason: string) => void;\n  setFounderTrait: (trait: 'visionary' | 'empathic' | 'capitalist' | 'manipulator' | 'reflective') => void;\n}\n\n// Initial state values\nconst initialPlayerStats: PlayerStats = {\n  emotion: 50,\n  stress: 30,\n  karma: 60,\n  logic: 45,\n  reputation: 40,\n  energy: 75,\n  // Enhanced emotional business simulation stats\n  clarityXP: 0,\n  loopScore: 0,\n  founderTrait: 'reflective', // Default trait, can be changed in onboarding\n  strategyCards: [],\n  defeatedBosses: [],\n  recentActions: [],\n};\n\nconst initialFinancialData: FinancialData = {\n  bankBalance: 500000, // ₹5 lakhs starting cash\n  inHandCash: 25000, // ₹25k in-hand cash\n  netWorth: 525000,\n  mainIncome: 75000, // ₹75k monthly salary\n  sideIncome: 15000, // ₹15k side income\n  monthlyExpenses: 45000, // ₹45k monthly expenses\n  totalAssets: 525000,\n  totalLiabilities: 0,\n  cashflow: 45000, // 75k + 15k - 45k = 45k\n  investments: {\n    stocks: 0,\n    bonds: 0,\n    fd: 0,\n    mutualFunds: 0,\n    realEstate: 0,\n  },\n  savingsGoal: 1000000, // ₹10 lakhs savings goal\n  currentSavings: 0,\n  bondPortfolio: [],\n  transactionHistory: [],\n  teamSalaries: 0,\n};\n\nexport const useWealthSprintGame = create<WealthSprintGameState>(\n  subscribeWithSelector((set, get) => ({\n    // Initial state\n    currentWeek: 1,\n    currentDay: 1,\n    gameStarted: false,\n    gameEnded: false,\n    endingType: null,\n    \n    // Time Engine Initial State (Background Only)\n    timeEngine: {\n      currentGameDay: 1,\n      currentGameMonth: 1,\n      currentGameYear: 1,\n      daysSinceLastScenario: 0,\n      isGameEnded: false,\n    },\n    \n    // Game State Trackers\n    gameState: {\n      isHospitalized: false,\n      hospitalizationTurnsLeft: 0,\n      isMentalBreakdown: false,\n      breakdownTurnsLeft: 0,\n      isBlackoutMode: false,\n      blackoutTurnsLeft: 0,\n      turnsWithoutBreak: 0,\n      lastAutoSaveTurn: 0,\n    },\n    \n    playerStats: { ...initialPlayerStats },\n    financialData: { ...initialFinancialData },\n    gameEvents: [],\n    teamMembers: [],\n\n    // Actions\n    updatePlayerStats: (updates: Partial<PlayerStats>) => {\n      set((state) => ({\n        playerStats: {\n          ...state.playerStats,\n          ...updates,\n        },\n      }));\n    },\n\n    updateFinancialData: (updates: Partial<FinancialData>) => {\n      set((state) => {\n        const newFinancialData = { ...state.financialData, ...updates };\n        \n        // Calculate net worth\n        newFinancialData.netWorth = newFinancialData.bankBalance + newFinancialData.inHandCash + newFinancialData.totalAssets - newFinancialData.totalLiabilities;\n        \n        // Calculate cashflow\n        newFinancialData.cashflow = newFinancialData.mainIncome + newFinancialData.sideIncome - newFinancialData.monthlyExpenses;\n        \n        return {\n          financialData: newFinancialData,\n        };\n      });\n    },\n    \n    // Enhanced wallet functions\n    transferToWallet: (amount: number) => {\n      const state = get();\n      if (state.financialData.bankBalance >= amount) {\n        set((state) => ({\n          financialData: {\n            ...state.financialData,\n            bankBalance: state.financialData.bankBalance - amount,\n            inHandCash: state.financialData.inHandCash + amount,\n          },\n        }));\n        return true;\n      }\n      return false;\n    },\n\n    transferFromWallet: (amount: number) => {\n      const state = get();\n      if (state.financialData.inHandCash >= amount) {\n        set((state) => ({\n          financialData: {\n            ...state.financialData,\n            inHandCash: state.financialData.inHandCash - amount,\n            bankBalance: state.financialData.bankBalance + amount,\n          },\n        }));\n        return true;\n      }\n      return false;\n    },\n    \n    spendFromWallet: (amount: number, description: string) => {\n      const state = get();\n      if (state.financialData.inHandCash >= amount) {\n        set((state) => ({\n          financialData: {\n            ...state.financialData,\n            inHandCash: state.financialData.inHandCash - amount,\n            monthlyExpenses: state.financialData.monthlyExpenses + amount,\n          },\n        }));\n        \n        // Add transaction event\n        get().addGameEvent({\n          id: `wallet_spend_${Date.now()}`,\n          type: 'financial',\n          title: 'Wallet Purchase',\n          description: `Spent ₹${amount.toLocaleString()} from wallet on ${description}`,\n          timestamp: new Date(),\n        });\n        \n        return true;\n      }\n      return false;\n    },\n    \n    maturityToBank: (amount: number, type: 'FD' | 'Bond', instrumentName: string) => {\n      set((state) => ({\n        financialData: {\n          ...state.financialData,\n          bankBalance: state.financialData.bankBalance + amount,\n        },\n      }));\n      \n      // Add maturity event\n      get().addGameEvent({\n        id: `maturity_${Date.now()}`,\n        type: 'financial',\n        title: `${type} Matured`,\n        description: `Your ${instrumentName} matured. ₹${amount.toLocaleString()} added to Bank Balance.`,\n        timestamp: new Date(),\n      });\n    },\n    \n    // Investment functions\n    makeInvestment: (type: 'stocks' | 'bonds' | 'fd' | 'mutualFunds' | 'realEstate', amount: number) => {\n      const state = get();\n      if (state.financialData.bankBalance >= amount) {\n        set((state) => ({\n          financialData: {\n            ...state.financialData,\n            bankBalance: state.financialData.bankBalance - amount,\n            investments: {\n              ...state.financialData.investments,\n              [type]: state.financialData.investments[type] + amount,\n            },\n            totalAssets: state.financialData.totalAssets + amount,\n          },\n        }));\n        \n        // Add investment event\n        get().addGameEvent({\n          id: `investment_${Date.now()}`,\n          type: 'financial',\n          title: 'Investment Made',\n          description: `Invested ₹${amount.toLocaleString()} in ${type}`,\n          timestamp: new Date(),\n        });\n        \n        return true;\n      }\n      return false;\n    },\n    \n    setSavingsGoal: (goal: number) => {\n      set((state) => ({\n        financialData: {\n          ...state.financialData,\n          savingsGoal: goal,\n        },\n      }));\n    },\n    \n    addToSavings: (amount: number) => {\n      const state = get();\n      if (state.financialData.bankBalance >= amount) {\n        set((state) => ({\n          financialData: {\n            ...state.financialData,\n            bankBalance: state.financialData.bankBalance - amount,\n            currentSavings: state.financialData.currentSavings + amount,\n          },\n        }));\n        \n        // Add savings event\n        get().addGameEvent({\n          id: `savings_${Date.now()}`,\n          type: 'financial',\n          title: 'Savings Added',\n          description: `Added ₹${amount.toLocaleString()} to savings. Total: ₹${(state.financialData.currentSavings + amount).toLocaleString()}`,\n          timestamp: new Date(),\n        });\n        \n        return true;\n      }\n      return false;\n    },\n\n    addGameEvent: (event: GameEvent) => {\n      set((state) => ({\n        gameEvents: [\n          {\n            ...event,\n            timestamp: event.timestamp || new Date(),\n          },\n          ...state.gameEvents.slice(0, 49), // Keep only 50 recent events\n        ],\n      }));\n    },\n\n    advanceTime: () => {\n      set((state) => {\n        let newWeek = state.currentWeek;\n        let newDay = state.currentDay + 1;\n        \n        if (newDay > 7) {\n          newDay = 1;\n          newWeek += 1;\n          \n          // Weekly income processing\n          const weeklyIncome = (state.financialData.mainIncome + state.financialData.sideIncome) / 4;\n          const weeklyExpenses = state.financialData.monthlyExpenses / 4;\n          \n          // Auto-debt processing (EMI/loan payments)\n          const weeklyDebtPayments = state.financialData.totalLiabilities * 0.02; // 2% of total debt weekly\n          const netWeeklyChange = weeklyIncome - weeklyExpenses - weeklyDebtPayments;\n          \n          // Update financial data\n          const newFinancialData = {\n            ...state.financialData,\n            bankBalance: state.financialData.bankBalance + netWeeklyChange,\n            totalAssets: state.financialData.totalAssets + Math.max(0, netWeeklyChange),\n            totalLiabilities: Math.max(0, state.financialData.totalLiabilities - weeklyDebtPayments * 0.3), // 30% goes to principal\n            netWorth: state.financialData.netWorth + netWeeklyChange,\n          };\n          \n          // Add debt payment event if there are liabilities\n          if (state.financialData.totalLiabilities > 0) {\n            get().addGameEvent({\n              id: `debt_payment_${newWeek}`,\n              type: 'financial',\n              title: 'Auto-Debt Payment',\n              description: `Weekly EMI of ₹${weeklyDebtPayments.toLocaleString()} processed. Remaining debt: ₹${newFinancialData.totalLiabilities.toLocaleString()}`,\n              timestamp: new Date(),\n            });\n          }\n          \n          return {\n            currentWeek: newWeek,\n            currentDay: newDay,\n            financialData: newFinancialData,\n          };\n        }\n        \n        return {\n          currentDay: newDay,\n        };\n      });\n      \n      // Also advance game time engine\n      get().advanceGameTime();\n    },\n\n    // Background Time Engine (24× Speed)\n    advanceGameTime: () => {\n      set((state) => {\n        const { timeEngine } = state;\n        \n        // Skip if game has already ended\n        if (timeEngine.isGameEnded) {\n          return state;\n        }\n        \n        let newGameDay = timeEngine.currentGameDay + 1;\n        let newGameMonth = timeEngine.currentGameMonth;\n        let newGameYear = timeEngine.currentGameYear;\n        let newDaysSinceLastScenario = timeEngine.daysSinceLastScenario + 1;\n        \n        // Advance month if day exceeds 30\n        if (newGameDay > 30) {\n          newGameDay = 1;\n          newGameMonth += 1;\n          \n          // Monthly salary processing\n          const monthlySalary = state.financialData.mainIncome + state.financialData.sideIncome;\n          const monthlyExpenses = state.financialData.monthlyExpenses;\n          \n          // Auto-debt processing (Monthly EMI/loan payments)\n          const monthlyDebtPayments = state.financialData.totalLiabilities * 0.08; // 8% of total debt monthly\n          const netMonthlyChange = monthlySalary - monthlyExpenses - monthlyDebtPayments;\n          \n          // Update financial data\n          const newFinancialData = {\n            ...state.financialData,\n            bankBalance: state.financialData.bankBalance + netMonthlyChange,\n            totalAssets: state.financialData.totalAssets + Math.max(0, netMonthlyChange),\n            totalLiabilities: Math.max(0, state.financialData.totalLiabilities - monthlyDebtPayments * 0.4), // 40% goes to principal\n            netWorth: state.financialData.netWorth + netMonthlyChange,\n          };\n          \n          // Process team salaries\n          get().processTeamSalaries();\n          \n          // Check FD maturity and auto-save\n          get().addGameEvent({\n            id: `monthly_salary_${newGameMonth}_${newGameYear}`,\n            type: 'financial',\n            title: 'Monthly Salary Processed',\n            description: `Salary of ₹${monthlySalary.toLocaleString()} credited. Net change: ₹${netMonthlyChange.toLocaleString()}`,\n            timestamp: new Date(),\n          });\n          \n          // Advance year if month exceeds 12\n          if (newGameMonth > 12) {\n            newGameMonth = 1;\n            newGameYear += 1;\n            \n            // Check if game should end after 5 years\n            if (newGameYear > 5) {\n              return {\n                ...state,\n                timeEngine: {\n                  ...timeEngine,\n                  currentGameDay: 30,\n                  currentGameMonth: 12,\n                  currentGameYear: 5,\n                  daysSinceLastScenario: newDaysSinceLastScenario,\n                  isGameEnded: true,\n                },\n                financialData: newFinancialData,\n              };\n            }\n          }\n          \n          return {\n            ...state,\n            timeEngine: {\n              ...timeEngine,\n              currentGameDay: newGameDay,\n              currentGameMonth: newGameMonth,\n              currentGameYear: newGameYear,\n              daysSinceLastScenario: newDaysSinceLastScenario,\n            },\n            financialData: newFinancialData,\n          };\n        }\n        \n        // Daily stress increase\n        const updatedPlayerStats = {\n          ...state.playerStats,\n          stress: Math.min(100, state.playerStats.stress + 1),\n        };\n        \n        // Trigger scenario every 3-4 days\n        if (newDaysSinceLastScenario >= 3 && Math.random() < 0.5) {\n          newDaysSinceLastScenario = 0;\n          // Scenario will be triggered by scenario engine\n        }\n        \n        // Auto-checks on 1st, 15th, 30th day of each month\n        if (newGameDay === 1 || newGameDay === 15 || newGameDay === 30) {\n          // Trigger auto-checks\n          get().addGameEvent({\n            id: `auto_check_${newGameDay}_${newGameMonth}_${newGameYear}`,\n            type: 'info',\n            title: 'Auto-Check Completed',\n            description: `Monthly financial review completed. Current net worth: ₹${state.financialData.netWorth.toLocaleString()}`,\n            timestamp: new Date(),\n          });\n        }\n        \n        // Console logging for developer (Settings panel access)\n        console.log(\"⏱️ Game Time Engine Active: 24× faster than real world time\");\n        console.log(\"🕰️ 1 real-world hour = 1 in-game day. 5 in-game years = ~75 real hours.\");\n        console.table({ \n          currentGameDay: newGameDay, \n          currentGameMonth: newGameMonth, \n          currentGameYear: newGameYear,\n          daysSinceLastScenario: newDaysSinceLastScenario\n        });\n        \n        return {\n          ...state,\n          timeEngine: {\n            ...timeEngine,\n            currentGameDay: newGameDay,\n            currentGameMonth: newGameMonth,\n            currentGameYear: newGameYear,\n            daysSinceLastScenario: newDaysSinceLastScenario,\n          },\n          playerStats: updatedPlayerStats,\n        };\n      });\n    },\n\n    // Critical Game Logic Systems\n    checkStressSystem: () => {\n      const state = get();\n      if (state.playerStats.stress >= 100 && !state.gameState.isHospitalized) {\n        // Trigger Hospitalization Event\n        set((state) => ({\n          gameState: {\n            ...state.gameState,\n            isHospitalized: true,\n            hospitalizationTurnsLeft: 3,\n          },\n          playerStats: {\n            ...state.playerStats,\n            stress: 40,\n            energy: 70,\n          },\n          financialData: {\n            ...state.financialData,\n            bankBalance: state.financialData.bankBalance - 10000,\n          },\n        }));\n        \n        get().addGameEvent({\n          id: `hospitalization_${Date.now()}`,\n          type: 'warning',\n          title: '🏥 Hospitalization Event',\n          description: 'You collapsed from overwork. ₹10,000 deducted for hospital fees. Game frozen for 3 turns.',\n          timestamp: new Date(),\n        });\n      }\n    },\n\n    checkEmotionSystem: () => {\n      const state = get();\n      if (state.playerStats.emotion <= 0 && !state.gameState.isMentalBreakdown) {\n        // Trigger Mental Breakdown\n        set((state) => ({\n          gameState: {\n            ...state.gameState,\n            isMentalBreakdown: true,\n            breakdownTurnsLeft: 2,\n          },\n          playerStats: {\n            ...state.playerStats,\n            emotion: 30,\n          },\n        }));\n        \n        get().addGameEvent({\n          id: `mental_breakdown_${Date.now()}`,\n          type: 'warning',\n          title: '💔 Mental Breakdown',\n          description: 'You lost the will to continue. Game frozen for 2 turns. A team member left due to neglect.',\n          timestamp: new Date(),\n        });\n      }\n    },\n\n    checkBankruptcy: () => {\n      const state = get();\n      if (state.financialData.bankBalance < -100000) {\n        get().endGame('failure');\n        return true;\n      }\n      return false;\n    },\n\n    checkReputationAccess: () => {\n      const state = get();\n      return state.playerStats.reputation >= 10;\n    },\n\n    checkBlackoutMode: () => {\n      const state = get();\n      if (state.playerStats.stress >= 90 && state.playerStats.emotion <= 10 && !state.gameState.isBlackoutMode) {\n        // Trigger Blackout Mode\n        set((state) => ({\n          gameState: {\n            ...state.gameState,\n            isBlackoutMode: true,\n            blackoutTurnsLeft: 1,\n          },\n          financialData: {\n            ...state.financialData,\n            bankBalance: state.financialData.bankBalance - 5000,\n          },\n        }));\n        \n        get().addGameEvent({\n          id: `blackout_${Date.now()}`,\n          type: 'warning',\n          title: '😵 Blackout Mode',\n          description: 'High stress + low emotion triggered blackout. ₹5,000 penalty, 1 turn skipped.',\n          timestamp: new Date(),\n        });\n      }\n    },\n\n    processTurn: () => {\n      const state = get();\n      \n      // Check all critical systems\n      get().checkStressSystem();\n      get().checkEmotionSystem();\n      get().checkBlackoutMode();\n      \n      // Process bond maturity\n      get().processBondMaturity();\n      \n      // Check bankruptcy (ends game if true)\n      if (get().checkBankruptcy()) {\n        return;\n      }\n      \n      // Update turn counters\n      set((state) => ({\n        gameState: {\n          ...state.gameState,\n          turnsWithoutBreak: state.gameState.turnsWithoutBreak + 1,\n          \n          // Decrease hospitalization turns\n          hospitalizationTurnsLeft: Math.max(0, state.gameState.hospitalizationTurnsLeft - 1),\n          isHospitalized: state.gameState.hospitalizationTurnsLeft > 1,\n          \n          // Decrease breakdown turns\n          breakdownTurnsLeft: Math.max(0, state.gameState.breakdownTurnsLeft - 1),\n          isMentalBreakdown: state.gameState.breakdownTurnsLeft > 1,\n          \n          // Decrease blackout turns\n          blackoutTurnsLeft: Math.max(0, state.gameState.blackoutTurnsLeft - 1),\n          isBlackoutMode: state.gameState.blackoutTurnsLeft > 1,\n        },\n      }));\n      \n      // Auto-save every 3 turns\n      if (state.gameState.turnsWithoutBreak % 3 === 0) {\n        // Auto-save logic (localStorage is handled by subscription)\n        get().addGameEvent({\n          id: `auto_save_${Date.now()}`,\n          type: 'info',\n          title: '💾 Auto-Save',\n          description: 'Game progress automatically saved.',\n          timestamp: new Date(),\n        });\n      }\n      \n      // Check for burnout (6 turns without break)\n      if (state.gameState.turnsWithoutBreak >= 6) {\n        get().addGameEvent({\n          id: `burnout_warning_${Date.now()}`,\n          type: 'warning',\n          title: '🔥 Burnout Warning',\n          description: 'You haven\\'t taken a break in 6 turns. Consider resting to avoid consequences.',\n          timestamp: new Date(),\n        });\n      }\n      \n      // Check for game ending conditions after 5 years\n      if (state.timeEngine.currentGameYear >= 5) {\n        const netWorth = state.financialData.netWorth;\n        const stress = state.playerStats.stress;\n        const emotion = state.playerStats.emotion;\n        \n        if (netWorth >= 10000000 && stress < 50) {\n          get().endGame('rich');\n        } else if (netWorth >= 5000000 && emotion > 60) {\n          get().endGame('balanced');\n        } else {\n          get().endGame('failure');\n        }\n      }\n    },\n\n    endGame: (endingType: 'rich' | 'balanced' | 'failure' | 'blackout') => {\n      set((state) => ({\n        gameEnded: true,\n        endingType,\n      }));\n      \n      const endingMessages = {\n        rich: '🎉 Rich Ending: You achieved ₹1Cr+ with low stress!',\n        balanced: '⚖️ Balanced Ending: You achieved ₹50L+ with good emotional health!',\n        failure: '💔 Failure Ending: You went bankrupt or couldn\\'t manage the pressure.',\n        blackout: '😵 Blackout Ending: You pushed too hard and lost everything.'\n      };\n      \n      get().addGameEvent({\n        id: `game_end_${Date.now()}`,\n        type: 'achievement',\n        title: 'Game Ended',\n        description: endingMessages[endingType],\n        timestamp: new Date(),\n      });\n    },\n\n    startGame: () => {\n      set((state) => ({\n        gameStarted: true,\n        gameEvents: [\n          {\n            id: 'game_start',\n            type: 'info',\n            title: '🚀 Welcome to Wealth Sprint!',\n            description: 'Your journey to financial independence begins now. Make smart decisions to grow your wealth and achieve your goals.',\n            timestamp: new Date(),\n          },\n          ...state.gameEvents,\n        ],\n      }));\n    },\n\n    resetGame: () => {\n      set(() => ({\n        currentWeek: 1,\n        currentDay: 1,\n        gameStarted: false,\n        gameEnded: false,\n        endingType: null,\n        timeEngine: {\n          currentGameDay: 1,\n          currentGameMonth: 1,\n          currentGameYear: 1,\n          daysSinceLastScenario: 0,\n          isGameEnded: false,\n        },\n        gameState: {\n          isHospitalized: false,\n          hospitalizationTurnsLeft: 0,\n          isMentalBreakdown: false,\n          breakdownTurnsLeft: 0,\n          isBlackoutMode: false,\n          blackoutTurnsLeft: 0,\n          turnsWithoutBreak: 0,\n          lastAutoSaveTurn: 0,\n        },\n        playerStats: { ...initialPlayerStats },\n        financialData: { ...initialFinancialData },\n        gameEvents: [],\n        teamMembers: [],\n      }));\n    },\n    \n    // Bond management functions\n    purchaseBond: (bondType: 'Government' | 'Corporate' | 'Junk', amount: number) => {\n      const state = get();\n      if (state.financialData.bankBalance >= amount) {\n        const bondConfig = {\n          Government: { interestRate: 4, maturityTurns: 12 },\n          Corporate: { interestRate: 8, maturityTurns: 8 },\n          Junk: { interestRate: 15, maturityTurns: 4 }\n        };\n        \n        const config = bondConfig[bondType];\n        const newBond: Bond = {\n          id: `bond_${Date.now()}`,\n          type: bondType,\n          investedAmount: amount,\n          interestRate: config.interestRate,\n          turnsToMature: config.maturityTurns,\n          status: 'active',\n          purchaseDate: new Date()\n        };\n        \n        set((state) => ({\n          financialData: {\n            ...state.financialData,\n            bankBalance: state.financialData.bankBalance - amount,\n            bondPortfolio: [...state.financialData.bondPortfolio, newBond],\n            investments: {\n              ...state.financialData.investments,\n              bonds: state.financialData.investments.bonds + amount\n            }\n          }\n        }));\n        \n        get().addTransaction({\n          type: 'bond_purchase',\n          amount: -amount,\n          description: `Purchased ${bondType} Bond - ${config.interestRate}% for ${config.maturityTurns} turns`,\n          fromAccount: 'bank',\n          toAccount: 'bank'\n        });\n        \n        return true;\n      }\n      return false;\n    },\n    \n    processBondMaturity: () => {\n      const state = get();\n      const updatedBonds = state.financialData.bondPortfolio.map(bond => {\n        if (bond.status === 'active') {\n          const newTurnsToMature = bond.turnsToMature - 1;\n          \n          if (newTurnsToMature <= 0) {\n            // Bond matured\n            if (bond.type === 'Junk' && Math.random() < 0.1) {\n              // 10% default chance for junk bonds\n              get().addTransaction({\n                type: 'bond_maturity',\n                amount: 0,\n                description: `${bond.type} Bond defaulted - Lost ₹${bond.investedAmount.toLocaleString()}`,\n                fromAccount: 'bank',\n                toAccount: 'bank'\n              });\n              \n              return { ...bond, status: 'defaulted' as const, turnsToMature: 0 };\n            } else {\n              // Successful maturity\n              const maturityAmount = bond.investedAmount * (1 + bond.interestRate / 100);\n              \n              set((state) => ({\n                financialData: {\n                  ...state.financialData,\n                  bankBalance: state.financialData.bankBalance + maturityAmount,\n                  investments: {\n                    ...state.financialData.investments,\n                    bonds: state.financialData.investments.bonds - bond.investedAmount\n                  }\n                }\n              }));\n              \n              get().addTransaction({\n                type: 'bond_maturity',\n                amount: maturityAmount,\n                description: `${bond.type} Bond matured - ₹${bond.investedAmount.toLocaleString()} → ₹${maturityAmount.toLocaleString()}`,\n                fromAccount: 'bank',\n                toAccount: 'bank'\n              });\n              \n              return { ...bond, status: 'matured' as const, turnsToMature: 0 };\n            }\n          } else {\n            return { ...bond, turnsToMature: newTurnsToMature };\n          }\n        }\n        return bond;\n      });\n      \n      set((state) => ({\n        financialData: {\n          ...state.financialData,\n          bondPortfolio: updatedBonds\n        }\n      }));\n    },\n    \n    addTransaction: (transaction: Omit<Transaction, 'id' | 'timestamp'>) => {\n      const newTransaction: Transaction = {\n        ...transaction,\n        id: `txn_${Date.now()}`,\n        timestamp: new Date()\n      };\n      \n      set((state) => ({\n        financialData: {\n          ...state.financialData,\n          transactionHistory: [newTransaction, ...state.financialData.transactionHistory].slice(0, 100) // Keep last 100 transactions\n        }\n      }));\n    },\n    \n    // Team management functions\n    hireEmployee: (employeeId: string, name: string, role: string, salary: number, department: string) => {\n      const state = get();\n      const monthlySalary = salary / 12;\n      \n      // Check if company can afford the employee (need 3 months runway)\n      if (state.financialData.bankBalance < monthlySalary * 3) {\n        return false;\n      }\n      \n      const newEmployee: TeamMember = {\n        id: employeeId,\n        name: name,\n        role: role,\n        roleId: employeeId,\n        department: department,\n        color: '#3b82f6', // Default blue color\n        emoji: '👤',\n        isActive: true,\n        salary: monthlySalary,\n        experience: Math.floor(Math.random() * 50) + 20,\n        loyalty: Math.floor(Math.random() * 20) + 70,\n        performance: Math.floor(Math.random() * 30) + 60,\n        stress: Math.floor(Math.random() * 30) + 10,\n        hireDate: new Date(),\n        emotionalTrait: 'Professional',\n        clarityContribution: Math.floor(Math.random() * 10) + 5,\n        loopRisk: Math.floor(Math.random() * 20) + 10,\n        status: 'Active' as const\n      };\n      \n      set((state) => ({\n        teamMembers: [...state.teamMembers, newEmployee],\n        financialData: {\n          ...state.financialData,\n          teamSalaries: state.financialData.teamSalaries + monthlySalary,\n          monthlyExpenses: state.financialData.monthlyExpenses + monthlySalary\n        }\n      }));\n      \n      get().addTransaction({\n        type: 'team_payment',\n        amount: -monthlySalary,\n        description: `Hired ${name} as ${role}`,\n        fromAccount: 'bank',\n        toAccount: 'bank'\n      });\n      \n      get().addGameEvent({\n        id: `hire_${Date.now()}`,\n        type: 'info',\n        title: 'New Team Member',\n        description: `Successfully hired ${name} as ${role}`,\n        timestamp: new Date()\n      });\n      \n      return true;\n    },\n    \n    promoteEmployee: (employeeId: string, newRoleId: string) => {\n      const employee = get().teamMembers.find(e => e.id === employeeId);\n      const newRole = teamRoles.find(r => r.id === newRoleId);\n      \n      if (!employee || !newRole) return false;\n      \n      const state = get();\n      const newSalary = newRole.baseSalary / 12;\n      const promotionCost = calculatePromotionCost(employee.salary, newSalary);\n      \n      if (state.financialData.bankBalance < promotionCost) {\n        return false;\n      }\n      \n      set((state) => ({\n        teamMembers: state.teamMembers.map(member => \n          member.id === employeeId \n            ? { \n                ...member, \n                roleId: newRoleId, \n                salary: newSalary,\n                currentLevel: newRole.level,\n                lastPromotion: new Date(),\n                loyalty: Math.min(100, member.loyalty + 15),\n                performance: Math.min(100, member.performance + 10)\n              }\n            : member\n        ),\n        financialData: {\n          ...state.financialData,\n          bankBalance: state.financialData.bankBalance - promotionCost,\n          teamSalaries: state.financialData.teamSalaries - employee.salary + newSalary,\n          monthlyExpenses: state.financialData.monthlyExpenses - employee.salary + newSalary\n        }\n      }));\n      \n      get().addTransaction({\n        type: 'team_payment',\n        amount: -promotionCost,\n        description: `Promoted ${employee.name} to ${newRole.title}`,\n        fromAccount: 'bank',\n        toAccount: 'bank'\n      });\n      \n      get().addGameEvent({\n        id: `promotion_${Date.now()}`,\n        type: 'achievement',\n        title: 'Team Promotion',\n        description: `${employee.name} promoted to ${newRole.title}`,\n        timestamp: new Date()\n      });\n      \n      return true;\n    },\n    \n    giveBonus: (employeeId: string, amount?: number) => {\n      const employee = get().teamMembers.find(e => e.id === employeeId);\n      if (!employee) return false;\n      \n      const state = get();\n      const bonusAmount = amount || calculateBonusAmount(employee.salary, employee.performance);\n      \n      if (state.financialData.bankBalance < bonusAmount) {\n        return false;\n      }\n      \n      set((state) => ({\n        teamMembers: state.teamMembers.map(member => \n          member.id === employeeId \n            ? { \n                ...member, \n                lastBonus: new Date(),\n                loyalty: Math.min(100, member.loyalty + 10),\n                performance: Math.min(100, member.performance + 5)\n              }\n            : member\n        ),\n        financialData: {\n          ...state.financialData,\n          bankBalance: state.financialData.bankBalance - bonusAmount\n        }\n      }));\n      \n      get().addTransaction({\n        type: 'bonus_paid',\n        amount: -bonusAmount,\n        description: `Bonus paid to ${employee.name}`,\n        fromAccount: 'bank',\n        toAccount: 'bank'\n      });\n      \n      get().addGameEvent({\n        id: `bonus_${Date.now()}`,\n        type: 'financial',\n        title: 'Bonus Paid',\n        description: `Paid ${employee.name} a bonus of ₹${bonusAmount.toLocaleString()}`,\n        timestamp: new Date()\n      });\n      \n      return true;\n    },\n    \n    fireEmployee: (employeeId: string) => {\n      const employee = get().teamMembers.find(e => e.id === employeeId);\n      if (!employee) return false;\n      \n      const severanceAmount = employee.salary * 2; // 2 months severance\n      \n      set((state) => ({\n        teamMembers: state.teamMembers.map(member => \n          member.id === employeeId \n            ? { ...member, isActive: false }\n            : member\n        ),\n        financialData: {\n          ...state.financialData,\n          bankBalance: state.financialData.bankBalance - severanceAmount,\n          teamSalaries: state.financialData.teamSalaries - employee.salary,\n          monthlyExpenses: state.financialData.monthlyExpenses - employee.salary\n        }\n      }));\n      \n      get().addTransaction({\n        type: 'team_payment',\n        amount: -severanceAmount,\n        description: `Severance pay for ${employee.name}`,\n        fromAccount: 'bank',\n        toAccount: 'bank'\n      });\n      \n      get().addGameEvent({\n        id: `fire_${Date.now()}`,\n        type: 'warning',\n        title: 'Employee Terminated',\n        description: `${employee.name} has been terminated with severance pay`,\n        timestamp: new Date()\n      });\n      \n      return true;\n    },\n    \n    updateEmployeePerformance: (employeeId: string, performance: number) => {\n      set((state) => ({\n        teamMembers: state.teamMembers.map(member => \n          member.id === employeeId \n            ? { ...member, performance: Math.max(0, Math.min(100, performance)) }\n            : member\n        )\n      }));\n    },\n    \n    processTeamSalaries: () => {\n      const state = get();\n      const totalSalaries = state.financialData.teamSalaries;\n      \n      if (totalSalaries === 0) return;\n      \n      if (state.financialData.bankBalance < totalSalaries) {\n        // Can't pay salaries - affects team morale\n        set((state) => ({\n          teamMembers: state.teamMembers.map(member => ({\n            ...member,\n            loyalty: Math.max(0, member.loyalty - 20),\n            performance: Math.max(0, member.performance - 15)\n          }))\n        }));\n        \n        get().addGameEvent({\n          id: `salary_crisis_${Date.now()}`,\n          type: 'warning',\n          title: 'Salary Crisis',\n          description: `Unable to pay team salaries. Team morale severely affected.`,\n          timestamp: new Date()\n        });\n        \n        return;\n      }\n      \n      // Pay salaries\n      set((state) => ({\n        financialData: {\n          ...state.financialData,\n          bankBalance: state.financialData.bankBalance - totalSalaries\n        }\n      }));\n      \n      get().addTransaction({\n        type: 'team_payment',\n        amount: -totalSalaries,\n        description: `Monthly salary payments to team`,\n        fromAccount: 'bank',\n        toAccount: 'bank'\n      });\n      \n      // Improve team stats slightly for regular payment\n      set((state) => ({\n        teamMembers: state.teamMembers.map(member => ({\n          ...member,\n          loyalty: Math.min(100, member.loyalty + 2),\n          experience: Math.min(100, member.experience + 1)\n        }))\n      }));\n    },\n    \n    // Enhanced emotional business simulation functions\n    addRecentAction: (action: string) => {\n      set((state) => ({\n        playerStats: {\n          ...state.playerStats,\n          recentActions: [...state.playerStats.recentActions.slice(-4), action] // Keep last 5 actions\n        }\n      }));\n    },\n\n    checkLoopBosses: () => {\n      const state = get();\n      const { checkLoopBossTriggers } = require('../data/industrySectors');\n      \n      const triggeredBoss = checkLoopBossTriggers(state.playerStats, state.playerStats.recentActions);\n      if (triggeredBoss && !state.playerStats.defeatedBosses.includes(triggeredBoss.id)) {\n        // Apply boss effects\n        get().updatePlayerStats(triggeredBoss.effects.playerStats);\n        \n        get().addGameEvent({\n          id: `loop_boss_${triggeredBoss.id}_${Date.now()}`,\n          type: 'warning',\n          title: `Loop Boss: ${triggeredBoss.name}`,\n          description: `${triggeredBoss.description} ${triggeredBoss.effects.businessImpact}`,\n          timestamp: new Date(),\n          impact: {\n            duration: 5,\n            effects: triggeredBoss.effects\n          }\n        });\n      }\n    },\n\n    defeatLoopBoss: (bossId: string, strategyCardId?: string) => {\n      set((state) => ({\n        playerStats: {\n          ...state.playerStats,\n          defeatedBosses: [...state.playerStats.defeatedBosses, bossId],\n          clarityXP: state.playerStats.clarityXP + 100, // Bonus for defeating boss\n          loopScore: Math.max(0, state.playerStats.loopScore - 30) // Reduce loop damage\n        }\n      }));\n      \n      if (strategyCardId) {\n        get().useStrategyCard(strategyCardId);\n      }\n      \n      get().addGameEvent({\n        id: `boss_defeated_${bossId}_${Date.now()}`,\n        type: 'achievement',\n        title: 'Loop Boss Defeated!',\n        description: `You've overcome your ${bossId.replace('_', ' ')} and gained valuable clarity.`,\n        timestamp: new Date()\n      });\n    },\n\n    earnStrategyCard: (cardId: string) => {\n      set((state) => ({\n        playerStats: {\n          ...state.playerStats,\n          strategyCards: [...state.playerStats.strategyCards, cardId]\n        }\n      }));\n      \n      get().addGameEvent({\n        id: `card_earned_${cardId}_${Date.now()}`,\n        type: 'achievement',\n        title: 'Strategy Card Earned!',\n        description: `You've unlocked a new strategy card: ${cardId.replace('_', ' ')}`,\n        timestamp: new Date()\n      });\n    },\n\n    useStrategyCard: (cardId: string) => {\n      const state = get();\n      if (!state.playerStats.strategyCards.includes(cardId)) {\n        return false;\n      }\n\n      const { strategyCards } = require('../data/industrySectors');\n      const card = strategyCards.find((c: any) => c.id === cardId);\n      \n      if (card) {\n        // Apply card effects\n        if (card.effects.playerStats) {\n          get().updatePlayerStats(card.effects.playerStats);\n        }\n        \n        // Remove card from inventory (single use)\n        set((state) => ({\n          playerStats: {\n            ...state.playerStats,\n            strategyCards: state.playerStats.strategyCards.filter(c => c !== cardId)\n          }\n        }));\n        \n        get().addGameEvent({\n          id: `card_used_${cardId}_${Date.now()}`,\n          type: 'info',\n          title: 'Strategy Card Used',\n          description: `Applied ${card.name}: ${card.description}`,\n          timestamp: new Date()\n        });\n        \n        return true;\n      }\n      \n      return false;\n    },\n\n    gainClarityXP: (amount: number, reason: string) => {\n      set((state) => ({\n        playerStats: {\n          ...state.playerStats,\n          clarityXP: state.playerStats.clarityXP + amount\n        }\n      }));\n      \n      get().addGameEvent({\n        id: `clarity_gained_${Date.now()}`,\n        type: 'info',\n        title: 'Clarity Gained',\n        description: `+${amount} Clarity XP from ${reason}`,\n        timestamp: new Date()\n      });\n    },\n\n    increaseLoopScore: (amount: number, reason: string) => {\n      set((state) => ({\n        playerStats: {\n          ...state.playerStats,\n          loopScore: state.playerStats.loopScore + amount\n        }\n      }));\n      \n      // Check for loop boss triggers after increasing loop score\n      get().checkLoopBosses();\n    },\n\n    setFounderTrait: (trait: 'visionary' | 'empathic' | 'capitalist' | 'manipulator' | 'reflective') => {\n      set((state) => ({\n        playerStats: {\n          ...state.playerStats,\n          founderTrait: trait\n        }\n      }));\n      \n      get().addGameEvent({\n        id: `trait_set_${trait}_${Date.now()}`,\n        type: 'info',\n        title: 'Founder Trait Set',\n        description: `You've chosen the ${trait} founder archetype.`,\n        timestamp: new Date()\n      });\n    },\n  }))\n);\n\n// Computed helper functions (non-hooks to avoid circular dependency)\nexport const calculateFinancialIndependence = (financialData: FinancialData) => {\n  const fiRatio = financialData.sideIncome / financialData.monthlyExpenses;\n  const isFinanciallyIndependent = fiRatio >= 1.0;\n  const progressPercent = Math.min(100, fiRatio * 100);\n  \n  return {\n    fiRatio,\n    isFinanciallyIndependent,\n    progressPercent,\n    monthsToFI: isFinanciallyIndependent ? 0 : Math.ceil((financialData.monthlyExpenses - financialData.sideIncome) / (financialData.mainIncome * 0.3)), // Assuming 30% savings rate\n  };\n};\n\nexport const calculatePlayerLevel = (playerStats: PlayerStats) => {\n  // Calculate overall player level based on stats\n  const totalStats = Object.values(playerStats).reduce((sum, stat) => {\n    return sum + (typeof stat === 'number' ? stat : 0);\n  }, 0);\n  const averageStats = totalStats / Object.keys(playerStats).length;\n  \n  const level = Math.floor(averageStats / 10) + 1;\n  const levelProgress = (averageStats % 10) * 10;\n  \n  return {\n    level: Math.min(10, level), // Max level 10\n    progress: levelProgress,\n    averageStats,\n  };\n};\n\n// Auto-save functionality\nif (typeof window !== 'undefined') {\n  useWealthSprintGame.subscribe(\n    (state) => state,\n    (state) => {\n      // Auto-save to localStorage every state change\n      localStorage.setItem('wealthSprintSave', JSON.stringify({\n        currentWeek: state.currentWeek,\n        currentDay: state.currentDay,\n        gameStarted: state.gameStarted,\n        gameEnded: state.gameEnded,\n        endingType: state.endingType,\n        timeEngine: state.timeEngine,\n        gameState: state.gameState,\n        playerStats: state.playerStats,\n        financialData: state.financialData,\n        gameEvents: state.gameEvents.slice(0, 20), // Save only recent events\n      }));\n    }\n  );\n  \n  // Load saved game on initialization\n  const savedGame = localStorage.getItem('wealthSprintSave');\n  if (savedGame) {\n    try {\n      const parsedSave = JSON.parse(savedGame);\n      useWealthSprintGame.setState(parsedSave);\n    } catch (error) {\n      console.warn('Failed to load saved game:', error);\n    }\n  }\n}","size_bytes":46889},"client/src/lib/types/GameTypes.tsx":{"content":"export interface PlayerStats {\n  logic: number;\n  emotion: number;\n  karma: number;\n  stress: number;\n  reputation: number;\n  energy: number;\n  name?: string;\n  // New emotional business simulation stats\n  clarityXP: number;\n  loopScore: number; // Negative stat tracking accumulated emotional damage\n  founderTrait: 'visionary' | 'empathic' | 'capitalist' | 'manipulator' | 'reflective';\n  strategyCards: string[]; // Cards earned through progress\n}\n\n// Industry sectors for business empire building\nexport interface IndustrySector {\n  id: string;\n  name: string;\n  icon: string;\n  description: string;\n  unlockRequirements: {\n    clarityXP: number;\n    sectorsCompleted: number;\n    maxLoopScore: number;\n  };\n  isUnlocked: boolean;\n  businesses: Business[];\n}\n\nexport interface Business {\n  id: string;\n  sectorId: string;\n  name: string;\n  type: string;\n  revenue: number;\n  operationalCost: number;\n  employeeCount: number;\n  marketShare: number;\n  qualityScore: number; // Affected by loop decisions\n  sustainabilityScore: number;\n  isActive: boolean;\n}\n\nexport interface FinancialData {\n  netWorth: number;\n  mainIncome: number;\n  sideIncome: number;\n  monthlyExpenses: number;\n  bankBalance: number;\n  totalAssets: number;\n  totalLiabilities: number;\n  cashflow: number;\n}\n\nexport interface TeamMember {\n  id: string;\n  name: string;\n  role: string;\n  avatar: string;\n  stats: {\n    loyalty: number;\n    impact: number;\n    energy: number;\n    mood: 'motivated' | 'neutral' | 'burnt_out';\n  };\n  salary: number;\n  joinDate: Date;\n  skills: string[];\n  achievements: string[];\n  personality: {\n    type: string;\n    motivationTriggers: string[];\n    weakSpots: string[];\n  };\n  // Enhanced emotional dynamics for modern team UI\n  emotionalTrait: string; // e.g., \"Calm under pressure\", \"Insecure but genius\"\n  loopVulnerability: 'burnout' | 'betrayal' | 'self_doubt' | 'none';\n  clarityContribution: number; // How much they add to team clarity\n  hiddenDynamics: {\n    trustWithFounder: number;\n    creativeFulfillment: number;\n    burnoutRisk: number;\n    isHidingStruggles: boolean;\n  };\n}\n\n// Loop Bosses for emotional damage system\nexport interface LoopBoss {\n  id: string;\n  name: string;\n  type: 'burnout' | 'betrayal' | 'self_doubt' | 'ego' | 'greed';\n  description: string;\n  triggerConditions: {\n    stress?: number;\n    emotion?: number;\n    karma?: number;\n    loopScore?: number;\n    specificActions?: string[];\n  };\n  effects: {\n    playerStats: Partial<PlayerStats>;\n    teamImpact: string;\n    businessImpact: string;\n  };\n  counterCards: string[]; // Strategy cards that can defeat this boss\n}\n\n// Strategy Cards for gameplay depth\nexport interface StrategyCard {\n  id: string;\n  name: string;\n  description: string;\n  type: 'reflection' | 'delegation' | 'forgiveness' | 'humility' | 'values';\n  effects: {\n    playerStats?: Partial<PlayerStats>;\n    teamBonus?: number;\n    businessBonus?: number;\n  };\n  unlockConditions: {\n    clarityXP?: number;\n    defeatedBosses?: string[];\n    founderTrait?: string;\n  };\n}\n\nexport interface Stock {\n  code: string;\n  name: string;\n  sector: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volatility: 'low' | 'medium' | 'high' | 'very_high';\n  volume: number;\n  marketCap: number;\n  peRatio: number;\n  dividend: number;\n  beta: number;\n  high52w: number;\n  low52w: number;\n  priceHistory: { date: Date; price: number; volume: number }[];\n}\n\nexport interface Bond {\n  id: string;\n  name: string;\n  type: 'government' | 'corporate' | 'tax_free' | 'green';\n  interestRate: number;\n  maturityYears: number;\n  rating: 'AAA' | 'AA' | 'A' | 'BBB' | 'BB' | 'B' | 'CCC' | 'CC' | 'C';\n  minInvestment: number;\n  issuer: string;\n  couponFrequency: 'monthly' | 'quarterly' | 'yearly';\n  earlyExitAllowed: boolean;\n  earlyExitPenalty: number;\n}\n\nexport interface BankAccount {\n  id: string;\n  type: 'savings' | 'fd' | 'recurring' | 'loan';\n  balance: number;\n  interestRate: number;\n  maturityDate?: Date;\n  autoDebit?: {\n    amount: number;\n    frequency: 'monthly' | 'quarterly' | 'yearly';\n    purpose: string;\n  };\n  penaltyRate?: number;\n}\n\nexport interface BusinessDeal {\n  id: string;\n  type: 'vc_funding' | 'acquisition' | 'partnership' | 'license' | 'exit';\n  title: string;\n  description: string;\n  value: number;\n  dealerName: string;\n  dealerAvatar: string;\n  timeLimit: number; // hours\n  options: {\n    id: string;\n    text: string;\n    consequences: {\n      cashflow: number;\n      equity: number;\n      reputation: number;\n      stress: number;\n      karma: number;\n    };\n  }[];\n  hiddenClauses?: string[];\n}\n\nexport interface GameScenario {\n  id: string;\n  category: 'business' | 'stocks' | 'real_estate' | 'emotion' | 'logic' | 'health' | 'risk' | 'ethics';\n  title: string;\n  description: string;\n  context: string;\n  options: {\n    id: string;\n    text: string;\n    consequences: {\n      stats: Partial<PlayerStats>;\n      financial: Partial<FinancialData>;\n      events?: string[];\n    };\n  }[];\n  rarity: 'common' | 'uncommon' | 'rare' | 'legendary';\n  requiredStats?: Partial<PlayerStats>;\n}\n\nexport interface GameEvent {\n  id: string;\n  type: 'news' | 'market' | 'team' | 'personal';\n  title: string;\n  description: string;\n  impact: {\n    duration: number; // days\n    effects: {\n      stats?: Partial<PlayerStats>;\n      financial?: Partial<FinancialData>;\n      stockMarket?: { volatility: number; sentiment: number };\n    };\n  };\n  timestamp: Date;\n}\n\nexport type GamePhase = 'menu' | 'playing' | 'financial_independence' | 'challenge_mode';\n\nexport interface GameState {\n  phase: GamePhase;\n  currentWeek: number;\n  currentDay: number;\n  playerStats: PlayerStats;\n  financialData: FinancialData;\n  activeScenarios: GameScenario[];\n  completedScenarios: string[];\n  teamMembers: TeamMember[];\n  stocks: Stock[];\n  bonds: Bond[];\n  bankAccounts: BankAccount[];\n  businessDeals: BusinessDeal[];\n  gameEvents: GameEvent[];\n  settings: {\n    theme: 'light' | 'dark';\n    soundEnabled: boolean;\n    musicEnabled: boolean;\n    gameSpeed: 'slow' | 'normal' | 'fast';\n  };\n}\n","size_bytes":6070},"client/src/lib/utils/formatMoney.ts":{"content":"export const formatMoney = (amount: number): string => {\n  if (amount >= 1_00_00_00_000) return `₹${(amount / 1_00_00_00_000).toFixed(1)}T`;\n  if (amount >= 1_00_00_000) return `₹${(amount / 1_00_00_000).toFixed(1)}B`;\n  if (amount >= 1_00_000) return `₹${(amount / 1_00_000).toFixed(1)}L`;\n  return `₹${amount.toLocaleString()}`;\n};\n\nexport const formatMoneyDetailed = (amount: number): string => {\n  return `₹${amount.toLocaleString()}`;\n};\n\nexport const formatMoneyShort = (amount: number): string => {\n  if (amount >= 1_00_00_00_000) return `₹${(amount / 1_00_00_00_000).toFixed(1)}T`;\n  if (amount >= 1_00_00_000) return `₹${(amount / 1_00_00_000).toFixed(1)}B`;\n  if (amount >= 1_00_000) return `₹${(amount / 1_00_000).toFixed(1)}L`;\n  if (amount >= 1_000) return `₹${(amount / 1_000).toFixed(1)}k`;\n  return `₹${amount}`;\n};","size_bytes":851},"client/src/lib/utils/localStorage.ts":{"content":"// localStorage utility functions for game save/load system\n\nexport const SAVE_KEY = 'wealth_sprint_save';\nexport const SETTINGS_KEY = 'wealth_sprint_settings';\n\nexport interface SaveData {\n  phase: string;\n  currentWeek: number;\n  currentDay: number;\n  playerStats: any;\n  financialData: any;\n  activeScenarios: any[];\n  completedScenarios: any[];\n  teamMembers: any[];\n  stocks: any[];\n  bonds: any[];\n  bankAccounts: any[];\n  businessDeals: any[];\n  gameEvents: any[];\n  savedAt: string;\n}\n\nexport interface SettingsData {\n  theme: 'light' | 'dark' | 'cyber';\n  soundEnabled: boolean;\n  musicEnabled: boolean;\n  gameSpeed: 'slow' | 'normal' | 'fast';\n}\n\n/**\n * Save data to localStorage with error handling\n */\nexport function saveToLocalStorage<T>(key: string, data: T): boolean {\n  try {\n    const jsonString = JSON.stringify(data);\n    localStorage.setItem(key, jsonString);\n    return true;\n  } catch (error) {\n    console.error('Failed to save to localStorage:', error);\n    return false;\n  }\n}\n\n/**\n * Load data from localStorage with error handling\n */\nexport function loadFromLocalStorage<T>(key: string): T | null {\n  try {\n    const jsonString = localStorage.getItem(key);\n    if (!jsonString) {\n      return null;\n    }\n    return JSON.parse(jsonString) as T;\n  } catch (error) {\n    console.error('Failed to load from localStorage:', error);\n    return null;\n  }\n}\n\n/**\n * Delete data from localStorage\n */\nexport function deleteFromLocalStorage(key: string): boolean {\n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error('Failed to delete from localStorage:', error);\n    return false;\n  }\n}\n\n/**\n * Check if localStorage is available\n */\nexport function isLocalStorageAvailable(): boolean {\n  try {\n    const testKey = '__localStorage_test__';\n    localStorage.setItem(testKey, 'test');\n    localStorage.removeItem(testKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Get the size of localStorage data in bytes\n */\nexport function getLocalStorageSize(): number {\n  let total = 0;\n  for (let key in localStorage) {\n    if (localStorage.hasOwnProperty(key)) {\n      total += localStorage[key].length + key.length;\n    }\n  }\n  return total;\n}\n\n/**\n * Export all game data as JSON\n */\nexport function exportGameData(): string {\n  const saveData = loadFromLocalStorage<SaveData>(SAVE_KEY);\n  const settingsData = loadFromLocalStorage<SettingsData>(SETTINGS_KEY);\n  \n  const exportData = {\n    save: saveData,\n    settings: settingsData,\n    exportDate: new Date().toISOString(),\n    version: '1.0.0'\n  };\n  \n  return JSON.stringify(exportData, null, 2);\n}\n\n/**\n * Import game data from JSON\n */\nexport function importGameData(jsonString: string): boolean {\n  try {\n    const importData = JSON.parse(jsonString);\n    \n    // Validate the data structure\n    if (!importData.save || !importData.settings) {\n      throw new Error('Invalid import data format');\n    }\n    \n    // Save the imported data\n    const saveSuccess = saveToLocalStorage(SAVE_KEY, importData.save);\n    const settingsSuccess = saveToLocalStorage(SETTINGS_KEY, importData.settings);\n    \n    return saveSuccess && settingsSuccess;\n  } catch (error) {\n    console.error('Failed to import game data:', error);\n    return false;\n  }\n}\n\n/**\n * Clear all game data\n */\nexport function clearAllGameData(): boolean {\n  try {\n    deleteFromLocalStorage(SAVE_KEY);\n    deleteFromLocalStorage(SETTINGS_KEY);\n    return true;\n  } catch (error) {\n    console.error('Failed to clear game data:', error);\n    return false;\n  }\n}","size_bytes":3566},"client/src/components/game/components/APKDownload.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Badge } from '../../ui/badge';\nimport { Download, Smartphone, Shield, Zap } from 'lucide-react';\n\nconst APKDownload: React.FC = () => {\n  const handleDownload = () => {\n    // Track download analytics\n    console.log('APK download initiated');\n    \n    // The download will be handled by the browser via the href\n  };\n\n  return (\n    <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 border-green-200\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Smartphone size={20} className=\"text-green-600\" />\n          Mobile App Download\n          <Badge className=\"bg-green-500 text-white ml-auto\">\n            v4.0\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n            <Download size={32} className=\"text-green-600\" />\n          </div>\n          <h3 className=\"font-semibold text-gray-800 mb-2\">\n            Get Wealth Sprint Mobile App\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-4\">\n            Download the Android APK for offline gameplay and enhanced mobile experience\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 mb-4\">\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Shield size={16} className=\"text-green-500\" />\n            <span>Safe & Secure</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Zap size={16} className=\"text-green-500\" />\n            <span>Offline Ready</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Smartphone size={16} className=\"text-green-500\" />\n            <span>Mobile Optimized</span>\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <a \n            href=\"https://github.com/brinemka/Wealth-sprint-/releases/download/v4.0/WealthSprint.apk\" \n            download\n            onClick={handleDownload}\n            className=\"inline-block\"\n          >\n            <Button className=\"bg-green-500 hover:bg-green-600 text-white px-6 py-3 font-semibold flex items-center gap-2\">\n              <Download size={20} />\n              📥 Download APK\n            </Button>\n          </a>\n        </div>\n        \n        <div className=\"bg-blue-50 p-3 rounded-lg\">\n          <p className=\"text-xs text-blue-700\">\n            <strong>Note:</strong> After downloading, you may need to enable \"Install from unknown sources\" \n            in your Android settings to install the APK.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default APKDownload;","size_bytes":2988},"client/src/components/game/components/CyberModeButton.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { useAudio } from '../../../lib/stores/useAudio';\nimport { Button } from '../../ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../ui/dialog';\nimport { Badge } from '../../ui/badge';\nimport { Zap, Lock, Crown, Cpu, Shield } from 'lucide-react';\n\nconst CyberModeButton: React.FC = () => {\n  const { financialData, playerStats } = useWealthSprintGame();\n  const { playHit } = useAudio();\n  const [showCyberDialog, setShowCyberDialog] = useState(false);\n\n  const CYBER_UNLOCK_AMOUNT = 50000000; // 5 Crores\n  const isUnlocked = financialData.netWorth >= CYBER_UNLOCK_AMOUNT;\n  const remaining = CYBER_UNLOCK_AMOUNT - financialData.netWorth;\n\n  const handleCyberModeClick = () => {\n    playHit();\n    setShowCyberDialog(true);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const CyberModeContent = () => {\n    if (!isUnlocked) {\n      return (\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"relative\">\n              <Lock size={48} className=\"text-gray-400\" />\n              <div className=\"absolute -top-2 -right-2\">\n                <Crown size={20} className=\"text-yellow-500\" />\n              </div>\n            </div>\n          </div>\n          <h3 className=\"text-xl font-bold text-gray-700\">Cyber Mode Locked</h3>\n          <p className=\"text-gray-600\">\n            Achieve a net worth of <span className=\"font-bold text-green-600\">{formatCurrency(CYBER_UNLOCK_AMOUNT)}</span> to unlock advanced financial instruments and AI-powered trading.\n          </p>\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <p className=\"text-sm text-red-700\">\n              <strong>Remaining:</strong> {formatCurrency(remaining)}\n            </p>\n            <div className=\"w-full bg-red-200 rounded-full h-3 mt-2\">\n              <div \n                className=\"bg-red-500 h-3 rounded-full transition-all duration-500\"\n                style={{ width: `${Math.max(5, (financialData.netWorth / CYBER_UNLOCK_AMOUNT) * 100)}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"relative\">\n              <Zap size={48} className=\"text-blue-500\" />\n              <div className=\"absolute -top-2 -right-2\">\n                <Crown size={20} className=\"text-yellow-500\" />\n              </div>\n            </div>\n          </div>\n          <h3 className=\"text-xl font-bold text-blue-700\">Cyber Mode Unlocked!</h3>\n          <p className=\"text-gray-600\">Access advanced financial tools and AI-powered strategies.</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Cpu size={20} className=\"text-blue-600\" />\n              <h4 className=\"font-semibold\">AI Trading Bot</h4>\n            </div>\n            <p className=\"text-sm text-gray-700\">Automated portfolio optimization</p>\n            <Badge className=\"mt-2 bg-blue-100 text-blue-700\">Coming Soon</Badge>\n          </div>\n          \n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Shield size={20} className=\"text-green-600\" />\n              <h4 className=\"font-semibold\">Risk Analytics</h4>\n            </div>\n            <p className=\"text-sm text-gray-700\">Advanced risk assessment tools</p>\n            <Badge className=\"mt-2 bg-green-100 text-green-700\">Coming Soon</Badge>\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg p-4\">\n          <h4 className=\"font-semibold mb-2\">Cyber Mode Features</h4>\n          <ul className=\"text-sm space-y-1\">\n            <li>• Real-time market analysis</li>\n            <li>• Cryptocurrency trading</li>\n            <li>• Advanced derivatives</li>\n            <li>• International markets</li>\n          </ul>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Dialog open={showCyberDialog} onOpenChange={setShowCyberDialog}>\n      <DialogTrigger asChild>\n        <Button\n          variant={isUnlocked ? \"default\" : \"outline\"}\n          className={`flex items-center gap-2 transition-all duration-300 hover:scale-105 ${\n            isUnlocked \n              ? 'bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600' \n              : 'opacity-60'\n          }`}\n          onClick={handleCyberModeClick}\n        >\n          {isUnlocked ? <Zap size={16} /> : <Lock size={16} />}\n          Cyber Mode\n          {!isUnlocked && <Badge variant=\"destructive\" className=\"ml-1\">₹5Cr</Badge>}\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Zap size={20} />\n            Cyber Mode\n          </DialogTitle>\n        </DialogHeader>\n        <CyberModeContent />\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default CyberModeButton;","size_bytes":5596},"client/src/components/game/components/GameplayContent.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { useAudio } from '../../../lib/stores/useAudio';\nimport { getRandomScenarios } from '../../../lib/data/scenarios';\nimport type { GameScenario } from '../../../lib/data/scenarios';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Badge } from '../../ui/badge';\nimport { Progress } from '../../ui/progress';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Target, \n  Zap, \n  Heart, \n  Brain, \n  Star,\n  Briefcase,\n  Users,\n  AlertTriangle,\n  Clock,\n  Sparkles\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nconst GameplayContent: React.FC = () => {\n  const { \n    playerStats, \n    financialData, \n    currentWeek, \n    currentDay,\n    updatePlayerStats,\n    updateFinancialData \n  } = useWealthSprintGame();\n  \n  const { playSuccess, playHit } = useAudio();\n  const [selectedScenario, setSelectedScenario] = useState<string | null>(null);\n  const [scenarios, setScenarios] = useState<GameScenario[]>([]);\n\n  // Load scenarios on component mount\n  useEffect(() => {\n    const loadedScenarios = getRandomScenarios(5);\n    setScenarios(loadedScenarios);\n  }, []);\n\n  const handleScenarioChoice = (scenarioId: string, choiceId: string) => {\n    const scenario = scenarios.find(s => s.id === scenarioId);\n    const choice = scenario?.choices.find(c => c.id === choiceId);\n    \n    if (choice && choice.consequences) {\n      // Apply consequences to player stats\n      const statsUpdate: any = {};\n      const financialUpdate: any = {};\n      \n      Object.entries(choice.consequences).forEach(([key, value]) => {\n        if (key === 'bankBalance') {\n          financialUpdate.bankBalance = (financialData.bankBalance || 0) + (value || 0);\n          financialUpdate.netWorth = (financialData.netWorth || 0) + (value || 0);\n        } else {\n          statsUpdate[key] = Math.max(0, Math.min(100, (playerStats[key as keyof typeof playerStats] || 0) + (value || 0)));\n        }\n      });\n      \n      updatePlayerStats(statsUpdate);\n      updateFinancialData(financialUpdate);\n      \n      // Play sound effect\n      if (choice.consequences.bankBalance && choice.consequences.bankBalance > 0) {\n        playSuccess();\n      } else {\n        playHit();\n      }\n      \n      // Show toast notification\n      toast.success(`${choice.description}`, {\n        description: `Choice: ${choice.text}`,\n        duration: 3000,\n      });\n      \n      // Remove completed scenario\n      setScenarios(prev => prev.filter(s => s.id !== scenarioId));\n      setSelectedScenario(null);\n    }\n  };\n\n  const loadMoreScenarios = () => {\n    const newScenarios = getRandomScenarios(3);\n    setScenarios(prev => [...prev, ...newScenarios]);\n    toast.info('New scenarios loaded!', {\n      description: 'Fresh challenges await you',\n      duration: 2000,\n    });\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'family': return <Heart className=\"w-4 h-4\" />;\n      case 'business': return <Briefcase className=\"w-4 h-4\" />;\n      case 'investment': return <TrendingUp className=\"w-4 h-4\" />;\n      case 'career': return <Target className=\"w-4 h-4\" />;\n      case 'crisis': return <AlertTriangle className=\"w-4 h-4\" />;\n      default: return <Star className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'low': return 'bg-green-500';\n      case 'medium': return 'bg-yellow-500';\n      case 'high': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatColor = (value: number) => {\n    if (value >= 80) return 'bg-green-500';\n    if (value >= 60) return 'bg-yellow-500';\n    if (value >= 40) return 'bg-orange-500';\n    return 'bg-red-500';\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header with Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"bg-gradient-to-r from-green-50 to-green-100 border-green-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">Net Worth</p>\n                <p className=\"text-2xl font-bold text-green-900\">\n                  {formatCurrency(financialData.netWorth || 0)}\n                </p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-blue-50 to-blue-100 border-blue-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-blue-800\">Bank Balance</p>\n                <p className=\"text-2xl font-bold text-blue-900\">\n                  {formatCurrency(financialData.bankBalance || 0)}\n                </p>\n              </div>\n              <Briefcase className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-50 to-purple-100 border-purple-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-purple-800\">Game Progress</p>\n                <p className=\"text-2xl font-bold text-purple-900\">\n                  Week {currentWeek}, Day {currentDay}\n                </p>\n              </div>\n              <Clock className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Player Stats */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"w-5 h-5\" />\n            Player Stats\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n            {Object.entries(playerStats).map(([key, value]) => (\n              <div key={key} className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium capitalize\">{key}</span>\n                  <span className=\"text-sm text-gray-600\">{value}/100</span>\n                </div>\n                <Progress value={value} className=\"h-2\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Scenarios Section */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-gray-800\">Active Scenarios</h2>\n          <Button onClick={loadMoreScenarios} variant=\"outline\" size=\"sm\">\n            <Sparkles className=\"w-4 h-4 mr-2\" />\n            Load More\n          </Button>\n        </div>\n\n        {scenarios.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-gray-500 mb-4\">No scenarios available</p>\n              <Button onClick={loadMoreScenarios}>\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n                Load Scenarios\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {scenarios.map((scenario) => (\n              <Card key={scenario.id} className=\"cursor-pointer hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {getCategoryIcon(scenario.category)}\n                      <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                        {scenario.category}\n                      </Badge>\n                    </div>\n                    <div className={`w-2 h-2 rounded-full ${getUrgencyColor(scenario.urgency)}`} />\n                  </div>\n                  <CardTitle className=\"text-lg\">{scenario.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-600 mb-4\">{scenario.description}</p>\n                  \n                  {selectedScenario === scenario.id ? (\n                    <div className=\"space-y-2\">\n                      {scenario.choices.map((choice) => (\n                        <Button\n                          key={choice.id}\n                          onClick={() => handleScenarioChoice(scenario.id, choice.id)}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full text-left h-auto py-2 px-3 hover:bg-blue-50\"\n                        >\n                          <div className=\"w-full\">\n                            <div className=\"font-medium text-sm\">{choice.text}</div>\n                            <div className=\"text-xs text-gray-500 mt-1\">{choice.description}</div>\n                          </div>\n                        </Button>\n                      ))}\n                      <Button \n                        onClick={() => setSelectedScenario(null)}\n                        variant=\"ghost\" \n                        size=\"sm\"\n                        className=\"w-full\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  ) : (\n                    <Button\n                      onClick={() => setSelectedScenario(scenario.id)}\n                      className=\"w-full\"\n                      size=\"sm\"\n                    >\n                      Make Decision\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameplayContent;","size_bytes":10275},"client/src/components/game/components/SaveSystem.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Button } from '../../ui/button';\nimport { toast } from 'sonner';\nimport { Save, Upload, RotateCcw } from 'lucide-react';\n\nconst SaveSystem: React.FC = () => {\n  const { \n    saveGame, \n    loadGame, \n    resetGame, \n    hasSavedGame,\n    settings \n  } = useWealthSprintGame();\n\n  // Auto-save functionality\n  useEffect(() => {\n    if (settings?.autoSave) {\n      const autoSaveInterval = setInterval(() => {\n        saveGame();\n        toast.success('Game auto-saved', {\n          duration: 2000,\n          position: 'bottom-right'\n        });\n      }, 300000); // 5 minutes\n\n      return () => clearInterval(autoSaveInterval);\n    }\n  }, [settings?.autoSave, saveGame]);\n\n  const handleSave = () => {\n    const success = saveGame();\n    if (success) {\n      toast.success('Game saved successfully!');\n    } else {\n      toast.error('Failed to save game');\n    }\n  };\n\n  const handleLoad = () => {\n    const success = loadGame();\n    if (success) {\n      toast.success('Game loaded successfully!');\n    } else {\n      toast.error('Failed to load game');\n    }\n  };\n\n  const handleReset = () => {\n    if (window.confirm('Are you sure you want to reset all progress? This cannot be undone.')) {\n      resetGame();\n      toast.success('Game reset successfully');\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      <Button \n        variant=\"outline\" \n        size=\"sm\" \n        onClick={handleSave}\n        className=\"flex items-center gap-1\"\n      >\n        <Save size={14} />\n        Save\n      </Button>\n      \n      {hasSavedGame() && (\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={handleLoad}\n          className=\"flex items-center gap-1\"\n        >\n          <Upload size={14} />\n          Load\n        </Button>\n      )}\n      \n      <Button \n        variant=\"destructive\" \n        size=\"sm\" \n        onClick={handleReset}\n        className=\"flex items-center gap-1\"\n      >\n        <RotateCcw size={14} />\n        Reset\n      </Button>\n    </div>\n  );\n};\n\nexport default SaveSystem;","size_bytes":2167},"client/src/components/game/components/SoundManager.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useAudio } from '../../../lib/stores/useAudio';\n\nconst SoundManager: React.FC = () => {\n  const { backgroundMusic, hitSound, successSound } = useAudio();\n\n  useEffect(() => {\n    // Add click sound to all buttons\n    const addClickSounds = () => {\n      const buttons = document.querySelectorAll('button');\n      buttons.forEach(button => {\n        if (!button.dataset.soundAdded) {\n          button.addEventListener('click', () => {\n            if (hitSound && !hitSound.paused) {\n              hitSound.currentTime = 0;\n            }\n            hitSound?.play().catch(() => {}); // Ignore errors for better UX\n          });\n          button.dataset.soundAdded = 'true';\n        }\n      });\n    };\n\n    // Add sounds when component mounts\n    addClickSounds();\n\n    // Add sounds to dynamically created elements\n    const observer = new MutationObserver(() => {\n      addClickSounds();\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [hitSound]);\n\n  return null; // This component doesn't render anything\n};\n\nexport default SoundManager;","size_bytes":1201},"client/src/components/game/components/StartScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { useAudio } from '../../../lib/stores/useAudio';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Input } from '../../ui/input';\nimport { Badge } from '../../ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../../ui/dialog';\nimport { Play, Target, TrendingUp, Users, Briefcase, Info } from 'lucide-react';\nimport { toast } from 'sonner';\n\nconst StartScreen: React.FC = () => {\n  const { startGame, updatePlayerStats, playerStats } = useWealthSprintGame();\n  const { playSuccess } = useAudio();\n  const [playerName, setPlayerName] = useState('Player');\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const [isStarting, setIsStarting] = useState(false);\n\n  const handleStartGame = async () => {\n    if (!playerName.trim()) {\n      toast.error('Please enter your name to start playing');\n      return;\n    }\n\n    setIsStarting(true);\n    playSuccess();\n    \n    // Update player name\n    updatePlayerStats({ name: playerName.trim() });\n    \n    // Start the game immediately without onboarding delay\n    startGame();\n    setIsStarting(false);\n  };\n\n  const OnboardingDialog = () => (\n    <Dialog open={showOnboarding} onOpenChange={() => {}}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">Welcome to Wealth Sprint!</DialogTitle>\n        </DialogHeader>\n        <div className=\"text-center space-y-4 py-4\">\n          <div className=\"text-6xl\">💰</div>\n          <h3 className=\"text-lg font-semibold\">Get Ready, {playerName}!</h3>\n          <p className=\"text-gray-600\">\n            Make wise financial choices to reach Financial Freedom. Every decision matters on your journey to wealth.\n          </p>\n          <div className=\"flex justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n          </div>\n          <p className=\"text-sm text-gray-500\">Starting your journey...</p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#f5f0e6] via-[#f8f4e8] to-[#f0ead6] flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-2xl space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-5xl font-bold text-[#3a3a3a] mb-2\">\n            Wealth Sprint\n          </h1>\n          <p className=\"text-xl text-[#5a5a5a]\">\n            Your Journey to Financial Freedom Starts Here\n          </p>\n          <Badge className=\"bg-[#d4af37] text-white px-4 py-1\">\n            Version 4.0 - Financial Simulation Game\n          </Badge>\n        </div>\n\n        {/* Main Start Card */}\n        <Card className=\"bg-white/80 backdrop-blur-sm border-2 border-[#d4af37]/20\">\n          <CardHeader>\n            <CardTitle className=\"text-center text-2xl\">Start Your Adventure</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                What should we call you?\n              </label>\n              <Input\n                value={playerName}\n                onChange={(e) => setPlayerName(e.target.value)}\n                placeholder=\"Enter your name\"\n                className=\"text-center text-lg\"\n                maxLength={20}\n              />\n            </div>\n\n            <Button\n              onClick={handleStartGame}\n              disabled={isStarting}\n              className=\"w-full h-12 text-lg font-semibold bg-[#d4af37] hover:bg-[#b8941f] transition-all duration-300 transform hover:scale-105\"\n            >\n              {isStarting ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                  Starting Game...\n                </div>\n              ) : (\n                <div className=\"flex items-center gap-2\">\n                  <Play size={20} />\n                  Begin Wealth Sprint\n                </div>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Feature Preview */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {[\n            { icon: Target, label: 'Set Goals', desc: 'Financial targets' },\n            { icon: TrendingUp, label: 'Invest', desc: 'Stocks & bonds' },\n            { icon: Users, label: 'Build Team', desc: 'Manage staff' },\n            { icon: Briefcase, label: 'Make Deals', desc: 'Business opportunities' }\n          ].map((feature, index) => (\n            <Card key={index} className=\"bg-white/60 hover:bg-white/80 transition-all duration-300 cursor-pointer group\">\n              <CardContent className=\"pt-4 text-center\">\n                <feature.icon size={32} className=\"mx-auto mb-2 text-[#d4af37] group-hover:scale-110 transition-transform\" />\n                <h3 className=\"font-semibold text-sm\">{feature.label}</h3>\n                <p className=\"text-xs text-gray-600\">{feature.desc}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Info */}\n        <div className=\"text-center\">\n          <Button variant=\"ghost\" className=\"text-gray-600 hover:text-gray-800\">\n            <Info size={16} className=\"mr-1\" />\n            How to Play\n          </Button>\n        </div>\n      </div>\n\n      <OnboardingDialog />\n    </div>\n  );\n};\n\nexport default StartScreen;","size_bytes":5683},"client/src/components/game/components/StocksBondsModule.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useFinancialData } from '../../../lib/stores/useFinancialData';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { useAudio } from '../../../lib/stores/useAudio';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Badge } from '../../ui/badge';\nimport { Input } from '../../ui/input';\nimport { Label } from '../../ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../../ui/dialog';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Target, \n  Zap,\n  ShoppingCart,\n  Plus,\n  Minus,\n  BarChart3\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface Stock {\n  code: string;\n  name: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  sector: string;\n}\n\ninterface Bond {\n  id: string;\n  name: string;\n  yield: number;\n  maturity: string;\n  minInvestment: number;\n  rating: string;\n}\n\ninterface StockHolding {\n  code: string;\n  quantity: number;\n  avgPrice: number;\n}\n\nconst StocksBondsModule: React.FC = () => {\n  const { stocks, bonds, portfolioHoldings, buyStock, sellStock, buyBond } = useFinancialData();\n  const { financialData, updateFinancialData } = useWealthSprintGame();\n  const { playSuccess, playHit } = useAudio();\n  \n  const [selectedStock, setSelectedStock] = useState<Stock | null>(null);\n  const [selectedBond, setSelectedBond] = useState<Bond | null>(null);\n  const [quantity, setQuantity] = useState<number>(1);\n  const [bondAmount, setBondAmount] = useState<number>(50000);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isBondDialogOpen, setIsBondDialogOpen] = useState(false);\n\n  // Mock stocks data\n  const mockStocks: Stock[] = [\n    {\n      code: 'RELIANCE',\n      name: 'Reliance Industries',\n      price: 2450.50,\n      change: +45.25,\n      changePercent: 1.88,\n      sector: 'Energy'\n    },\n    {\n      code: 'TCS',\n      name: 'Tata Consultancy Services',\n      price: 3890.25,\n      change: -67.80,\n      changePercent: -1.71,\n      sector: 'Technology'\n    },\n    {\n      code: 'HDFCBANK',\n      name: 'HDFC Bank',\n      price: 1672.80,\n      change: +23.15,\n      changePercent: 1.40,\n      sector: 'Banking'\n    },\n    {\n      code: 'INFY',\n      name: 'Infosys',\n      price: 1456.90,\n      change: -12.35,\n      changePercent: -0.84,\n      sector: 'Technology'\n    },\n    {\n      code: 'HINDUNILVR',\n      name: 'Hindustan Unilever',\n      price: 2567.40,\n      change: +78.90,\n      changePercent: 3.17,\n      sector: 'FMCG'\n    }\n  ];\n\n  // Mock bonds data\n  const mockBonds: Bond[] = [\n    {\n      id: 'GOI2033',\n      name: 'Government of India Bond 2033',\n      yield: 7.26,\n      maturity: '10 years',\n      minInvestment: 10000,\n      rating: 'AAA'\n    },\n    {\n      id: 'SBI2028',\n      name: 'State Bank of India Bond 2028',\n      yield: 8.15,\n      maturity: '5 years',\n      minInvestment: 25000,\n      rating: 'AA+'\n    }\n  ];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const handleBuyStock = () => {\n    if (!selectedStock || quantity <= 0) return;\n    \n    const totalCost = selectedStock.price * quantity;\n    \n    if ((financialData.bankBalance || 0) < totalCost) {\n      toast.error('Insufficient funds!', {\n        description: `You need ${formatCurrency(totalCost)} but only have ${formatCurrency(financialData.bankBalance || 0)}`,\n      });\n      playHit();\n      return;\n    }\n\n    // Update bank balance\n    updateFinancialData({\n      bankBalance: (financialData.bankBalance || 0) - totalCost,\n      netWorth: (financialData.netWorth || 0) - totalCost + (selectedStock.price * quantity)\n    });\n\n    playSuccess();\n    toast.success('Stock purchased successfully!', {\n      description: `Bought ${quantity} shares of ${selectedStock.name} for ${formatCurrency(totalCost)}`,\n      duration: 3000,\n    });\n\n    setIsDialogOpen(false);\n    setSelectedStock(null);\n    setQuantity(1);\n  };\n\n  const handleBuyBond = () => {\n    if (!selectedBond || bondAmount < selectedBond.minInvestment) {\n      toast.error('Invalid investment amount!', {\n        description: `Minimum investment is ${formatCurrency(selectedBond?.minInvestment || 0)}`,\n      });\n      return;\n    }\n    \n    if ((financialData.bankBalance || 0) < bondAmount) {\n      toast.error('Insufficient funds!', {\n        description: `You need ${formatCurrency(bondAmount)} but only have ${formatCurrency(financialData.bankBalance || 0)}`,\n      });\n      playHit();\n      return;\n    }\n\n    // Update bank balance\n    updateFinancialData({\n      bankBalance: (financialData.bankBalance || 0) - bondAmount,\n      netWorth: (financialData.netWorth || 0) // Bonds maintain value\n    });\n\n    playSuccess();\n    toast.success('Bond purchased successfully!', {\n      description: `Invested ${formatCurrency(bondAmount)} in ${selectedBond.name}`,\n      duration: 3000,\n    });\n\n    setIsBondDialogOpen(false);\n    setSelectedBond(null);\n    setBondAmount(50000);\n  };\n\n  const calculatePortfolioValue = () => {\n    // This would normally calculate based on actual holdings\n    // For now, return a mock value\n    return 150000;\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Stocks & Bonds</h1>\n          <p className=\"text-gray-600\">Invest in the financial markets</p>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-sm text-gray-600\">Portfolio Value</div>\n          <div className=\"text-2xl font-bold text-green-600\">\n            {formatCurrency(calculatePortfolioValue())}\n          </div>\n        </div>\n      </div>\n\n      {/* Account Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"bg-gradient-to-r from-green-50 to-green-100 border-green-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">Available Cash</p>\n                <p className=\"text-xl font-bold text-green-900\">\n                  {formatCurrency(financialData.bankBalance || 0)}\n                </p>\n              </div>\n              <DollarSign className=\"w-6 h-6 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-blue-50 to-blue-100 border-blue-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-blue-800\">Portfolio Value</p>\n                <p className=\"text-xl font-bold text-blue-900\">\n                  {formatCurrency(calculatePortfolioValue())}\n                </p>\n              </div>\n              <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-50 to-purple-100 border-purple-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-purple-800\">Total Invested</p>\n                <p className=\"text-xl font-bold text-purple-900\">\n                  {formatCurrency(calculatePortfolioValue() + 50000)}\n                </p>\n              </div>\n              <Target className=\"w-6 h-6 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Stocks Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            Stocks\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {mockStocks.map((stock) => (\n              <Card key={stock.code} className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div>\n                      <div className=\"font-bold text-lg\">{stock.code}</div>\n                      <div className=\"text-sm text-gray-600\">{stock.name}</div>\n                      <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                        {stock.sector}\n                      </Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold\">{formatCurrency(stock.price)}</div>\n                      <div className={`text-sm flex items-center gap-1 ${\n                        stock.change >= 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {stock.change >= 0 ? <TrendingUp className=\"w-3 h-3\" /> : <TrendingDown className=\"w-3 h-3\" />}\n                        {stock.changePercent.toFixed(2)}%\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Dialog open={isDialogOpen && selectedStock?.code === stock.code} onOpenChange={setIsDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        onClick={() => setSelectedStock(stock)}\n                        className=\"w-full mt-2\" \n                        size=\"sm\"\n                      >\n                        <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                        Buy Stock\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Buy {stock.name}</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"quantity\">Quantity</Label>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                            >\n                              <Minus className=\"w-4 h-4\" />\n                            </Button>\n                            <Input\n                              id=\"quantity\"\n                              type=\"number\"\n                              value={quantity}\n                              onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                              className=\"text-center w-20\"\n                              min=\"1\"\n                            />\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setQuantity(quantity + 1)}\n                            >\n                              <Plus className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        <div className=\"bg-gray-50 p-4 rounded-lg\">\n                          <div className=\"flex justify-between\">\n                            <span>Price per share:</span>\n                            <span>{formatCurrency(stock.price)}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Quantity:</span>\n                            <span>{quantity}</span>\n                          </div>\n                          <div className=\"flex justify-between font-bold text-lg border-t pt-2 mt-2\">\n                            <span>Total Cost:</span>\n                            <span>{formatCurrency(stock.price * quantity)}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={handleBuyStock}\n                            className=\"flex-1\"\n                            disabled={(financialData.bankBalance || 0) < (stock.price * quantity)}\n                          >\n                            Confirm Purchase\n                          </Button>\n                          <Button \n                            onClick={() => setIsDialogOpen(false)}\n                            variant=\"outline\"\n                            className=\"flex-1\"\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bonds Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5\" />\n            Bonds\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {mockBonds.map((bond) => (\n              <Card key={bond.id} className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div>\n                      <div className=\"font-bold text-lg\">{bond.name}</div>\n                      <div className=\"text-sm text-gray-600\">Maturity: {bond.maturity}</div>\n                      <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                        {bond.rating}\n                      </Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-green-600\">{bond.yield}%</div>\n                      <div className=\"text-sm text-gray-600\">Yield</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-sm text-gray-600 mb-3\">\n                    Min. Investment: {formatCurrency(bond.minInvestment)}\n                  </div>\n                  \n                  <Dialog open={isBondDialogOpen && selectedBond?.id === bond.id} onOpenChange={setIsBondDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        onClick={() => setSelectedBond(bond)}\n                        className=\"w-full\" \n                        size=\"sm\"\n                      >\n                        <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                        Invest in Bond\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Invest in {bond.name}</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"bondAmount\">Investment Amount</Label>\n                          <Input\n                            id=\"bondAmount\"\n                            type=\"number\"\n                            value={bondAmount}\n                            onChange={(e) => setBondAmount(parseInt(e.target.value) || 0)}\n                            className=\"mt-1\"\n                            min={bond.minInvestment}\n                            step=\"1000\"\n                          />\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            Minimum: {formatCurrency(bond.minInvestment)}\n                          </div>\n                        </div>\n                        \n                        <div className=\"bg-gray-50 p-4 rounded-lg\">\n                          <div className=\"flex justify-between\">\n                            <span>Yield:</span>\n                            <span>{bond.yield}% per annum</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Investment:</span>\n                            <span>{formatCurrency(bondAmount)}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Maturity:</span>\n                            <span>{bond.maturity}</span>\n                          </div>\n                          <div className=\"flex justify-between font-bold text-lg border-t pt-2 mt-2\">\n                            <span>Est. Annual Return:</span>\n                            <span>{formatCurrency(bondAmount * (bond.yield / 100))}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={handleBuyBond}\n                            className=\"flex-1\"\n                            disabled={(financialData.bankBalance || 0) < bondAmount || bondAmount < bond.minInvestment}\n                          >\n                            Confirm Investment\n                          </Button>\n                          <Button \n                            onClick={() => setIsBondDialogOpen(false)}\n                            variant=\"outline\"\n                            className=\"flex-1\"\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default StocksBondsModule;","size_bytes":18215},"client/src/components/game/components/ThemeButton.tsx":{"content":"import React from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Button } from '../../ui/button';\nimport { Palette, Sun, Moon, Zap } from 'lucide-react';\n\nconst ThemeButton: React.FC = () => {\n  const { settings, setTheme, financialData } = useWealthSprintGame();\n  \n  const themes = [\n    { \n      id: 'light', \n      name: 'Light', \n      icon: Sun, \n      colors: '#f5f0e6',\n      unlocked: true \n    },\n    { \n      id: 'dark', \n      name: 'Dark', \n      icon: Moon, \n      colors: '#1a1a1a',\n      unlocked: true \n    },\n    { \n      id: 'cyber', \n      name: 'Cyber', \n      icon: Zap, \n      colors: 'linear-gradient(45deg, #00ff88, #0099ff)',\n      unlocked: financialData.netWorth >= 50000000 // 5 Cr unlock\n    }\n  ];\n\n  const currentTheme = settings?.theme || 'light';\n  const currentThemeData = themes.find(t => t.id === currentTheme) || themes[0];\n\n  const cycleTheme = () => {\n    const unlockedThemes = themes.filter(t => t.unlocked);\n    const currentIndex = unlockedThemes.findIndex(t => t.id === currentTheme);\n    const nextIndex = (currentIndex + 1) % unlockedThemes.length;\n    setTheme(unlockedThemes[nextIndex].id as 'light' | 'dark' | 'cyber');\n  };\n\n  const Icon = currentThemeData.icon;\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={cycleTheme}\n      className=\"flex items-center gap-2 transition-all duration-300 hover:scale-105\"\n    >\n      <Icon size={16} />\n      {currentThemeData.name}\n    </Button>\n  );\n};\n\nexport default ThemeButton;","size_bytes":1552},"client/src/components/game/sections/AssetsSection.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Input } from '../../ui/input';\nimport { Badge } from '../../ui/badge';\nimport { Progress } from '../../ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../ui/tabs';\nimport { Home, TrendingUp, Car, Briefcase, Minus, Plus, AlertTriangle } from 'lucide-react';\n\ninterface Asset {\n  id: string;\n  name: string;\n  category: 'real_estate' | 'stocks' | 'bonds' | 'business' | 'intellectual' | 'vehicles' | 'gold_crypto';\n  value: number;\n  purchasePrice: number;\n  purchaseDate: Date;\n  monthlyIncome: number;\n  appreciationRate: number;\n  maintenanceCost: number;\n  description: string;\n  icon: string;\n}\n\ninterface Liability {\n  id: string;\n  name: string;\n  category: 'home_loan' | 'car_loan' | 'education_loan' | 'credit_card' | 'business_debt' | 'personal_loan';\n  outstandingAmount: number;\n  originalAmount: number;\n  interestRate: number;\n  emi: number;\n  tenure: number;\n  remainingMonths: number;\n  description: string;\n  icon: string;\n}\n\nconst AssetsSection: React.FC = () => {\n  const { financialData, updateFinancialData, playerStats, updatePlayerStats } = useWealthSprintGame();\n  const [activeTab, setActiveTab] = useState<'assets' | 'liabilities'>('assets');\n  const [selectedAsset, setSelectedAsset] = useState<string | null>(null);\n  const [selectedLiability, setSelectedLiability] = useState<string | null>(null);\n\n  const [assets, setAssets] = useState<Asset[]>([\n    {\n      id: 'asset_1',\n      name: '2BHK Apartment in Mumbai',\n      category: 'real_estate',\n      value: 8500000,\n      purchasePrice: 7500000,\n      purchaseDate: new Date('2023-01-15'),\n      monthlyIncome: 25000,\n      appreciationRate: 8.5,\n      maintenanceCost: 3000,\n      description: 'Prime location apartment generating rental income',\n      icon: '🏠',\n    },\n    {\n      id: 'asset_2',\n      name: 'Delivery Vehicle Fleet',\n      category: 'vehicles',\n      value: 1200000,\n      purchasePrice: 1500000,\n      purchaseDate: new Date('2023-06-10'),\n      monthlyIncome: 45000,\n      appreciationRate: -10,\n      maintenanceCost: 8000,\n      description: '3 commercial vehicles for delivery business',\n      icon: '🚚',\n    },\n    {\n      id: 'asset_3',\n      name: 'Tech Startup Equity',\n      category: 'business',\n      value: 2500000,\n      purchasePrice: 1000000,\n      purchaseDate: new Date('2023-03-20'),\n      monthlyIncome: 0,\n      appreciationRate: 25,\n      maintenanceCost: 0,\n      description: '15% stake in a growing fintech startup',\n      icon: '🚀',\n    },\n    {\n      id: 'asset_4',\n      name: 'Government Bonds',\n      category: 'bonds',\n      value: 500000,\n      purchasePrice: 500000,\n      purchaseDate: new Date('2023-08-05'),\n      monthlyIncome: 3500,\n      appreciationRate: 0,\n      maintenanceCost: 0,\n      description: 'Safe government securities with fixed returns',\n      icon: '🏛️',\n    },\n    {\n      id: 'asset_5',\n      name: 'Online Course Revenue',\n      category: 'intellectual',\n      value: 150000,\n      purchasePrice: 50000,\n      purchaseDate: new Date('2023-04-12'),\n      monthlyIncome: 12000,\n      appreciationRate: 15,\n      maintenanceCost: 1000,\n      description: 'Passive income from educational content',\n      icon: '📚',\n    },\n  ]);\n\n  const [liabilities, setLiabilities] = useState<Liability[]>([\n    {\n      id: 'liability_1',\n      name: 'Home Loan',\n      category: 'home_loan',\n      outstandingAmount: 5500000,\n      originalAmount: 6500000,\n      interestRate: 8.5,\n      emi: 52000,\n      tenure: 240,\n      remainingMonths: 180,\n      description: 'Housing loan for Mumbai apartment',\n      icon: '🏠',\n    },\n    {\n      id: 'liability_2',\n      name: 'Business Working Capital',\n      category: 'business_debt',\n      outstandingAmount: 800000,\n      originalAmount: 1200000,\n      interestRate: 12,\n      emi: 25000,\n      tenure: 60,\n      remainingMonths: 35,\n      description: 'Working capital for business operations',\n      icon: '🏢',\n    },\n    {\n      id: 'liability_3',\n      name: 'Credit Card Outstanding',\n      category: 'credit_card',\n      outstandingAmount: 150000,\n      originalAmount: 150000,\n      interestRate: 42,\n      emi: 15000,\n      tenure: 12,\n      remainingMonths: 12,\n      description: 'High-interest credit card debt',\n      icon: '💳',\n    },\n    {\n      id: 'liability_4',\n      name: 'Car Loan',\n      category: 'car_loan',\n      outstandingAmount: 450000,\n      originalAmount: 800000,\n      interestRate: 9.5,\n      emi: 18000,\n      tenure: 60,\n      remainingMonths: 28,\n      description: 'Personal vehicle loan',\n      icon: '🚗',\n    },\n  ]);\n\n  const totalAssetValue = assets.reduce((sum, asset) => sum + asset.value, 0);\n  const totalLiabilityValue = liabilities.reduce((sum, liability) => sum + liability.outstandingAmount, 0);\n  const netWorth = totalAssetValue - totalLiabilityValue;\n  const monthlyAssetIncome = assets.reduce((sum, asset) => sum + asset.monthlyIncome, 0);\n  const monthlyLiabilityPayment = liabilities.reduce((sum, liability) => sum + liability.emi, 0);\n\n  const handleSellAsset = (assetId: string) => {\n    const asset = assets.find(a => a.id === assetId);\n    if (asset) {\n      const saleValue = asset.value * 0.95; // 5% transaction cost\n      updateFinancialData({\n        bankBalance: financialData.bankBalance + saleValue,\n        totalAssets: financialData.totalAssets - asset.value,\n        sideIncome: financialData.sideIncome - asset.monthlyIncome,\n        monthlyExpenses: financialData.monthlyExpenses - asset.maintenanceCost,\n      });\n      setAssets(assets.filter(a => a.id !== assetId));\n      setSelectedAsset(null);\n    }\n  };\n\n  const handlePrepayLiability = (liabilityId: string, amount: number) => {\n    const liability = liabilities.find(l => l.id === liabilityId);\n    if (liability && financialData.bankBalance >= amount) {\n      const newOutstanding = Math.max(0, liability.outstandingAmount - amount);\n      const newEmi = newOutstanding > 0 ? liability.emi : 0;\n      \n      setLiabilities(liabilities.map(l => \n        l.id === liabilityId \n          ? { ...l, outstandingAmount: newOutstanding, emi: newEmi }\n          : l\n      ));\n      \n      updateFinancialData({\n        bankBalance: financialData.bankBalance - amount,\n        totalLiabilities: financialData.totalLiabilities - amount,\n        monthlyExpenses: financialData.monthlyExpenses - (liability.emi - newEmi),\n      });\n      \n      // Improve karma and reduce stress for debt reduction\n      updatePlayerStats({\n        karma: playerStats.karma + 5,\n        stress: Math.max(0, playerStats.stress - 10),\n        logic: playerStats.logic + 2,\n      });\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'real_estate': return '🏠';\n      case 'stocks': return '📈';\n      case 'bonds': return '🏛️';\n      case 'business': return '🚀';\n      case 'intellectual': return '📚';\n      case 'vehicles': return '🚗';\n      case 'gold_crypto': return '🪙';\n      case 'home_loan': return '🏠';\n      case 'car_loan': return '🚗';\n      case 'education_loan': return '🎓';\n      case 'credit_card': return '💳';\n      case 'business_debt': return '🏢';\n      case 'personal_loan': return '💰';\n      default: return '📦';\n    }\n  };\n\n  const getAppreciationColor = (rate: number) => {\n    if (rate > 0) return 'text-green-600';\n    if (rate < 0) return 'text-red-600';\n    return 'text-gray-600';\n  };\n\n  const getDebtRisk = (liability: Liability) => {\n    if (liability.interestRate > 20) return { level: 'High', color: 'text-red-600' };\n    if (liability.interestRate > 12) return { level: 'Medium', color: 'text-yellow-600' };\n    return { level: 'Low', color: 'text-green-600' };\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Assets & Liabilities</h1>\n        <div className=\"flex items-center gap-6\">\n          <div className=\"text-sm\">\n            <span className=\"text-gray-600\">Net Worth: </span>\n            <span className={`font-semibold ${netWorth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              ₹{netWorth.toLocaleString()}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">₹{totalAssetValue.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-500\">Monthly Income: ₹{monthlyAssetIncome.toLocaleString()}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Liabilities</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">₹{totalLiabilityValue.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-500\">Monthly EMI: ₹{monthlyLiabilityPayment.toLocaleString()}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Net Worth</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className={`text-2xl font-bold ${netWorth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              ₹{netWorth.toLocaleString()}\n            </div>\n            <p className=\"text-xs text-gray-500\">Assets - Liabilities</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Net Cashflow</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className={`text-2xl font-bold ${(monthlyAssetIncome - monthlyLiabilityPayment) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              ₹{(monthlyAssetIncome - monthlyLiabilityPayment).toLocaleString()}\n            </div>\n            <p className=\"text-xs text-gray-500\">Monthly Net Income</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'assets' | 'liabilities')}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"assets\" className=\"flex items-center gap-2\">\n            <TrendingUp size={16} />\n            Assets ({assets.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"liabilities\" className=\"flex items-center gap-2\">\n            <Minus size={16} />\n            Liabilities ({liabilities.length})\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Assets Tab */}\n        <TabsContent value=\"assets\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {assets.map(asset => (\n              <Card key={asset.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    <span className=\"text-2xl\">{asset.icon}</span>\n                    {asset.name}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-600\">Current Value</span>\n                      <div className=\"font-semibold\">₹{asset.value.toLocaleString()}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Purchase Price</span>\n                      <div className=\"font-semibold\">₹{asset.purchasePrice.toLocaleString()}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Monthly Income</span>\n                      <div className=\"font-semibold text-green-600\">₹{asset.monthlyIncome.toLocaleString()}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Appreciation</span>\n                      <div className={`font-semibold ${getAppreciationColor(asset.appreciationRate)}`}>\n                        {asset.appreciationRate > 0 ? '+' : ''}{asset.appreciationRate}%\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-sm text-gray-600 border-t pt-2\">\n                    {asset.description}\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"text-sm\">\n                      <span className=\"text-gray-600\">P&L: </span>\n                      <span className={`font-semibold ${asset.value >= asset.purchasePrice ? 'text-green-600' : 'text-red-600'}`}>\n                        ₹{(asset.value - asset.purchasePrice).toLocaleString()}\n                      </span>\n                    </div>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleSellAsset(asset.id)}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      Sell Asset\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Liabilities Tab */}\n        <TabsContent value=\"liabilities\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {liabilities.map(liability => {\n              const progress = ((liability.tenure - liability.remainingMonths) / liability.tenure) * 100;\n              const debtRisk = getDebtRisk(liability);\n              \n              return (\n                <Card key={liability.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <span className=\"text-2xl\">{liability.icon}</span>\n                      {liability.name}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Outstanding</span>\n                        <div className=\"font-semibold text-red-600\">₹{liability.outstandingAmount.toLocaleString()}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Monthly EMI</span>\n                        <div className=\"font-semibold\">₹{liability.emi.toLocaleString()}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Interest Rate</span>\n                        <div className={`font-semibold ${debtRisk.color}`}>\n                          {liability.interestRate}%\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Remaining</span>\n                        <div className=\"font-semibold\">{liability.remainingMonths} months</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Progress</span>\n                        <span>{progress.toFixed(1)}%</span>\n                      </div>\n                      <Progress value={progress} className=\"h-2\" />\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={`${debtRisk.color} bg-transparent border`}>\n                        {debtRisk.level} Risk\n                      </Badge>\n                      {liability.interestRate > 20 && (\n                        <Badge className=\"bg-red-100 text-red-800\">\n                          High Interest\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-600 border-t pt-2\">\n                      {liability.description}\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\"\n                        onClick={() => handlePrepayLiability(liability.id, 50000)}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        disabled={financialData.bankBalance < 50000}\n                      >\n                        Prepay ₹50K\n                      </Button>\n                      <Button \n                        size=\"sm\"\n                        onClick={() => handlePrepayLiability(liability.id, liability.outstandingAmount)}\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                        disabled={financialData.bankBalance < liability.outstandingAmount}\n                      >\n                        Pay Full\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Financial Health Alert */}\n      {(totalLiabilityValue / totalAssetValue) > 0.7 && (\n        <Card className=\"border-yellow-500 bg-yellow-50\">\n          <CardContent className=\"pt-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <AlertTriangle size={20} className=\"text-yellow-600\" />\n              <h3 className=\"font-semibold text-yellow-800\">High Debt-to-Asset Ratio</h3>\n            </div>\n            <p className=\"text-sm text-yellow-700\">\n              Your debt-to-asset ratio is {((totalLiabilityValue / totalAssetValue) * 100).toFixed(1)}%. \n              Consider reducing liabilities or increasing assets to improve financial health.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default AssetsSection;\n","size_bytes":18745},"client/src/components/game/sections/BankSection.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Badge } from '../../ui/badge';\nimport { Input } from '../../ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../ui/tabs';\nimport { formatMoney } from '../../../lib/utils/formatMoney';\nimport { Building, DollarSign, PiggyBank, TrendingUp, Calendar, AlertCircle, ArrowRightLeft, Receipt } from 'lucide-react';\nimport { toast } from 'sonner';\n\nconst BankSection: React.FC = () => {\n  const { financialData, updateFinancialData, transferToWallet, transferFromWallet, addTransaction } = useWealthSprintGame();\n  const [fdAmount, setFdAmount] = useState('');\n  const [walletTransferAmount, setWalletTransferAmount] = useState('');\n  const [bankTransferAmount, setBankTransferAmount] = useState('');\n\n  const handleTransferToWallet = () => {\n    const amount = parseInt(walletTransferAmount);\n    if (isNaN(amount) || amount <= 0) {\n      toast.error('Please enter a valid amount');\n      return;\n    }\n    \n    if (amount > financialData.bankBalance) {\n      toast.error('Insufficient bank balance');\n      return;\n    }\n    \n    if (transferToWallet(amount)) {\n      toast.success(`Successfully transferred ${formatMoney(amount)} to wallet`);\n      setWalletTransferAmount('');\n    } else {\n      toast.error('Transfer failed');\n    }\n  };\n\n  const handleTransferToBank = () => {\n    const amount = parseInt(bankTransferAmount);\n    if (isNaN(amount) || amount <= 0) {\n      toast.error('Please enter a valid amount');\n      return;\n    }\n    \n    if (amount > financialData.inHandCash) {\n      toast.error('Insufficient wallet balance');\n      return;\n    }\n    \n    if (transferFromWallet(amount)) {\n      toast.success(`Successfully transferred ${formatMoney(amount)} to bank`);\n      setBankTransferAmount('');\n    } else {\n      toast.error('Transfer failed');\n    }\n  };\n\n  const handleCreateFD = () => {\n    const amount = parseInt(fdAmount);\n    if (isNaN(amount) || amount <= 0) {\n      toast.error('Please enter a valid amount');\n      return;\n    }\n    \n    if (amount > financialData.bankBalance) {\n      toast.error('Insufficient bank balance');\n      return;\n    }\n    \n    updateFinancialData({\n      bankBalance: financialData.bankBalance - amount,\n      investments: {\n        ...financialData.investments,\n        fd: financialData.investments.fd + amount,\n      },\n    });\n    \n    addTransaction({\n      type: 'investment',\n      amount: -amount,\n      description: `Created Fixed Deposit - 7% annual interest`,\n      fromAccount: 'bank',\n      toAccount: 'bank'\n    });\n    \n    toast.success(`Successfully created FD of ${formatMoney(amount)} at 7% annual interest`);\n    setFdAmount('');\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Banking</h1>\n        <div className=\"flex items-center gap-4\">\n          <Badge className=\"bg-[#d4af37] text-white\">\n            Bank: {formatMoney(financialData.bankBalance)}\n          </Badge>\n          <Badge className=\"bg-green-600 text-white\">\n            Wallet: {formatMoney(financialData.inHandCash)}\n          </Badge>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"account\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"account\">Account</TabsTrigger>\n          <TabsTrigger value=\"transfer\">Transfer</TabsTrigger>\n          <TabsTrigger value=\"fd\">Fixed Deposits</TabsTrigger>\n          <TabsTrigger value=\"statement\">Statement</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"account\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building className=\"w-5 h-5\" />\n                Account Overview\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <DollarSign className=\"w-4 h-4 text-blue-600\" />\n                    <span className=\"text-sm text-gray-600\">Bank Balance</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-blue-600\">\n                    {formatMoney(financialData.bankBalance)}\n                  </div>\n                </div>\n                <div className=\"p-4 bg-green-50 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <PiggyBank className=\"w-4 h-4 text-green-600\" />\n                    <span className=\"text-sm text-gray-600\">Wallet Cash</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-green-600\">\n                    {formatMoney(financialData.inHandCash)}\n                  </div>\n                </div>\n                <div className=\"p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <TrendingUp className=\"w-4 h-4 text-purple-600\" />\n                    <span className=\"text-sm text-gray-600\">Net Worth</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-purple-600\">\n                    {formatMoney(financialData.netWorth)}\n                  </div>\n                </div>\n                <div className=\"p-4 bg-orange-50 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Calendar className=\"w-4 h-4 text-orange-600\" />\n                    <span className=\"text-sm text-gray-600\">Monthly Income</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-orange-600\">\n                    {formatMoney(financialData.mainIncome + financialData.sideIncome)}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"transfer\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"p-4 bg-blue-50 rounded-lg\">\n              <div className=\"text-sm text-gray-600\">Bank Balance</div>\n              <div className=\"text-xl font-bold text-blue-600\">\n                {formatMoney(financialData.bankBalance)}\n              </div>\n            </div>\n            <div className=\"p-4 bg-green-50 rounded-lg\">\n              <div className=\"text-sm text-gray-600\">Wallet Balance</div>\n              <div className=\"text-xl font-bold text-green-600\">\n                {formatMoney(financialData.inHandCash)}\n              </div>\n            </div>\n          </div>\n\n          {/* Bank to Wallet Transfer */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ArrowRightLeft className=\"w-5 h-5\" />\n                Bank → Wallet Transfer\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Amount to Transfer to Wallet:</label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Enter amount\"\n                    value={walletTransferAmount}\n                    onChange={(e) => setWalletTransferAmount(e.target.value)}\n                    className=\"w-full\"\n                  />\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button \n                    onClick={() => setWalletTransferAmount('5000')} \n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    ₹5,000\n                  </Button>\n                  <Button \n                    onClick={() => setWalletTransferAmount('10000')} \n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    ₹10,000\n                  </Button>\n                  <Button \n                    onClick={() => setWalletTransferAmount('25000')} \n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    ₹25,000\n                  </Button>\n                </div>\n                \n                <Button \n                  onClick={handleTransferToWallet} \n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  disabled={!walletTransferAmount || parseInt(walletTransferAmount) > financialData.bankBalance}\n                >\n                  Transfer to Wallet\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Wallet to Bank Transfer */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ArrowRightLeft className=\"w-5 h-5 rotate-180\" />\n                Wallet → Bank Transfer\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Amount to Transfer to Bank:</label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Enter amount\"\n                    value={bankTransferAmount}\n                    onChange={(e) => setBankTransferAmount(e.target.value)}\n                    className=\"w-full\"\n                  />\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button \n                    onClick={() => setBankTransferAmount('5000')} \n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    ₹5,000\n                  </Button>\n                  <Button \n                    onClick={() => setBankTransferAmount('10000')} \n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    ₹10,000\n                  </Button>\n                  <Button \n                    onClick={() => setBankTransferAmount('25000')} \n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    ₹25,000\n                  </Button>\n                </div>\n                \n                <Button \n                  onClick={handleTransferToBank} \n                  className=\"w-full bg-green-600 hover:bg-green-700\"\n                  disabled={!bankTransferAmount || parseInt(bankTransferAmount) > financialData.inHandCash}\n                >\n                  Transfer to Bank\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <div className=\"p-3 bg-yellow-50 rounded-lg text-sm\">\n            <p className=\"text-yellow-800\">\n              <strong>Note:</strong> Use wallet cash for quick purchases, tips, and small expenses. \n              All major transactions (salaries, investments, loans) happen through your bank account.\n            </p>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"fd\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <PiggyBank className=\"w-5 h-5\" />\n                Fixed Deposits\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"text-sm text-gray-600\">Total FD Amount</div>\n                    <div className=\"text-xl font-bold text-blue-600\">\n                      {formatMoney(financialData.investments.fd)}\n                    </div>\n                  </div>\n                  <div className=\"p-4 bg-green-50 rounded-lg\">\n                    <div className=\"text-sm text-gray-600\">Annual Interest</div>\n                    <div className=\"text-xl font-bold text-green-600\">\n                      {formatMoney(financialData.investments.fd * 0.07)}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">FD Amount:</label>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Enter FD amount\"\n                      value={fdAmount}\n                      onChange={(e) => setFdAmount(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n                  \n                  <Button \n                    onClick={handleCreateFD} \n                    className=\"w-full bg-[#d4af37] hover:bg-[#b8941f]\"\n                    disabled={!fdAmount || parseInt(fdAmount) > financialData.bankBalance}\n                  >\n                    Create Fixed Deposit (7% Annual Interest)\n                  </Button>\n                </div>\n                \n                <div className=\"p-3 bg-blue-50 rounded-lg text-sm\">\n                  <p className=\"text-blue-800\">\n                    <strong>Fixed Deposit Benefits:</strong> Guaranteed 7% annual returns, \n                    safe investment option with no market risk.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"statement\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Receipt className=\"w-5 h-5\" />\n                Transaction Statement\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {financialData.transactionHistory.length > 0 ? (\n                  financialData.transactionHistory.map((transaction) => (\n                    <div key={transaction.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-sm\">{transaction.description}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          {transaction.timestamp instanceof Date ? transaction.timestamp.toLocaleDateString() : new Date(transaction.timestamp).toLocaleDateString()} {transaction.timestamp instanceof Date ? transaction.timestamp.toLocaleTimeString() : new Date(transaction.timestamp).toLocaleTimeString()}\n                        </div>\n                        <div className=\"text-xs text-gray-400\">\n                          {transaction.fromAccount} → {transaction.toAccount}\n                        </div>\n                      </div>\n                      <div className={`font-bold ${transaction.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {transaction.amount >= 0 ? '+' : ''}{formatMoney(transaction.amount)}\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    No transactions yet. Your banking activity will appear here.\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default BankSection;","size_bytes":15841},"client/src/components/game/sections/BondsSection.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Badge } from '../../ui/badge';\nimport { Progress } from '../../ui/progress';\nimport { Input } from '../../ui/input';\nimport { formatMoney } from '../../../lib/utils/formatMoney';\nimport { TrendingUp, Shield, AlertTriangle, Clock, DollarSign, Target } from 'lucide-react';\nimport { toast } from 'sonner';\n\nconst BondsSection: React.FC = () => {\n  const { \n    financialData, \n    playerStats, \n    purchaseBond, \n    addTransaction \n  } = useWealthSprintGame();\n  \n  const [selectedBondType, setSelectedBondType] = useState<'Government' | 'Corporate' | 'Junk'>('Government');\n  const [purchaseAmount, setPurchaseAmount] = useState('');\n\n  const bondTypes = {\n    Government: {\n      name: 'Government Bond',\n      icon: <Shield className=\"w-5 h-5\" />,\n      color: 'bg-green-100 border-green-200',\n      badgeColor: 'bg-green-500',\n      interestRate: 4,\n      maturityTurns: 12,\n      risk: 'Low',\n      description: 'Safest investment backed by government guarantee'\n    },\n    Corporate: {\n      name: 'Corporate Bond',\n      icon: <TrendingUp className=\"w-5 h-5\" />,\n      color: 'bg-blue-100 border-blue-200',\n      badgeColor: 'bg-blue-500',\n      interestRate: 8,\n      maturityTurns: 8,\n      risk: 'Medium',\n      description: 'Higher returns from established companies'\n    },\n    Junk: {\n      name: 'Junk Bond',\n      icon: <AlertTriangle className=\"w-5 h-5\" />,\n      color: 'bg-red-100 border-red-200',\n      badgeColor: 'bg-red-500',\n      interestRate: 15,\n      maturityTurns: 4,\n      risk: 'High',\n      description: 'High risk, high reward - 10% default chance'\n    }\n  };\n\n  const handlePurchase = () => {\n    const amount = parseInt(purchaseAmount);\n    if (isNaN(amount) || amount <= 0) {\n      toast.error('Please enter a valid amount');\n      return;\n    }\n    \n    if (amount > financialData.bankBalance) {\n      toast.error('Insufficient bank balance');\n      return;\n    }\n    \n    if (purchaseBond(selectedBondType, amount)) {\n      toast.success(`Successfully purchased ${bondTypes[selectedBondType].name} for ${formatMoney(amount)}`);\n      setPurchaseAmount('');\n    } else {\n      toast.error('Failed to purchase bond');\n    }\n  };\n\n  const activeBonds = financialData.bondPortfolio.filter(bond => bond.status === 'active');\n  const maturedBonds = financialData.bondPortfolio.filter(bond => bond.status === 'matured');\n  const defaultedBonds = financialData.bondPortfolio.filter(bond => bond.status === 'defaulted');\n\n  const totalBondValue = activeBonds.reduce((sum, bond) => sum + bond.investedAmount, 0);\n  const expectedReturns = activeBonds.reduce((sum, bond) => \n    sum + (bond.investedAmount * (1 + bond.interestRate / 100)), 0\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Bond Investments</h1>\n        <div className=\"flex items-center gap-4\">\n          <Badge className=\"bg-[#d4af37] text-white\">\n            {formatMoney(totalBondValue)} Invested\n          </Badge>\n          <Badge className=\"bg-green-600 text-white\">\n            {formatMoney(expectedReturns)} Expected\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Purchase Bonds */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"w-5 h-5\" />\n              Purchase Bonds\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-gray-600\">\n                Bank Balance: {formatMoney(financialData.bankBalance)}\n              </div>\n              \n              {/* Bond Type Selection */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Select Bond Type:</label>\n                <div className=\"grid grid-cols-1 gap-2\">\n                  {Object.entries(bondTypes).map(([type, info]) => (\n                    <button\n                      key={type}\n                      onClick={() => setSelectedBondType(type as any)}\n                      className={`p-3 rounded-lg border text-left transition-colors ${\n                        selectedBondType === type \n                          ? 'border-[#d4af37] bg-[#d4af37] bg-opacity-10' \n                          : info.color\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex items-center gap-2\">\n                          {info.icon}\n                          <span className=\"font-medium\">{info.name}</span>\n                        </div>\n                        <Badge className={`${info.badgeColor} text-white text-xs`}>\n                          {info.risk} Risk\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-gray-600 mb-2\">{info.description}</div>\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div>\n                          <span className=\"text-gray-500\">Returns:</span>\n                          <span className=\"font-medium ml-1\">{info.interestRate}%</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-500\">Maturity:</span>\n                          <span className=\"font-medium ml-1\">{info.maturityTurns} turns</span>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Purchase Amount */}\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Investment Amount:</label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"Enter amount\"\n                  value={purchaseAmount}\n                  onChange={(e) => setPurchaseAmount(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n\n              {/* Purchase Button */}\n              <Button\n                onClick={handlePurchase}\n                disabled={!purchaseAmount || parseInt(purchaseAmount) <= 0}\n                className=\"w-full bg-[#d4af37] hover:bg-[#b8941f]\"\n              >\n                Purchase {bondTypes[selectedBondType].name}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Portfolio Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Portfolio Overview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-blue-50 rounded-lg\">\n                  <div className=\"text-sm text-gray-600\">Total Invested</div>\n                  <div className=\"text-lg font-bold text-blue-600\">\n                    {formatMoney(totalBondValue)}\n                  </div>\n                </div>\n                <div className=\"p-3 bg-green-50 rounded-lg\">\n                  <div className=\"text-sm text-gray-600\">Expected Returns</div>\n                  <div className=\"text-lg font-bold text-green-600\">\n                    {formatMoney(expectedReturns)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                <div className=\"text-center\">\n                  <div className=\"text-gray-600\">Active</div>\n                  <div className=\"font-bold\">{activeBonds.length}</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-gray-600\">Matured</div>\n                  <div className=\"font-bold text-green-600\">{maturedBonds.length}</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-gray-600\">Defaulted</div>\n                  <div className=\"font-bold text-red-600\">{defaultedBonds.length}</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Active Bonds */}\n      {activeBonds.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"w-5 h-5\" />\n              Active Bonds ({activeBonds.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {activeBonds.map((bond) => {\n                const bondInfo = bondTypes[bond.type];\n                const maturityProgress = ((bondInfo.maturityTurns - bond.turnsToMature) / bondInfo.maturityTurns) * 100;\n                const expectedReturn = bond.investedAmount * (1 + bond.interestRate / 100);\n                \n                return (\n                  <div key={bond.id} className={`p-4 rounded-lg border ${bondInfo.color}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {bondInfo.icon}\n                        <span className=\"font-medium\">{bondInfo.name}</span>\n                        <Badge className={`${bondInfo.badgeColor} text-white text-xs`}>\n                          {bond.interestRate}%\n                        </Badge>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-600\">\n                          {bond.turnsToMature} turns left\n                        </div>\n                        <div className=\"font-medium\">\n                          {formatMoney(bond.investedAmount)} → {formatMoney(expectedReturn)}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Maturity Progress</span>\n                        <span>{maturityProgress.toFixed(1)}%</span>\n                      </div>\n                      <Progress value={maturityProgress} className=\"h-2\" />\n                    </div>\n                    \n                    <div className=\"mt-2 text-xs text-gray-500\">\n                      Purchased: {bond.purchaseDate instanceof Date ? bond.purchaseDate.toLocaleDateString() : new Date(bond.purchaseDate).toLocaleDateString()}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Transaction History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Bond Transactions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {financialData.transactionHistory\n              .filter(tx => tx.type === 'bond_purchase' || tx.type === 'bond_maturity')\n              .slice(0, 10)\n              .map((transaction) => (\n                <div key={transaction.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                  <div>\n                    <div className=\"font-medium text-sm\">{transaction.description}</div>\n                    <div className=\"text-xs text-gray-500\">\n                      {transaction.timestamp instanceof Date ? transaction.timestamp.toLocaleDateString() : new Date(transaction.timestamp).toLocaleDateString()} {transaction.timestamp instanceof Date ? transaction.timestamp.toLocaleTimeString() : new Date(transaction.timestamp).toLocaleTimeString()}\n                    </div>\n                  </div>\n                  <div className={`font-bold ${transaction.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {transaction.amount >= 0 ? '+' : ''}{formatMoney(transaction.amount)}\n                  </div>\n                </div>\n              ))}\n            {financialData.transactionHistory.filter(tx => tx.type === 'bond_purchase' || tx.type === 'bond_maturity').length === 0 && (\n              <div className=\"text-center text-gray-500 py-4\">\n                No bond transactions yet. Purchase your first bond above!\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default BondsSection;","size_bytes":12820},"client/src/components/game/sections/BusinessDealsSection.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Badge } from '../../ui/badge';\nimport { Progress } from '../../ui/progress';\nimport { Handshake, Clock, DollarSign, TrendingUp, AlertTriangle, Users, Building } from 'lucide-react';\n\ninterface BusinessDeal {\n  id: string;\n  type: 'vc_funding' | 'acquisition' | 'partnership' | 'license' | 'exit' | 'merger';\n  title: string;\n  description: string;\n  dealerName: string;\n  dealerAvatar: string;\n  dealerCompany: string;\n  value: number;\n  timeLimit: number; // hours\n  urgency: 'low' | 'medium' | 'high' | 'critical';\n  options: {\n    id: string;\n    text: string;\n    consequences: {\n      cashflow: number;\n      equity: number;\n      reputation: number;\n      stress: number;\n      karma: number;\n      hidden?: string;\n    };\n  }[];\n  hiddenClauses?: string[];\n  requirements?: {\n    minReputation?: number;\n    minNetWorth?: number;\n    minLogic?: number;\n  };\n}\n\nconst BusinessDealsSection: React.FC = () => {\n  const { playerStats, financialData, updatePlayerStats, updateFinancialData, checkReputationAccess } = useWealthSprintGame();\n  const [selectedDeal, setSelectedDeal] = useState<string | null>(null);\n\n  // Mock business deals data\n  const [businessDeals, setBusinessDeals] = useState<BusinessDeal[]>([\n    {\n      id: 'deal_1',\n      type: 'vc_funding',\n      title: 'Series A Funding Round',\n      description: 'TechVenture Capital is interested in leading your Series A round',\n      dealerName: 'Rajesh Khanna',\n      dealerAvatar: '👨‍💼',\n      dealerCompany: 'TechVenture Capital',\n      value: 50000000,\n      timeLimit: 72,\n      urgency: 'high',\n      options: [\n        {\n          id: 'accept',\n          text: 'Accept ₹5 Cr for 25% equity + board seat',\n          consequences: {\n            cashflow: 50000000,\n            equity: -25,\n            reputation: 15,\n            stress: 10,\n            karma: 5,\n          },\n        },\n        {\n          id: 'negotiate',\n          text: 'Negotiate for 20% equity, no board seat',\n          consequences: {\n            cashflow: 45000000,\n            equity: -20,\n            reputation: 10,\n            stress: 20,\n            karma: 10,\n          },\n        },\n        {\n          id: 'counter',\n          text: 'Counter with ₹6 Cr for 25% equity',\n          consequences: {\n            cashflow: 35000000,\n            equity: -25,\n            reputation: 5,\n            stress: 25,\n            karma: 0,\n          },\n        },\n        {\n          id: 'decline',\n          text: 'Decline and seek alternative funding',\n          consequences: {\n            cashflow: 0,\n            equity: 0,\n            reputation: -5,\n            stress: 15,\n            karma: 15,\n          },\n        },\n      ],\n      hiddenClauses: ['Liquidation preference', 'Anti-dilution protection'],\n      requirements: {\n        minReputation: 60,\n        minNetWorth: 1000000,\n      },\n    },\n    {\n      id: 'deal_2',\n      type: 'acquisition',\n      title: 'Competitor Acquisition',\n      description: 'Opportunity to acquire a struggling competitor at a discount',\n      dealerName: 'Priya Sharma',\n      dealerAvatar: '👩‍💼',\n      dealerCompany: 'BusinessBrokers Inc.',\n      value: 15000000,\n      timeLimit: 48,\n      urgency: 'medium',\n      options: [\n        {\n          id: 'buy_full',\n          text: 'Acquire 100% for ₹1.5 Cr',\n          consequences: {\n            cashflow: -15000000,\n            equity: 0,\n            reputation: 20,\n            stress: 30,\n            karma: 5,\n          },\n        },\n        {\n          id: 'buy_partial',\n          text: 'Acquire 60% for ₹1 Cr',\n          consequences: {\n            cashflow: -10000000,\n            equity: 0,\n            reputation: 15,\n            stress: 20,\n            karma: 10,\n          },\n        },\n        {\n          id: 'asset_only',\n          text: 'Buy only assets for ₹80L',\n          consequences: {\n            cashflow: -8000000,\n            equity: 0,\n            reputation: 10,\n            stress: 15,\n            karma: 0,\n          },\n        },\n        {\n          id: 'pass',\n          text: 'Pass on this opportunity',\n          consequences: {\n            cashflow: 0,\n            equity: 0,\n            reputation: 0,\n            stress: 0,\n            karma: 0,\n          },\n        },\n      ],\n      hiddenClauses: ['Pending litigation', 'Employee retention issues'],\n      requirements: {\n        minNetWorth: 20000000,\n        minLogic: 70,\n      },\n    },\n    {\n      id: 'deal_3',\n      type: 'partnership',\n      title: 'Strategic Partnership',\n      description: 'Major corporation wants to partner for market expansion',\n      dealerName: 'Amit Kumar',\n      dealerAvatar: '👨‍💻',\n      dealerCompany: 'MegaCorp Industries',\n      value: 25000000,\n      timeLimit: 96,\n      urgency: 'low',\n      options: [\n        {\n          id: 'equal_partnership',\n          text: 'Equal partnership - 50/50 revenue split',\n          consequences: {\n            cashflow: 5000000,\n            equity: 0,\n            reputation: 25,\n            stress: 10,\n            karma: 15,\n          },\n        },\n        {\n          id: 'majority_partner',\n          text: 'Become majority partner - 70/30 split',\n          consequences: {\n            cashflow: 2000000,\n            equity: 0,\n            reputation: 15,\n            stress: 20,\n            karma: 5,\n          },\n        },\n        {\n          id: 'licensing_only',\n          text: 'License technology only - fixed fee',\n          consequences: {\n            cashflow: 10000000,\n            equity: 0,\n            reputation: 10,\n            stress: 5,\n            karma: 10,\n          },\n        },\n        {\n          id: 'decline_partnership',\n          text: 'Decline partnership offer',\n          consequences: {\n            cashflow: 0,\n            equity: 0,\n            reputation: -5,\n            stress: 5,\n            karma: 5,\n          },\n        },\n      ],\n      requirements: {\n        minReputation: 50,\n      },\n    },\n  ]);\n\n  const selectedDealData = selectedDeal ? businessDeals.find(d => d.id === selectedDeal) : null;\n\n  const handleDealDecision = (dealId: string, optionId: string) => {\n    const deal = businessDeals.find(d => d.id === dealId);\n    const option = deal?.options.find(o => o.id === optionId);\n    \n    if (deal && option) {\n      // Apply consequences\n      updateFinancialData({\n        bankBalance: financialData.bankBalance + option.consequences.cashflow,\n        netWorth: financialData.netWorth + option.consequences.cashflow,\n      });\n      \n      updatePlayerStats({\n        reputation: Math.max(0, Math.min(100, playerStats.reputation + option.consequences.reputation)),\n        stress: Math.max(0, Math.min(100, playerStats.stress + option.consequences.stress)),\n        karma: Math.max(0, Math.min(100, playerStats.karma + option.consequences.karma)),\n      });\n      \n      // Remove completed deal\n      setBusinessDeals(businessDeals.filter(d => d.id !== dealId));\n      setSelectedDeal(null);\n    }\n  };\n\n  const getDealTypeIcon = (type: string) => {\n    switch (type) {\n      case 'vc_funding': return <DollarSign size={16} className=\"text-green-600\" />;\n      case 'acquisition': return <Building size={16} className=\"text-blue-600\" />;\n      case 'partnership': return <Handshake size={16} className=\"text-purple-600\" />;\n      case 'license': return <TrendingUp size={16} className=\"text-orange-600\" />;\n      case 'exit': return <AlertTriangle size={16} className=\"text-red-600\" />;\n      case 'merger': return <Users size={16} className=\"text-indigo-600\" />;\n      default: return <Handshake size={16} className=\"text-gray-600\" />;\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'critical': return 'bg-red-500';\n      case 'high': return 'bg-orange-500';\n      case 'medium': return 'bg-yellow-500';\n      case 'low': return 'bg-green-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const canAccessDeal = (deal: BusinessDeal) => {\n    if (!deal.requirements) return true;\n    \n    const { minReputation, minNetWorth, minLogic } = deal.requirements;\n    \n    return (\n      (!minReputation || playerStats.reputation >= minReputation) &&\n      (!minNetWorth || financialData.netWorth >= minNetWorth) &&\n      (!minLogic || playerStats.logic >= minLogic)\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Business Deals</h1>\n        <div className=\"flex items-center gap-4\">\n          <Badge className=\"bg-[#d4af37] text-white\">\n            {businessDeals.length} Active Deals\n          </Badge>\n        </div>\n      </div>\n\n      {!checkReputationAccess() && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-red-700 text-sm\">\n            🚫 <strong>Limited Access:</strong> Your reputation ({playerStats.reputation}) is too low for premium business deals. \n            Focus on building your reputation to unlock high-value opportunities.\n          </p>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Deals List */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Handshake size={20} />\n              Available Deals\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {businessDeals.map(deal => (\n                <button\n                  key={deal.id}\n                  onClick={() => setSelectedDeal(deal.id)}\n                  disabled={!canAccessDeal(deal)}\n                  className={`w-full p-4 rounded-lg text-left transition-colors ${\n                    selectedDeal === deal.id \n                      ? 'bg-[#d4af37] text-white' \n                      : canAccessDeal(deal)\n                        ? 'bg-gray-50 hover:bg-gray-100'\n                        : 'bg-gray-100 opacity-50 cursor-not-allowed'\n                  }`}\n                >\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      {getDealTypeIcon(deal.type)}\n                      <span className=\"font-semibold text-sm\">{deal.title}</span>\n                    </div>\n                    <Badge className={`${getUrgencyColor(deal.urgency)} text-white text-xs`}>\n                      {deal.urgency.toUpperCase()}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm opacity-70 mb-2\">\n                    {deal.dealerName} • {deal.dealerCompany}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"font-semibold\">₹{(deal.value / 10000000).toFixed(1)}Cr</span>\n                    <div className=\"flex items-center gap-1\">\n                      <Clock size={12} />\n                      <span className=\"text-xs\">{deal.timeLimit}h</span>\n                    </div>\n                  </div>\n                  {!canAccessDeal(deal) && (\n                    <div className=\"mt-2 text-xs text-red-600\">\n                      Requirements not met\n                    </div>\n                  )}\n                </button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Deal Details */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building size={20} />\n              {selectedDealData ? selectedDealData.title : 'Select a deal'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {selectedDealData ? (\n              <div className=\"space-y-6\">\n                {/* Deal Header */}\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <div className=\"text-3xl\">{selectedDealData.dealerAvatar}</div>\n                    <div>\n                      <div className=\"font-semibold\">{selectedDealData.dealerName}</div>\n                      <div className=\"text-sm text-gray-600\">{selectedDealData.dealerCompany}</div>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-700 mb-3\">{selectedDealData.description}</p>\n                  \n                  <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-600\">Deal Value</span>\n                      <div className=\"font-semibold\">₹{(selectedDealData.value / 10000000).toFixed(1)} Cr</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Time Left</span>\n                      <div className=\"font-semibold\">{selectedDealData.timeLimit} hours</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Urgency</span>\n                      <Badge className={`${getUrgencyColor(selectedDealData.urgency)} text-white`}>\n                        {selectedDealData.urgency.toUpperCase()}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Time Pressure */}\n                <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Clock size={16} className=\"text-yellow-600\" />\n                    <span className=\"font-semibold text-yellow-800\">Time Pressure</span>\n                  </div>\n                  <Progress value={(selectedDealData.timeLimit / 120) * 100} className=\"h-2 mb-2\" />\n                  <p className=\"text-sm text-yellow-700\">\n                    This deal expires in {selectedDealData.timeLimit} hours. Quick decision required!\n                  </p>\n                </div>\n\n                {/* Hidden Clauses */}\n                {selectedDealData.hiddenClauses && selectedDealData.hiddenClauses.length > 0 && (\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <AlertTriangle size={16} className=\"text-blue-600\" />\n                      <span className=\"font-semibold text-blue-800\">\n                        {playerStats.logic >= 80 ? 'Hidden Clauses Detected' : 'Fine Print'}\n                      </span>\n                    </div>\n                    {playerStats.logic >= 80 ? (\n                      <div className=\"space-y-1\">\n                        {selectedDealData.hiddenClauses.map((clause, index) => (\n                          <div key={index} className=\"text-sm text-blue-700\">\n                            • {clause}\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-blue-700\">\n                        Your logic stat is too low to detect potential hidden clauses.\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                {/* Deal Options */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-semibold\">Your Options:</h3>\n                  {selectedDealData.options.map(option => (\n                    <Card key={option.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardContent className=\"pt-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <p className=\"font-medium\">{option.text}</p>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 mb-3\">\n                          {option.consequences.cashflow !== 0 && (\n                            <Badge variant=\"outline\" className={option.consequences.cashflow > 0 ? 'text-green-600' : 'text-red-600'}>\n                              Cash: {option.consequences.cashflow > 0 ? '+' : ''}₹{(option.consequences.cashflow / 10000000).toFixed(1)}Cr\n                            </Badge>\n                          )}\n                          {option.consequences.reputation !== 0 && (\n                            <Badge variant=\"outline\" className={option.consequences.reputation > 0 ? 'text-green-600' : 'text-red-600'}>\n                              Rep: {option.consequences.reputation > 0 ? '+' : ''}{option.consequences.reputation}\n                            </Badge>\n                          )}\n                          {option.consequences.stress !== 0 && (\n                            <Badge variant=\"outline\" className={option.consequences.stress > 0 ? 'text-red-600' : 'text-green-600'}>\n                              Stress: {option.consequences.stress > 0 ? '+' : ''}{option.consequences.stress}\n                            </Badge>\n                          )}\n                          {option.consequences.karma !== 0 && (\n                            <Badge variant=\"outline\" className={option.consequences.karma > 0 ? 'text-green-600' : 'text-red-600'}>\n                              Karma: {option.consequences.karma > 0 ? '+' : ''}{option.consequences.karma}\n                            </Badge>\n                          )}\n                          {option.consequences.equity !== 0 && (\n                            <Badge variant=\"outline\" className=\"text-purple-600\">\n                              Equity: {option.consequences.equity}%\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <Button \n                          onClick={() => handleDealDecision(selectedDealData.id, option.id)}\n                          className=\"w-full bg-[#d4af37] hover:bg-[#b8941f]\"\n                        >\n                          Choose This Option\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">Select a deal to view details and make your decision</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default BusinessDealsSection;\n","size_bytes":18759},"client/src/components/game/sections/CashflowSection.tsx":{"content":"import React from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Chart } from '../../ui/chart';\nimport { TrendingUp, TrendingDown, DollarSign, PieChart } from 'lucide-react';\n\nconst CashflowSection: React.FC = () => {\n  const { financialData } = useWealthSprintGame();\n\n  const cashflowData = {\n    labels: ['Income', 'Expenses', 'Net Cashflow'],\n    datasets: [\n      {\n        label: 'Monthly Cashflow',\n        data: [\n          financialData.mainIncome + financialData.sideIncome,\n          financialData.monthlyExpenses,\n          financialData.cashflow || 0,\n        ],\n        backgroundColor: ['#10b981', '#ef4444', '#d4af37'],\n        borderColor: ['#059669', '#dc2626', '#b8941f'],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const expenseBreakdown = {\n    labels: ['Living Expenses', 'Business Costs', 'Investments', 'Taxes', 'Others'],\n    datasets: [\n      {\n        data: [\n          financialData.monthlyExpenses * 0.4,\n          financialData.monthlyExpenses * 0.25,\n          financialData.monthlyExpenses * 0.15,\n          financialData.monthlyExpenses * 0.15,\n          financialData.monthlyExpenses * 0.05,\n        ],\n        backgroundColor: ['#ef4444', '#f59e0b', '#10b981', '#3b82f6', '#8b5cf6'],\n        borderWidth: 0,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Cashflow Statement</h1>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Income</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              ₹{(financialData.mainIncome + financialData.sideIncome).toLocaleString()}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              Main: ₹{financialData.mainIncome.toLocaleString()} | Side: ₹{financialData.sideIncome.toLocaleString()}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Expenses</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              ₹{financialData.monthlyExpenses.toLocaleString()}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              Monthly recurring expenses\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Net Cashflow</CardTitle>\n            <DollarSign className={`h-4 w-4 ${(financialData.cashflow || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`} />\n          </CardHeader>\n          <CardContent>\n            <div className={`text-2xl font-bold ${(financialData.cashflow || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              ₹{(financialData.cashflow || 0).toLocaleString()}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              {(financialData.cashflow || 0) >= 0 ? 'Positive cashflow' : 'Negative cashflow'}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp size={20} />\n              Monthly Cashflow Overview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <Chart type=\"bar\" data={cashflowData} />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <PieChart size={20} />\n              Expense Breakdown\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <Chart type=\"doughnut\" data={expenseBreakdown} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Income Sources</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Main Income (Job/Business)</span>\n                <span className=\"font-semibold\">₹{financialData.mainIncome.toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Side Income (Investments)</span>\n                <span className=\"font-semibold\">₹{financialData.sideIncome.toLocaleString()}</span>\n              </div>\n              <div className=\"border-t pt-2\">\n                <div className=\"flex justify-between items-center font-semibold\">\n                  <span>Total Monthly Income</span>\n                  <span>₹{(financialData.mainIncome + financialData.sideIncome).toLocaleString()}</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Financial Health Metrics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Expense Ratio</span>\n                <span className=\"font-semibold\">\n                  {((financialData.monthlyExpenses / (financialData.mainIncome + financialData.sideIncome)) * 100).toFixed(1)}%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Savings Rate</span>\n                <span className=\"font-semibold\">\n                  {(((financialData.cashflow || 0) / (financialData.mainIncome + financialData.sideIncome)) * 100).toFixed(1)}%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">FI Progress</span>\n                <span className=\"font-semibold\">\n                  {((financialData.sideIncome / financialData.monthlyExpenses) * 100).toFixed(1)}%\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default CashflowSection;\n","size_bytes":7108},"client/src/components/game/sections/RevenueSection.tsx":{"content":"import React from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Badge } from '../../ui/badge';\nimport { Progress } from '../../ui/progress';\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Target, \n  BarChart3,\n  PieChart,\n  Activity,\n  Calendar\n} from 'lucide-react';\n\nconst RevenueSection: React.FC = () => {\n  const { playerStats, financialData, currentWeek, currentDay } = useWealthSprintGame();\n\n  // Calculate mock 5-year data based on current stats\n  const calculateYearlyData = () => {\n    const years = [];\n    const baseNetWorth = financialData.netWorth || 500000;\n    const baseIncome = financialData.mainIncome || 80000;\n    \n    for (let year = 1; year <= 5; year++) {\n      const growthRate = (playerStats.logic + playerStats.reputation) / 200; // 0-1 based on stats\n      const yearlyGrowth = 0.1 + (growthRate * 0.15); // 10-25% growth based on stats\n      const emotionalImpact = (playerStats.emotion - 50) / 100; // -0.5 to 0.5\n      const stressImpact = (50 - playerStats.stress) / 100; // -0.5 to 0.5\n      \n      const adjustedGrowth = yearlyGrowth + emotionalImpact * 0.05 + stressImpact * 0.03;\n      \n      const revenue = baseIncome * Math.pow(1 + adjustedGrowth, year);\n      const expenses = revenue * (0.6 - (playerStats.logic / 1000)); // Lower expenses with higher logic\n      const profit = revenue - expenses;\n      const netWorth = baseNetWorth * Math.pow(1 + adjustedGrowth, year);\n      \n      years.push({\n        year: new Date().getFullYear() + year - 1,\n        revenue: Math.round(revenue),\n        expenses: Math.round(expenses),\n        profit: Math.round(profit),\n        netWorth: Math.round(netWorth),\n        roi: Math.round(((profit / expenses) * 100) * 10) / 10\n      });\n    }\n    \n    return years;\n  };\n\n  const yearlyData = calculateYearlyData();\n  const totalInvestment = yearlyData.reduce((sum, year) => sum + year.expenses, 0);\n  const totalProfit = yearlyData.reduce((sum, year) => sum + year.profit, 0);\n  const totalROI = ((totalProfit / totalInvestment) * 100);\n  const averageROI = yearlyData.reduce((sum, year) => sum + year.roi, 0) / yearlyData.length;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getPerformanceColor = (value: number) => {\n    if (value >= 20) return 'text-green-600';\n    if (value >= 10) return 'text-yellow-600';\n    if (value >= 0) return 'text-blue-600';\n    return 'text-red-600';\n  };\n\n  const getEmotionalTrend = () => {\n    const trend = playerStats.emotion - 50;\n    if (trend > 10) return { icon: TrendingUp, color: 'text-green-600', text: 'Positive' };\n    if (trend < -10) return { icon: TrendingDown, color: 'text-red-600', text: 'Negative' };\n    return { icon: Activity, color: 'text-blue-600', text: 'Stable' };\n  };\n\n  const emotionalTrend = getEmotionalTrend();\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">5-Year Revenue & Profit Details</h1>\n          <p className=\"text-gray-600\">Financial projections based on your current performance</p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-sm\">\n          Week {currentWeek}, Day {currentDay}\n        </Badge>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-r from-green-50 to-green-100 border-green-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">Total Investment</p>\n                <p className=\"text-xl font-bold text-green-900\">\n                  {formatCurrency(totalInvestment)}\n                </p>\n              </div>\n              <DollarSign className=\"w-6 h-6 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-blue-50 to-blue-100 border-blue-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-blue-800\">Total Profit</p>\n                <p className=\"text-xl font-bold text-blue-900\">\n                  {formatCurrency(totalProfit)}\n                </p>\n              </div>\n              <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-50 to-purple-100 border-purple-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-purple-800\">Average ROI</p>\n                <p className={`text-xl font-bold ${getPerformanceColor(averageROI)}`}>\n                  {averageROI.toFixed(1)}%\n                </p>\n              </div>\n              <Target className=\"w-6 h-6 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-orange-50 to-orange-100 border-orange-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-orange-800\">Emotional Trend</p>\n                <p className={`text-xl font-bold ${emotionalTrend.color}`}>\n                  {emotionalTrend.text}\n                </p>\n              </div>\n              <emotionalTrend.icon className={`w-6 h-6 ${emotionalTrend.color}`} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Yearly Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5\" />\n            Yearly Financial Breakdown\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-2\">Year</th>\n                  <th className=\"text-right py-2\">Revenue</th>\n                  <th className=\"text-right py-2\">Expenses</th>\n                  <th className=\"text-right py-2\">Profit</th>\n                  <th className=\"text-right py-2\">Net Worth</th>\n                  <th className=\"text-right py-2\">ROI</th>\n                </tr>\n              </thead>\n              <tbody>\n                {yearlyData.map((year, index) => (\n                  <tr key={year.year} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"py-3 font-medium\">{year.year}</td>\n                    <td className=\"text-right py-3\">{formatCurrency(year.revenue)}</td>\n                    <td className=\"text-right py-3\">{formatCurrency(year.expenses)}</td>\n                    <td className={`text-right py-3 font-medium ${getPerformanceColor(year.profit)}`}>\n                      {formatCurrency(year.profit)}\n                    </td>\n                    <td className=\"text-right py-3\">{formatCurrency(year.netWorth)}</td>\n                    <td className={`text-right py-3 font-medium ${getPerformanceColor(year.roi)}`}>\n                      {year.roi}%\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Visual Chart Placeholder */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <PieChart className=\"w-5 h-5\" />\n            Emotional Balance Progression\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{playerStats.emotion}</div>\n                <div className=\"text-sm text-gray-600\">Emotion</div>\n                <Progress value={playerStats.emotion} className=\"h-2 mt-2\" />\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{playerStats.logic}</div>\n                <div className=\"text-sm text-gray-600\">Logic</div>\n                <Progress value={playerStats.logic} className=\"h-2 mt-2\" />\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{playerStats.karma}</div>\n                <div className=\"text-sm text-gray-600\">Karma</div>\n                <Progress value={playerStats.karma} className=\"h-2 mt-2\" />\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">{100 - playerStats.stress}</div>\n                <div className=\"text-sm text-gray-600\">Calm</div>\n                <Progress value={100 - playerStats.stress} className=\"h-2 mt-2\" />\n              </div>\n            </div>\n            \n            <div className=\"text-center py-4\">\n              <div className=\"text-sm text-gray-600 mb-2\">Overall Performance Score</div>\n              <div className=\"text-3xl font-bold text-green-600\">\n                {Math.round((playerStats.emotion + playerStats.logic + playerStats.karma + (100 - playerStats.stress)) / 4)}%\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default RevenueSection;","size_bytes":9922},"client/src/components/game/sections/SettingsSection.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { useAudio } from '../../../lib/stores/useAudio';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Input } from '../../ui/input';\nimport { Badge } from '../../ui/badge';\nimport { Switch } from '../../ui/switch';\nimport { Slider } from '../../ui/slider';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../ui/tabs';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '../../ui/alert-dialog';\nimport { \n  Settings, \n  Palette, \n  Volume2, \n  VolumeX, \n  Clock, \n  Shield, \n  User, \n  Download, \n  Upload, \n  RotateCcw, \n  Trash2,\n  Gamepad2,\n  Zap,\n  Crown,\n  Lock,\n  Github,\n  Smartphone,\n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  ExternalLink\n} from 'lucide-react';\n\n// APK Download component removed\n\nconst SettingsSection: React.FC = () => {\n  const { \n    playerStats, \n    financialData, \n    currentWeek, \n    timeEngine,\n    resetGame,\n  } = useWealthSprintGame();\n  \n  const { \n    isMuted, \n    toggleMute, \n    backgroundMusic,\n    hitSound,\n    successSound \n  } = useAudio();\n  \n  const [localSettings, setLocalSettings] = useState({\n    theme: 'light',\n    soundEnabled: !isMuted,\n    musicEnabled: !isMuted,\n    gameSpeed: 'normal',\n    notifications: true,\n    autoSave: true,\n    hapticFeedback: true,\n  });\n  \n  const [playerProfile, setPlayerProfile] = useState({\n    avatar: '👨‍💼',\n    roleTitle: 'Founder',\n    tagline: 'Everything begins with one decision.',\n    displayName: 'Player',\n  });\n  \n  const [volumeLevel, setVolumeLevel] = useState(50);\n  const [showResetDialog, setShowResetDialog] = useState(false);\n  const [exportData, setExportData] = useState('');\n  \n  // APK Build states\n  const [buildStatus, setBuildStatus] = useState<Array<{\n    step: 'github_push' | 'expo_build' | 'polling' | 'complete' | 'error';\n    message: string;\n    success: boolean;\n    downloadUrl?: string;\n    error?: string;\n  }>>([]);\n  const [isBuilding, setIsBuilding] = useState(false);\n  \n  // Check for unlockable features based on game progress\n  const hasAdvancedFeatures = financialData.netWorth >= 10000000; // 1 Cr net worth\n  const hasCustomThemes = financialData.netWorth >= 50000000; // 5 Cr net worth\n  const hasControllerSupport = playerStats.logic >= 80;\n  const hasScenarioTuner = currentWeek >= 52; // 1 year of gameplay\n\n  const handleThemeChange = (theme: 'light' | 'dark' | 'cyber') => {\n    setLocalSettings(prev => ({ ...prev, theme }));\n  };\n\n  const handleGameSpeedChange = (speed: 'slow' | 'normal' | 'fast') => {\n    setLocalSettings(prev => ({ ...prev, gameSpeed: speed }));\n  };\n\n  const handleVolumeChange = (value: number[]) => {\n    const newVolume = value[0] / 100;\n    setVolumeLevel(value[0]);\n    \n    if (backgroundMusic) {\n      backgroundMusic.volume = newVolume * 0.1; // Background music should be quieter\n    }\n    if (hitSound) {\n      hitSound.volume = newVolume * 0.3;\n    }\n    if (successSound) {\n      successSound.volume = newVolume * 0.5;\n    }\n  };\n\n  const handleExportSave = () => {\n    const gameData = {\n      playerStats,\n      financialData,\n      currentWeek,\n      playerProfile,\n      settings: localSettings,\n      exportDate: new Date().toISOString(),\n      version: '4.0'\n    };\n    \n    const dataString = JSON.stringify(gameData, null, 2);\n    setExportData(dataString);\n    \n    // Create download\n    const blob = new Blob([dataString], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `wealth-sprint-save-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleResetGame = () => {\n    resetGame();\n    setShowResetDialog(false);\n  };\n\n  const handleSaveGame = () => {\n    // Auto-save functionality \n    console.log('Game saved');\n  };\n\n  const handleLoadGame = () => {\n    // Auto-load functionality\n    console.log('Game loaded');\n  };\n\n  const handleSoundToggle = () => {\n    toggleMute();\n    setLocalSettings(prev => ({ ...prev, soundEnabled: !prev.soundEnabled }));\n  };\n\n  const handleMusicToggle = () => {\n    toggleMute();\n    setLocalSettings(prev => ({ ...prev, musicEnabled: !prev.musicEnabled }));\n    if (backgroundMusic) {\n      if (localSettings.musicEnabled) {\n        backgroundMusic.pause();\n      } else {\n        backgroundMusic.play();\n      }\n    }\n  };\n\n  const avatarOptions = ['👨‍💼', '👩‍💼', '👨‍💻', '👩‍💻', '🧑‍🚀', '👨‍🎓', '👩‍🎓', '🧑‍🔬'];\n  const roleTitleOptions = ['Founder', 'Visionary', 'CXO', 'Capital Architect', 'Entrepreneur', 'Innovator'];\n\n  // Time Engine Debug Console\n  const handleTimeEngineDebug = () => {\n    console.log(\"⏱️ Game Time Engine Active: 24× faster than real world time\");\n    console.log(\"🕰️ 1 real-world hour = 1 in-game day. 5 in-game years = ~75 real hours.\");\n    console.table({ \n      currentGameDay: timeEngine.currentGameDay,\n      currentGameMonth: timeEngine.currentGameMonth, \n      currentGameYear: timeEngine.currentGameYear,\n      daysSinceLastScenario: timeEngine.daysSinceLastScenario,\n      isGameEnded: timeEngine.isGameEnded\n    });\n  };\n\n  // APK Download Handler\n  const handleDownloadAPK = async () => {\n    setIsBuilding(true);\n    setBuildStatus([]);\n\n    try {\n      const response = await fetch('/api/build-apk', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const reader = response.body?.getReader();\n      const decoder = new TextDecoder();\n\n      if (!reader) {\n        throw new Error('No response body');\n      }\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const status = JSON.parse(line.slice(6));\n              setBuildStatus(prev => {\n                const existingIndex = prev.findIndex(s => s.step === status.step);\n                if (existingIndex >= 0) {\n                  const newStatus = [...prev];\n                  newStatus[existingIndex] = status;\n                  return newStatus;\n                } else {\n                  return [...prev, status];\n                }\n              });\n            } catch (e) {\n              console.error('Error parsing build status:', e);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      setBuildStatus(prev => [...prev, {\n        step: 'error',\n        message: 'Build process failed',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }]);\n    } finally {\n      setIsBuilding(false);\n    }\n  };\n\n  const getStatusIcon = (status: any) => {\n    if (status.step === 'error') {\n      return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n    }\n    if (status.success) {\n      return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    }\n    return <Loader2 className=\"w-4 h-4 animate-spin text-blue-500\" />;\n  };\n\n  const getStepIcon = (step: string) => {\n    switch (step) {\n      case 'github_push':\n        return <Github className=\"w-4 h-4\" />;\n      case 'expo_build':\n      case 'polling':\n        return <Smartphone className=\"w-4 h-4\" />;\n      case 'complete':\n        return <Download className=\"w-4 h-4\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Settings</h1>\n        <Badge className=\"bg-[#d4af37] text-white\">\n          Wealth Sprint v4.0\n        </Badge>\n      </div>\n\n      <Tabs defaultValue=\"gameplay\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"audio\" className=\"flex items-center gap-1\">\n            <Volume2 size={14} />\n            Audio\n          </TabsTrigger>\n          <TabsTrigger value=\"gameplay\" className=\"flex items-center gap-1\">\n            <Clock size={14} />\n            Gameplay\n          </TabsTrigger>\n          <TabsTrigger value=\"data\" className=\"flex items-center gap-1\">\n            <Shield size={14} />\n            Data\n          </TabsTrigger>\n          <TabsTrigger value=\"profile\" className=\"flex items-center gap-1\">\n            <User size={14} />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"advanced\" className=\"flex items-center gap-1\">\n            <Settings size={14} />\n            Advanced\n          </TabsTrigger>\n        </TabsList>\n\n\n\n        {/* Audio Settings */}\n        <TabsContent value=\"audio\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Volume2 size={20} />\n                Sound Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-semibold\">Master Volume</h3>\n                  <p className=\"text-sm text-gray-600\">Overall audio level</p>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={toggleMute}\n                  >\n                    {isMuted ? <VolumeX size={16} /> : <Volume2 size={16} />}\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Volume Level</span>\n                    <span className=\"text-sm text-gray-600\">{volumeLevel}%</span>\n                  </div>\n                  <Slider\n                    value={[volumeLevel]}\n                    onValueChange={handleVolumeChange}\n                    max={100}\n                    step={5}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Interface Click Sound</h4>\n                    <p className=\"text-sm text-gray-600\">Sound for button clicks and interactions</p>\n                  </div>\n                  <Select defaultValue=\"subtle\">\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"off\">Off</SelectItem>\n                      <SelectItem value=\"subtle\">Subtle Beep</SelectItem>\n                      <SelectItem value=\"typewriter\">Typewriter</SelectItem>\n                      <SelectItem value=\"futuristic\">Futuristic Pulse</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Background Music</h4>\n                    <p className=\"text-sm text-gray-600\">Ambient audio during gameplay</p>\n                  </div>\n                  <Select defaultValue=\"none\">\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"calm\">Calm Business Lo-Fi</SelectItem>\n                      <SelectItem value=\"focus\">Focus Ambience</SelectItem>\n                      <SelectItem value=\"none\">None</SelectItem>\n                      <SelectItem value=\"ceo\">CEO Room Echo</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Gameplay Settings */}\n        <TabsContent value=\"gameplay\" className=\"space-y-4\">\n          \n          {/* Original Gameplay Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock size={20} />\n                Gameplay Speed\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-semibold mb-3\">Auto Cycle Rate</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {[\n                    { value: 'realtime', label: 'Real-time', desc: 'Ideal for immersion' },\n                    { value: 'normal', label: 'Balanced', desc: '5 sec delay for decisions' },\n                    { value: 'fast', label: 'Fast-Track Mode', desc: '2x for experienced users' },\n                    { value: 'turbo', label: 'Turbo Test Mode', desc: 'For practice' },\n                  ].map(option => (\n                    <Card \n                      key={option.value}\n                      className={`cursor-pointer transition-all ${localSettings.gameSpeed === option.value ? 'ring-2 ring-[#d4af37]' : ''}`}\n                      onClick={() => handleGameSpeedChange(option.value)}\n                    >\n                      <CardContent className=\"pt-4\">\n                        <h4 className=\"font-medium\">{option.label}</h4>\n                        <p className=\"text-sm text-gray-600\">{option.desc}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Skip Animations</h4>\n                    <p className=\"text-sm text-gray-600\">Disable transition animations for faster gameplay</p>\n                  </div>\n                  <Switch \n                    checked={localSettings.autoSave}\n                    onCheckedChange={(checked) => setLocalSettings(prev => ({ ...prev, autoSave: checked }))}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Auto-Save</h4>\n                    <p className=\"text-sm text-gray-600\">Automatically save progress every 5 minutes</p>\n                  </div>\n                  <Switch \n                    checked={localSettings.autoSave}\n                    onCheckedChange={(checked) => setLocalSettings(prev => ({ ...prev, autoSave: checked }))}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Notifications</h4>\n                    <p className=\"text-sm text-gray-600\">Show alerts for important events</p>\n                  </div>\n                  <Switch \n                    checked={localSettings.notifications}\n                    onCheckedChange={(checked) => setLocalSettings(prev => ({ ...prev, notifications: checked }))}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Data & Privacy */}\n        <TabsContent value=\"data\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield size={20} />\n                Data & Privacy\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Cloud Save</h4>\n                    <p className=\"text-sm text-gray-600\">Sync progress across devices</p>\n                  </div>\n                  <Badge className=\"bg-green-500 text-white\">Enabled</Badge>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">Local Encryption</h4>\n                    <p className=\"text-sm text-gray-600\">Secure progress data locally</p>\n                  </div>\n                  <Badge className=\"bg-green-500 text-white\">ON</Badge>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {/* Save buttons removed as per user request */}\n                <div className=\"text-sm text-gray-600 p-4 bg-gray-50 rounded-lg\">\n                  Game progress is automatically saved in browser storage. Your progress persists between sessions.\n                </div>\n                \n                <AlertDialog open={showResetDialog} onOpenChange={setShowResetDialog}>\n                  <AlertDialogTrigger asChild>\n                    <Button \n                      variant=\"outline\"\n                      className=\"w-full text-red-600 hover:text-red-700\"\n                    >\n                      <RotateCcw size={16} className=\"mr-2\" />\n                      Reset Game Progress\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Reset Game Progress</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        This will permanently delete all your progress, including financial data, team members, and achievements. This action cannot be undone.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction onClick={handleResetGame} className=\"bg-red-600 hover:bg-red-700\">\n                        Reset Everything\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n                \n                <Button \n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  <Trash2 size={16} className=\"mr-2\" />\n                  Clear Cache\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Player Profile */}\n        <TabsContent value=\"profile\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User size={20} />\n                Player Profile Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-semibold mb-3\">Avatar</h3>\n                <div className=\"grid grid-cols-4 md:grid-cols-8 gap-3\">\n                  {avatarOptions.map(avatar => (\n                    <button\n                      key={avatar}\n                      onClick={() => setPlayerProfile(prev => ({ ...prev, avatar }))}\n                      className={`text-3xl p-3 rounded-lg border-2 transition-all ${\n                        playerProfile.avatar === avatar ? 'border-[#d4af37] bg-[#d4af37]/10' : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      {avatar}\n                    </button>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold mb-3\">Role Title</h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {roleTitleOptions.map(role => (\n                    <Button\n                      key={role}\n                      variant={playerProfile.roleTitle === role ? \"default\" : \"outline\"}\n                      onClick={() => setPlayerProfile(prev => ({ ...prev, roleTitle: role }))}\n                      className={playerProfile.roleTitle === role ? \"bg-[#d4af37] hover:bg-[#b8941f]\" : \"\"}\n                    >\n                      {role}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold mb-3\">Signature Tagline</h3>\n                <Input\n                  value={playerProfile.tagline}\n                  onChange={(e) => setPlayerProfile(prev => ({ ...prev, tagline: e.target.value }))}\n                  placeholder=\"Enter your personal motto\"\n                  maxLength={50}\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">{playerProfile.tagline.length}/50 characters</p>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Gender Neutrality</h4>\n                  <p className=\"text-sm text-gray-600\">Use inclusive language throughout the game</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Advanced Settings */}\n        <TabsContent value=\"advanced\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings size={20} />\n                Advanced Settings\n                <Badge className=\"bg-purple-500 text-white\">Unlockables</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* APK Download Section */}\n              <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <Smartphone className=\"w-5 h-5 text-blue-600\" />\n                  <div>\n                    <h4 className=\"font-medium text-blue-900\">Mobile APK Download</h4>\n                    <p className=\"text-sm text-blue-700\">Generate and download an Android APK file for your mobile device</p>\n                  </div>\n                </div>\n                \n                <Button \n                  onClick={handleDownloadAPK}\n                  disabled={isBuilding}\n                  className=\"w-full mb-3\"\n                >\n                  {isBuilding ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Building APK...\n                    </>\n                  ) : (\n                    <>\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download APK\n                    </>\n                  )}\n                </Button>\n\n                {/* Build Status Display */}\n                {buildStatus.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm font-medium text-blue-900\">Build Status:</div>\n                    {buildStatus.map((status, index) => (\n                      <div key={index} className=\"flex items-center gap-2 text-sm\">\n                        {getStatusIcon(status)}\n                        {getStepIcon(status.step)}\n                        <span className={\n                          status.success \n                            ? 'text-green-700' \n                            : status.step === 'error' \n                              ? 'text-red-700' \n                              : 'text-blue-700'\n                        }>\n                          {status.message}\n                        </span>\n                        {status.downloadUrl && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            asChild\n                            className=\"ml-auto\"\n                          >\n                            <a href={status.downloadUrl} download>\n                              <Download className=\"w-3 h-3 mr-1\" />\n                              Download APK\n                              <ExternalLink className=\"w-3 h-3 ml-1\" />\n                            </a>\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                    \n                    {buildStatus.some(s => s.step === 'error') && (\n                      <div className=\"mt-2 p-2 bg-red-50 rounded text-sm text-red-700\">\n                        <strong>Error Details:</strong>\n                        <div className=\"mt-1 font-mono text-xs\">\n                          {buildStatus.find(s => s.step === 'error')?.error || 'Unknown error occurred'}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className={`flex items-center justify-between p-4 rounded-lg border ${hasControllerSupport ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}`}>\n                  <div className=\"flex items-center gap-3\">\n                    <Gamepad2 size={20} className={hasControllerSupport ? 'text-green-600' : 'text-gray-400'} />\n                    <div>\n                      <h4 className=\"font-medium\">Controller Layout</h4>\n                      <p className=\"text-sm text-gray-600\">Gamepad support for mobile devices</p>\n                    </div>\n                  </div>\n                  {hasControllerSupport ? (\n                    <Badge className=\"bg-green-500 text-white\">Unlocked</Badge>\n                  ) : (\n                    <Badge variant=\"outline\">Logic 80+ required</Badge>\n                  )}\n                </div>\n                \n                <div className={`flex items-center justify-between p-4 rounded-lg border ${hasControllerSupport ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}`}>\n                  <div className=\"flex items-center gap-3\">\n                    <Gamepad2 size={20} className={hasControllerSupport ? 'text-green-600' : 'text-gray-400'} />\n                    <div>\n                      <h4 className=\"font-medium\">Controller Layout</h4>\n                      <p className=\"text-sm text-gray-600\">Gamepad support for mobile devices</p>\n                    </div>\n                  </div>\n                  {hasControllerSupport ? (\n                    <Badge className=\"bg-green-500 text-white\">Unlocked</Badge>\n                  ) : (\n                    <Badge variant=\"outline\">Logic 80+ required</Badge>\n                  )}\n                </div>\n                \n                <div className={`flex items-center justify-between p-4 rounded-lg border ${hasScenarioTuner ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}`}>\n                  <div className=\"flex items-center gap-3\">\n                    <Zap size={20} className={hasScenarioTuner ? 'text-green-600' : 'text-gray-400'} />\n                    <div>\n                      <h4 className=\"font-medium\">Scenario Randomizer Tuner</h4>\n                      <p className=\"text-sm text-gray-600\">Adjust balance of luck vs logic in scenarios</p>\n                    </div>\n                  </div>\n                  {hasScenarioTuner ? (\n                    <Badge className=\"bg-green-500 text-white\">Unlocked</Badge>\n                  ) : (\n                    <Badge variant=\"outline\">Play for 1 year</Badge>\n                  )}\n                </div>\n                \n                {/* Time Engine Debug Console */}\n                <div className=\"flex items-center justify-between p-4 rounded-lg border bg-blue-50 border-blue-200\">\n                  <div className=\"flex items-center gap-3\">\n                    <Clock size={20} className=\"text-blue-600\" />\n                    <div>\n                      <h4 className=\"font-medium\">Time Engine Debug</h4>\n                      <p className=\"text-sm text-gray-600\">View background time engine status in console</p>\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={handleTimeEngineDebug}\n                    className=\"border-blue-300 hover:bg-blue-100\"\n                  >\n                    Debug Console\n                  </Button>\n                </div>\n              </div>\n              \n              {hasAdvancedFeatures && (\n                <div className=\"bg-yellow-50 p-4 rounded-lg border border-yellow-200\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Crown size={16} className=\"text-yellow-600\" />\n                    <h4 className=\"font-semibold text-yellow-800\">Advanced Features Unlocked!</h4>\n                  </div>\n                  <p className=\"text-sm text-yellow-700\">\n                    Congratulations! You've unlocked advanced customization options. \n                    Your financial success has earned you access to premium features.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6 text-center\">\n              <div className=\"text-4xl mb-4\">🏆</div>\n              <h3 className=\"font-semibold mb-2\">Achievement System</h3>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Continue playing to unlock more features and customization options.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm\">\n                <div className=\"p-2 bg-gray-50 rounded\">\n                  <div className=\"font-medium\">Financial Milestones</div>\n                  <div className=\"text-gray-600\">Unlock themes & features</div>\n                </div>\n                <div className=\"p-2 bg-gray-50 rounded\">\n                  <div className=\"font-medium\">Skill Mastery</div>\n                  <div className=\"text-gray-600\">Advanced controls</div>\n                </div>\n                <div className=\"p-2 bg-gray-50 rounded\">\n                  <div className=\"font-medium\">Time Investment</div>\n                  <div className=\"text-gray-600\">Special customizations</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Footer Quote */}\n      <Card className=\"bg-gradient-to-r from-[#f5f0e6] to-[#d4af37]/10 border-[#d4af37]/20\">\n        <CardContent className=\"pt-6 text-center\">\n          <p className=\"text-sm italic text-[#3a3a3a]\">\n            \"A well-run empire begins with a well-set interface.\"\n          </p>\n          <p className=\"text-xs text-gray-500 mt-2\">— Wealth Sprint v4.0</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default SettingsSection;\n","size_bytes":31916},"client/src/components/game/sections/StocksSection.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Input } from '../../ui/input';\nimport { Badge } from '../../ui/badge';\nimport { Chart } from '../../ui/chart';\nimport { TrendingUp, TrendingDown, DollarSign, Activity, Eye } from 'lucide-react';\n\nconst StocksSection: React.FC = () => {\n  const { financialData, updateFinancialData } = useWealthSprintGame();\n  const [selectedStock, setSelectedStock] = useState<string | null>(null);\n  const [tradeQuantity, setTradeQuantity] = useState<number>(1);\n  const [tradeType, setTradeType] = useState<'buy' | 'sell'>('buy');\n\n  // Sample stocks data for now\n  const stocks = [\n    { code: 'AAPL', name: 'Apple Inc.', price: 150.00, change: 2.5, changePercent: 1.69, sector: 'Technology' },\n    { code: 'GOOGL', name: 'Alphabet Inc.', price: 2500.00, change: -15.0, changePercent: -0.60, sector: 'Technology' },\n    { code: 'MSFT', name: 'Microsoft Corp.', price: 300.00, change: 5.0, changePercent: 1.69, sector: 'Technology' },\n  ];\n\n  const selectedStockData = selectedStock ? stocks.find(s => s.code === selectedStock) : null;\n  const portfolioValue = financialData.totalAssets;\n\n  const handleTrade = () => {\n    if (!selectedStockData || tradeQuantity <= 0) return;\n\n    const tradeValue = selectedStockData.price * tradeQuantity;\n\n    if (tradeType === 'buy') {\n      if (financialData.bankBalance >= tradeValue) {\n        updateFinancialData({ \n          bankBalance: financialData.bankBalance - tradeValue,\n          totalAssets: financialData.totalAssets + tradeValue,\n        });\n      }\n    } else {\n      updateFinancialData({ \n        bankBalance: financialData.bankBalance + tradeValue,\n        totalAssets: financialData.totalAssets - tradeValue,\n      });\n    }\n    \n    setTradeQuantity(1);\n  };\n\n  const getVolatilityColor = (volatility: string) => {\n    switch (volatility) {\n      case 'low': return 'bg-green-500';\n      case 'medium': return 'bg-yellow-500';\n      case 'high': return 'bg-orange-500';\n      case 'very_high': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const portfolioData = {\n    labels: stocks.map(s => s.code),\n    datasets: [\n      {\n        label: 'Portfolio Value',\n        data: stocks.map(s => s.price / 100), // Scaled down for visualization\n        backgroundColor: ['#d4af37', '#10b981', '#3b82f6', '#f59e0b', '#ef4444'],\n        borderWidth: 0,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Stock Market</h1>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Activity size={16} />\n            <span className=\"text-sm\">Market Sentiment: </span>\n            <Badge className={marketSentiment >= 0 ? 'bg-green-500' : 'bg-red-500'}>\n              {marketSentiment >= 0 ? 'Bullish' : 'Bearish'}\n            </Badge>\n          </div>\n          <div className=\"text-sm font-medium\">\n            Portfolio Value: ₹{portfolioValue.toLocaleString()}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Watchlist */}\n        <Card className=\"md:col-span-1\">\n          <CardHeader>\n            <CardTitle>Watchlist</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {stocks.map((stock) => (\n                <button\n                  key={stock.code}\n                  onClick={() => setSelectedStock(stock.code)}\n                  className={`w-full p-3 rounded-lg text-left hover:bg-gray-50 transition-colors ${\n                    selectedStock === stock.code ? 'bg-[#d4af37] text-white' : 'bg-gray-50'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <div className=\"font-semibold\">{stock.code}</div>\n                      <div className=\"text-sm opacity-70\">{stock.name}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold\">₹{stock.price.toFixed(2)}</div>\n                      <div className={`text-sm ${stock.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Badge className={`${getVolatilityColor(stock.volatility)} text-white text-xs`}>\n                      {stock.volatility.toUpperCase()}\n                    </Badge>\n                    <span className=\"text-xs opacity-70\">{stock.sector}</span>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stock Details */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye size={20} />\n              {selectedStockData ? `${selectedStockData.name} (${selectedStockData.code})` : 'Select a stock'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {selectedStockData ? (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Current Price</p>\n                    <p className=\"text-2xl font-bold\">₹{selectedStockData.price.toFixed(2)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Change</p>\n                    <p className={`text-lg font-semibold ${selectedStockData.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {selectedStockData.changePercent >= 0 ? '+' : ''}{selectedStockData.changePercent.toFixed(2)}%\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Market Cap</p>\n                    <p className=\"text-lg font-semibold\">₹{(selectedStockData.marketCap / 10000000).toFixed(1)}Cr</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">P/E Ratio</p>\n                    <p className=\"text-lg font-semibold\">{selectedStockData.peRatio.toFixed(1)}</p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-gray-500\">52W High</p>\n                    <p className=\"font-semibold\">₹{selectedStockData.high52w.toFixed(2)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-500\">52W Low</p>\n                    <p className=\"font-semibold\">₹{selectedStockData.low52w.toFixed(2)}</p>\n                  </div>\n                </div>\n\n                {/* Trading Interface */}\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"font-semibold mb-3\">Trade</h3>\n                  <div className=\"flex gap-4 items-end\">\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant={tradeType === 'buy' ? 'default' : 'outline'}\n                        onClick={() => setTradeType('buy')}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        Buy\n                      </Button>\n                      <Button\n                        variant={tradeType === 'sell' ? 'default' : 'outline'}\n                        onClick={() => setTradeType('sell')}\n                        className=\"bg-red-600 hover:bg-red-700\"\n                      >\n                        Sell\n                      </Button>\n                    </div>\n                    <div>\n                      <label className=\"text-sm text-gray-500\">Quantity</label>\n                      <Input\n                        type=\"number\"\n                        value={tradeQuantity}\n                        onChange={(e) => setTradeQuantity(Number(e.target.value))}\n                        min=\"1\"\n                        className=\"w-24\"\n                      />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Total Value</p>\n                      <p className=\"font-semibold\">₹{(selectedStockData.price * tradeQuantity).toFixed(2)}</p>\n                    </div>\n                    <Button onClick={handleTrade} className=\"bg-[#d4af37] hover:bg-[#b8941f]\">\n                      {tradeType === 'buy' ? 'Buy' : 'Sell'}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">Select a stock from the watchlist to view details</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Portfolio */}\n      {portfolioHoldings.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Portfolio Holdings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {portfolioHoldings.map((holding) => {\n                  const stock = stocks.find(s => s.code === holding.code);\n                  const currentValue = stock ? stock.price * holding.quantity : 0;\n                  const investedValue = holding.avgPrice * holding.quantity;\n                  const pnl = currentValue - investedValue;\n                  const pnlPercent = (pnl / investedValue) * 100;\n\n                  return (\n                    <div key={holding.code} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <div className=\"font-semibold\">{holding.code}</div>\n                        <div className=\"text-sm text-gray-600\">{holding.quantity} shares @ ₹{holding.avgPrice.toFixed(2)}</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">₹{currentValue.toFixed(2)}</div>\n                        <div className={`text-sm ${pnl >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {pnl >= 0 ? '+' : ''}₹{pnl.toFixed(2)} ({pnlPercent.toFixed(1)}%)\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Portfolio Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <Chart type=\"doughnut\" data={portfolioData} />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StocksSection;\n","size_bytes":11442},"client/src/components/game/sections/StrategyHubSection.tsx":{"content":"import React, { useState } from 'react';\nimport { useWealthSprintGame } from '../../../lib/stores/useWealthSprintGame';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';\nimport { Button } from '../../ui/button';\nimport { Badge } from '../../ui/badge';\nimport { Target, Users, Brain, TrendingUp, AlertCircle, CheckCircle, XCircle } from 'lucide-react';\nimport { getTeamScenarios, TeamScenario } from '../../../lib/data/teamScenarios';\nimport { formatIndianCurrency } from '../../../lib/utils';\n\nconst StrategyHubSection: React.FC = () => {\n  const { playerStats, financialData, updatePlayerStats, updateFinancialData, teamMembers, addGameEvent } = useWealthSprintGame();\n  const [selectedDecision, setSelectedDecision] = useState<string | null>(null);\n  \n  const availableScenarios = getTeamScenarios(teamMembers);\n  const [pendingDecisions, setPendingDecisions] = useState<TeamScenario[]>(availableScenarios.slice(0, 3));\n\n  const selectedDecisionData = selectedDecision ? pendingDecisions.find(d => d.id.toString() === selectedDecision) : null;\n\n  const handleDecision = (decisionId: string, optionId: string) => {\n    const decision = pendingDecisions.find(d => d.id.toString() === decisionId);\n    const option = decision?.options.find(o => o.id === optionId);\n    \n    if (decision && option) {\n      // Apply stat and financial changes\n      if (option.effects) {\n        const updates: any = {};\n        const financialUpdates: any = {};\n        \n        Object.entries(option.effects).forEach(([key, value]) => {\n          if (typeof value === 'number') {\n            if (key === 'bankBalance') {\n              financialUpdates.bankBalance = financialData.bankBalance + value;\n            } else if (key === 'mainIncome') {\n              financialUpdates.mainIncome = financialData.mainIncome + value;\n            } else if (key === 'sideIncome') {\n              financialUpdates.sideIncome = financialData.sideIncome + value;\n            } else if (key === 'monthlyExpenses') {\n              financialUpdates.monthlyExpenses = financialData.monthlyExpenses + value;\n            } else {\n              updates[key] = Math.max(0, Math.min(100, (playerStats as any)[key] + value));\n            }\n          }\n        });\n        \n        if (Object.keys(updates).length > 0) {\n          updatePlayerStats(updates);\n        }\n        \n        if (Object.keys(financialUpdates).length > 0) {\n          updateFinancialData(financialUpdates);\n        }\n      }\n      \n      // Apply team impacts\n      if (decision.teamImpact) {\n        decision.teamImpact.forEach(impact => {\n          // Apply team member effects here if needed\n        });\n      }\n      \n      // Add event log\n      addGameEvent({\n        id: `decision_${Date.now()}`,\n        type: 'info',\n        title: 'Strategic Decision Made',\n        description: `${decision.title}: ${option.text}`,\n        timestamp: new Date()\n      });\n      \n      // Remove completed decision\n      setPendingDecisions(pendingDecisions.filter(d => d.id.toString() !== decisionId));\n      setSelectedDecision(null);\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'high': return 'bg-red-500';\n      case 'medium': return 'bg-yellow-500';\n      case 'low': return 'bg-green-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Strategy Hub</h1>\n        <div className=\"flex items-center gap-4\">\n          <Badge className=\"bg-[#d4af37] text-white\">\n            {pendingDecisions.length} Pending Decisions\n          </Badge>\n        </div>\n      </div>\n\n      {/* Team Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users size={20} />\n            Executive Team\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {teamMembers.map(member => (\n              <div key={member.id} className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <span className=\"text-xl\">{member.emoji}</span>\n                  <div>\n                    <div className=\"font-semibold text-sm\">{member.name}</div>\n                    <div className=\"text-xs text-gray-600\">{member.role}</div>\n                  </div>\n                </div>\n                <div className=\"text-xs text-gray-600\">\n                  Performance: {member.performance}%\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Pending Decisions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target size={20} />\n              Pending Decisions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {pendingDecisions.map(decision => {\n                const requiredMember = teamMembers.find(m => m.roleId === decision.requiredRole);\n                return (\n                  <button\n                    key={decision.id}\n                    onClick={() => setSelectedDecision(decision.id.toString())}\n                    className={`w-full p-4 rounded-lg text-left transition-colors ${\n                      selectedDecision === decision.id.toString() \n                        ? 'bg-[#d4af37] text-white' \n                        : 'bg-gray-50 hover:bg-gray-100'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-lg\">🎯</span>\n                        <span className=\"font-semibold text-sm\">{decision.title}</span>\n                      </div>\n                      <Badge className={`${getUrgencyColor(decision.urgency)} text-white text-xs`}>\n                        {decision.urgency.toUpperCase()}\n                      </Badge>\n                    </div>\n                    <div className=\"text-sm opacity-70 mb-2\">\n                      Team: {requiredMember?.name || 'Executive Team'}\n                    </div>\n                    <div className=\"text-sm opacity-80\">\n                      {decision.description}\n                    </div>\n                  </button>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Decision Details */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Brain size={20} />\n              {selectedDecisionData ? selectedDecisionData.title : 'Select a decision'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {selectedDecisionData ? (\n              <div className=\"space-y-6\">\n                {/* Decision Context */}\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <div className=\"text-3xl\">🎯</div>\n                    <div>\n                      <div className=\"font-semibold\">{selectedDecisionData.title}</div>\n                      <div className=\"text-sm text-gray-600\">{selectedDecisionData.section}</div>\n                      <div className=\"text-sm text-gray-600\">\n                        Team Role: {selectedDecisionData.requiredRole || 'Executive'}\n                      </div>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-700 mb-2\">{selectedDecisionData.description}</p>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className={`${getUrgencyColor(selectedDecisionData.urgency)} text-white`}>\n                      {selectedDecisionData.urgency.toUpperCase()}\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Options */}\n                <div className=\"space-y-4\">\n                  {selectedDecisionData.options.map(option => (\n                    <Card key={option.id} className=\"border-2 hover:border-[#d4af37] transition-colors\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center gap-3 mb-3\">\n                          <div className=\"text-2xl\">⚡</div>\n                          <div>\n                            <div className=\"font-semibold text-sm\">{option.text}</div>\n                          </div>\n                        </div>\n                        \n                        {/* Stats Preview */}\n                        <div className=\"flex flex-wrap gap-2 mb-3\">\n                          {Object.entries(option.effects || {}).map(([key, value]) => (\n                            <Badge key={key} variant=\"outline\" className={value > 0 ? 'text-green-600' : 'text-red-600'}>\n                              {key}: {value > 0 ? '+' : ''}{typeof value === 'number' && key.includes('Balance') ? formatIndianCurrency(value) : value}\n                            </Badge>\n                          ))}\n                        </div>\n                        \n                        {/* Outcome Preview */}\n                        <div className=\"bg-blue-50 p-3 rounded-lg mb-3\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <AlertCircle size={14} className=\"text-blue-600\" />\n                            <span className=\"text-sm font-medium text-blue-800\">Expected Outcome</span>\n                          </div>\n                          <p className=\"text-sm text-blue-700\">{option.description}</p>\n                        </div>\n                        \n                        <Button \n                          onClick={() => handleDecision(selectedDecisionData.id.toString(), option.id)}\n                          className=\"w-full bg-[#d4af37] hover:bg-[#b8941f]\"\n                        >\n                          Choose This Option\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">Select a decision from the board to review and make your choice</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default StrategyHubSection;","size_bytes":10773},"client/src/components/game/sections/TeamSection.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Users, TrendingUp, Award, UserPlus, Star, DollarSign, AlertCircle } from 'lucide-react';\nimport { useWealthSprintGame } from '@/lib/stores/useWealthSprintGame';\nimport { teamRoles, TeamRole, getDepartments, getRolesByDepartment, getPromotionOptions, calculatePromotionCost, calculateBonusAmount } from '@/lib/data/teamRoles';\n\nexport default function TeamSection() {\n  const { \n    teamMembers, \n    financialData, \n    hireEmployee, \n    promoteEmployee, \n    giveBonus, \n    fireEmployee,\n    addGameEvent\n  } = useWealthSprintGame();\n\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [selectedRole, setSelectedRole] = useState('');\n  const [selectedEmployee, setSelectedEmployee] = useState<string | null>(null);\n  const [showHireDialog, setShowHireDialog] = useState(false);\n  const [showPromoteDialog, setShowPromoteDialog] = useState(false);\n\n  const activeTeamMembers = teamMembers.filter(member => member.isActive);\n  const departments = getDepartments();\n  const availableRoles = selectedDepartment ? getRolesByDepartment(selectedDepartment) : [];\n\n  const handleHire = () => {\n    if (selectedRole) {\n      const success = hireEmployee(selectedRole);\n      if (success) {\n        setShowHireDialog(false);\n        setSelectedRole('');\n        setSelectedDepartment('');\n        addGameEvent({\n          id: `hire_success_${Date.now()}`,\n          type: 'success',\n          title: 'Hiring Successful',\n          description: 'New team member hired successfully!',\n          timestamp: new Date()\n        });\n      } else {\n        addGameEvent({\n          id: `hire_failed_${Date.now()}`,\n          type: 'warning',\n          title: 'Hiring Failed',\n          description: 'Not enough funds to hire this employee (need 3 months salary runway)',\n          timestamp: new Date()\n        });\n      }\n    }\n  };\n\n  const handlePromote = (employeeId: string, newRoleId: string) => {\n    const success = promoteEmployee(employeeId, newRoleId);\n    if (success) {\n      setShowPromoteDialog(false);\n      setSelectedEmployee(null);\n      addGameEvent({\n        id: `promote_success_${Date.now()}`,\n        type: 'achievement',\n        title: 'Promotion Successful',\n        description: 'Employee promoted successfully!',\n        timestamp: new Date()\n      });\n    } else {\n      addGameEvent({\n        id: `promote_failed_${Date.now()}`,\n        type: 'warning',\n        title: 'Promotion Failed',\n        description: 'Not enough funds for promotion',\n        timestamp: new Date()\n      });\n    }\n  };\n\n  const handleBonus = (employeeId: string) => {\n    const success = giveBonus(employeeId);\n    if (success) {\n      addGameEvent({\n        id: `bonus_success_${Date.now()}`,\n        type: 'financial',\n        title: 'Bonus Paid',\n        description: 'Employee bonus paid successfully!',\n        timestamp: new Date()\n      });\n    } else {\n      addGameEvent({\n        id: `bonus_failed_${Date.now()}`,\n        type: 'warning',\n        title: 'Bonus Failed',\n        description: 'Not enough funds for bonus payment',\n        timestamp: new Date()\n      });\n    }\n  };\n\n  const TeamOverview = () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Team Size</CardTitle>\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{activeTeamMembers.length}</div>\n          <p className=\"text-xs text-muted-foreground\">Active employees</p>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Monthly Salaries</CardTitle>\n          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">₹{financialData.teamSalaries.toLocaleString()}</div>\n          <p className=\"text-xs text-muted-foreground\">Total monthly cost</p>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Avg Performance</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">\n            {activeTeamMembers.length > 0 \n              ? Math.round(activeTeamMembers.reduce((sum, member) => sum + member.performance, 0) / activeTeamMembers.length)\n              : 0}%\n          </div>\n          <p className=\"text-xs text-muted-foreground\">Team performance</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const TeamMemberCard = ({ member }: { member: typeof teamMembers[0] }) => {\n    const role = teamRoles.find(r => r.id === member.roleId);\n    const promotionOptions = getPromotionOptions(member.roleId, member.currentLevel);\n    \n    return (\n      <Card key={member.id} className=\"mb-4\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"h-10 w-10\">\n                <AvatarFallback>{member.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n              </Avatar>\n              <div>\n                <h3 className=\"font-semibold\">{member.name}</h3>\n                <p className=\"text-sm text-muted-foreground\">{role?.title}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"secondary\">{member.department}</Badge>\n              <Badge variant={member.performance >= 80 ? 'default' : member.performance >= 60 ? 'secondary' : 'destructive'}>\n                {member.performance}% Performance\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"pt-0\">\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Monthly Salary</p>\n              <p className=\"font-semibold\">₹{member.salary.toLocaleString()}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-1\">Experience</p>\n              <p className=\"font-semibold\">{member.experience}%</p>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2 mb-4\">\n            <div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Loyalty</span>\n                <span>{member.loyalty}%</span>\n              </div>\n              <Progress value={member.loyalty} className=\"h-2\" />\n            </div>\n            <div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Performance</span>\n                <span>{member.performance}%</span>\n              </div>\n              <Progress value={member.performance} className=\"h-2\" />\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={() => handleBonus(member.id)}\n              disabled={financialData.bankBalance < calculateBonusAmount(member.salary, member.performance)}\n            >\n              <Star className=\"h-4 w-4 mr-1\" />\n              Bonus (₹{calculateBonusAmount(member.salary, member.performance).toLocaleString()})\n            </Button>\n            \n            {promotionOptions.length > 0 && (\n              <Dialog open={showPromoteDialog && selectedEmployee === member.id} onOpenChange={(open) => {\n                setShowPromoteDialog(open);\n                setSelectedEmployee(open ? member.id : null);\n              }}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Award className=\"h-4 w-4 mr-1\" />\n                    Promote\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Promote {member.name}</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    {promotionOptions.map((option) => {\n                      const promotionCost = calculatePromotionCost(member.salary, option.baseSalary / 12);\n                      return (\n                        <div key={option.id} className=\"flex items-center justify-between p-3 border rounded\">\n                          <div>\n                            <p className=\"font-semibold\">{option.title}</p>\n                            <p className=\"text-sm text-muted-foreground\">{option.department}</p>\n                            <p className=\"text-sm\">New Salary: ₹{(option.baseSalary / 12).toLocaleString()}/month</p>\n                          </div>\n                          <Button \n                            onClick={() => handlePromote(member.id, option.id)}\n                            disabled={financialData.bankBalance < promotionCost}\n                          >\n                            Promote (₹{promotionCost.toLocaleString()})\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </DialogContent>\n              </Dialog>\n            )}\n            \n            <Button \n              size=\"sm\" \n              variant=\"destructive\"\n              onClick={() => fireEmployee(member.id)}\n            >\n              <AlertCircle className=\"h-4 w-4 mr-1\" />\n              Fire\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const HireDialog = () => (\n    <Dialog open={showHireDialog} onOpenChange={setShowHireDialog}>\n      <DialogTrigger asChild>\n        <Button>\n          <UserPlus className=\"h-4 w-4 mr-2\" />\n          Hire Employee\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Hire New Employee</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Department</label>\n            <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select Department\" />\n              </SelectTrigger>\n              <SelectContent>\n                {departments.map(dept => (\n                  <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {selectedDepartment && (\n            <div>\n              <label className=\"text-sm font-medium\">Role</label>\n              <Select value={selectedRole} onValueChange={setSelectedRole}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select Role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableRoles.map(role => (\n                    <SelectItem key={role.id} value={role.id}>\n                      {role.title} - ₹{(role.baseSalary / 12).toLocaleString()}/month\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          {selectedRole && (\n            <div className=\"p-4 bg-muted rounded\">\n              {(() => {\n                const role = teamRoles.find(r => r.id === selectedRole);\n                const monthlySalary = role ? role.baseSalary / 12 : 0;\n                const hiringCost = monthlySalary * 3; // 3 months runway required\n                \n                return (\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">{role?.title}</h4>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{role?.description}</p>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p><strong>Monthly Salary:</strong> ₹{monthlySalary.toLocaleString()}</p>\n                        <p><strong>Required Funds:</strong> ₹{hiringCost.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p><strong>Department:</strong> {role?.department}</p>\n                        <p><strong>Level:</strong> {role?.level}</p>\n                      </div>\n                    </div>\n                    <div className=\"mt-2\">\n                      <p className=\"text-sm\"><strong>Skills:</strong> {role?.skills.join(', ')}</p>\n                    </div>\n                  </div>\n                );\n              })()}\n            </div>\n          )}\n          \n          <div className=\"flex justify-end space-x-2\">\n            <Button variant=\"outline\" onClick={() => setShowHireDialog(false)}>Cancel</Button>\n            <Button \n              onClick={handleHire} \n              disabled={!selectedRole || financialData.bankBalance < (teamRoles.find(r => r.id === selectedRole)?.baseSalary || 0) / 12 * 3}\n            >\n              Hire Employee\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Team Management</h2>\n        <HireDialog />\n      </div>\n      \n      <TeamOverview />\n      \n      <Tabs defaultValue=\"team\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"team\">Team Members</TabsTrigger>\n          <TabsTrigger value=\"departments\">Departments</TabsTrigger>\n          <TabsTrigger value=\"roles\">Available Roles</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"team\" className=\"space-y-4\">\n          {activeTeamMembers.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-semibold\">No team members yet</p>\n                <p className=\"text-muted-foreground\">Hire your first employee to start building your team</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {activeTeamMembers.map(member => (\n                <TeamMemberCard key={member.id} member={member} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"departments\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {departments.map(dept => {\n              const deptMembers = activeTeamMembers.filter(member => member.department === dept);\n              const deptRoles = getRolesByDepartment(dept);\n              \n              return (\n                <Card key={dept}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      {dept}\n                      <Badge variant=\"secondary\">{deptMembers.length} members</Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm text-muted-foreground\">Available Roles: {deptRoles.length}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Monthly Cost: ₹{deptMembers.reduce((sum, member) => sum + member.salary, 0).toLocaleString()}\n                      </p>\n                      {deptMembers.length > 0 && (\n                        <div>\n                          <p className=\"text-sm font-medium mb-1\">Team Members:</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {deptMembers.map(member => (\n                              <Badge key={member.id} variant=\"outline\" className=\"text-xs\">\n                                {member.name}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"roles\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {teamRoles.map(role => (\n              <Card key={role.id}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    {role.title}\n                    <Badge variant=\"secondary\">₹{(role.baseSalary / 12).toLocaleString()}/month</Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">{role.description}</p>\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <p><strong>Department:</strong> {role.department}</p>\n                      <p><strong>Level:</strong> {role.level}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium mb-1\">Skills Required:</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {role.skills.map(skill => (\n                          <Badge key={skill} variant=\"outline\" className=\"text-xs\">\n                            {skill}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":18849},"client/src/components/game/TeamHiringDashboard.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useWealthSprintGame } from '@/lib/stores/useWealthSprintGame';\nimport { formatIndianCurrency } from '@/lib/utils';\nimport { \n  ExecutiveIcon, \n  SalesMarketingIcon, \n  FinancialIcon, \n  ConsultantIcon, \n  ProductDesignIcon, \n  LegalIcon, \n  HumanResourcesIcon,\n  ExperienceIcon,\n  ImpactIcon,\n  SalaryIcon,\n  DomainsIcon,\n  MenuIcon,\n  CloseIcon\n} from '@/assets/icons';\n\n// Sector definitions with detailed information\nconst SECTORS = {\n  \"Logistics\": { owned: false, profit: 0, linkedEmployees: [] },\n  \"Education\": { owned: false, profit: 0, linkedEmployees: [] },\n  \"SaaS\": { owned: false, profit: 0, linkedEmployees: [] },\n  \"Real Estate\": { owned: false, profit: 0, linkedEmployees: [] },\n  \"Fast Food Chains\": { owned: false, profit: 0, linkedEmployees: [] },\n  \"E-commerce\": { owned: false, profit: 0, linkedEmployees: [] },\n  \"Healthcare\": { owned: false, profit: 0, linkedEmployees: [] },\n  \"Fintech\": { owned: false, profit: 0, linkedEmployees: [] },\n  \"Manufacturing\": { owned: false, profit: 0, linkedEmployees: [] }\n};\n\n// Department configuration with roles and sector connections\nconst DEPARTMENTS = {\n  \"Executive\": {\n    color: \"#2e7d32\",\n    icon: ExecutiveIcon,\n    roles: [\n      { name: \"Chief Executive Officer (CEO)\", baseSalary: 2500000, roleId: \"ceo\", sectors: [\"Strategic Planning\", \"Leadership\", \"Vision\"] },\n      { name: \"Chief Operating Officer (COO)\", baseSalary: 2200000, roleId: \"coo\", sectors: [\"Operations\", \"Logistics\", \"Management\"] },\n      { name: \"Chief Technology Officer (CTO)\", baseSalary: 2400000, roleId: \"cto\", sectors: [\"Technology\", \"Innovation\", \"AI\"] },\n      { name: \"Chief Strategy Officer (CSO)\", baseSalary: 2100000, roleId: \"cso\", sectors: [\"Strategy\", \"Analytics\", \"Planning\"] },\n      { name: \"Chief Growth Officer (CGO)\", baseSalary: 2000000, roleId: \"cgo\", sectors: [\"Growth\", \"Expansion\", \"Markets\"] },\n    ]\n  },\n  \"Sales & Marketing\": {\n    color: \"#d32f2f\",\n    icon: SalesMarketingIcon,\n    roles: [\n      { name: \"Marketing Director\", baseSalary: 1500000, roleId: \"marketing_director\", sectors: [\"Digital Marketing\", \"Campaigns\", \"Branding\"] },\n      { name: \"Sales Head\", baseSalary: 1400000, roleId: \"sales_head\", sectors: [\"Sales\", \"Client Relations\", \"Revenue\"] },\n      { name: \"Brand Manager\", baseSalary: 1200000, roleId: \"brand_manager\", sectors: [\"Brand Strategy\", \"Creative\", \"Design\"] },\n      { name: \"Social Media Strategist\", baseSalary: 1000000, roleId: \"social_media_strategist\", sectors: [\"Social Media\", \"Content\", \"Engagement\"] },\n      { name: \"Customer Acquisition Lead\", baseSalary: 1300000, roleId: \"customer_acquisition_lead\", sectors: [\"Lead Generation\", \"Conversion\", \"Growth\"] },\n    ]\n  },\n  \"Financial Management\": {\n    color: \"#1976d2\",\n    icon: FinancialIcon,\n    roles: [\n      { name: \"Chief Financial Officer (CFO)\", baseSalary: 2000000, roleId: \"cfo\", sectors: [\"Financial Planning\", \"Budgeting\", \"Investment\"] },\n      { name: \"Financial Analyst\", baseSalary: 1100000, roleId: \"financial_analyst\", sectors: [\"Analysis\", \"Reporting\", \"Forecasting\"] },\n      { name: \"Investment Manager\", baseSalary: 1600000, roleId: \"investment_manager\", sectors: [\"Portfolio Management\", \"Risk\", \"Returns\"] },\n      { name: \"Budget Controller\", baseSalary: 1200000, roleId: \"budget_controller\", sectors: [\"Budget Control\", \"Cost Management\", \"Optimization\"] },\n      { name: \"Accountant\", baseSalary: 900000, roleId: \"accountant\", sectors: [\"Accounting\", \"Tax\", \"Compliance\"] },\n    ]\n  },\n  \"Consultant\": {\n    color: \"#7b1fa2\",\n    icon: ConsultantIcon,\n    roles: [\n      { name: \"Business Consultant\", baseSalary: 1400000, roleId: \"business_consultant\", sectors: [\"Business Strategy\", \"Process\", \"Efficiency\"] },\n      { name: \"Startup Advisor\", baseSalary: 1300000, roleId: \"startup_advisor\", sectors: [\"Startups\", \"Scaling\", \"Innovation\"] },\n      { name: \"Strategy Consultant\", baseSalary: 1500000, roleId: \"strategy_consultant\", sectors: [\"Strategic Planning\", \"Market Entry\", \"Growth\"] },\n      { name: \"Market Research Expert\", baseSalary: 1200000, roleId: \"market_research_expert\", sectors: [\"Market Analysis\", \"Consumer Insights\", \"Trends\"] },\n      { name: \"Operational Analyst\", baseSalary: 1100000, roleId: \"operational_analyst\", sectors: [\"Operations\", \"Data Analysis\", \"Performance\"] },\n    ]\n  },\n  \"Product Design\": {\n    color: \"#0288d1\",\n    icon: ProductDesignIcon,\n    roles: [\n      { name: \"Head of Product\", baseSalary: 1800000, roleId: \"head_of_product\", sectors: [\"Product Strategy\", \"Roadmap\", \"Vision\"] },\n      { name: \"UX/UI Designer\", baseSalary: 1300000, roleId: \"ux_ui_designer\", sectors: [\"User Experience\", \"Interface Design\", \"Prototyping\"] },\n      { name: \"Product Manager\", baseSalary: 1500000, roleId: \"product_manager\", sectors: [\"Product Development\", \"Requirements\", \"Launch\"] },\n      { name: \"Innovation Specialist\", baseSalary: 1400000, roleId: \"innovation_specialist\", sectors: [\"Innovation\", \"Research\", \"Emerging Tech\"] },\n      { name: \"Prototype Architect\", baseSalary: 1600000, roleId: \"prototype_architect\", sectors: [\"Prototyping\", \"Architecture\", \"Development\"] },\n    ]\n  },\n  \"Legal & Compliance\": {\n    color: \"#5d4037\",\n    icon: LegalIcon,\n    roles: [\n      { name: \"Chief Legal Officer (CLO)\", baseSalary: 1900000, roleId: \"clo\", sectors: [\"Legal Strategy\", \"Compliance\", \"Risk Management\"] },\n      { name: \"Corporate Lawyer\", baseSalary: 1600000, roleId: \"corporate_lawyer\", sectors: [\"Corporate Law\", \"Contracts\", \"Mergers\"] },\n      { name: \"Regulatory Compliance Officer\", baseSalary: 1300000, roleId: \"regulatory_compliance_officer\", sectors: [\"Regulatory\", \"Compliance\", \"Audits\"] },\n      { name: \"IP & Trademark Specialist\", baseSalary: 1400000, roleId: \"ip_trademark_specialist\", sectors: [\"Intellectual Property\", \"Patents\", \"Trademarks\"] },\n      { name: \"Contract Manager\", baseSalary: 1200000, roleId: \"contract_manager\", sectors: [\"Contract Management\", \"Negotiations\", \"Legal Review\"] },\n    ]\n  },\n  \"Human Resources\": {\n    color: \"#e64a19\",\n    icon: HumanResourcesIcon,\n    roles: [\n      { name: \"HR Manager\", baseSalary: 1400000, roleId: \"hr_manager\", sectors: [\"HR Strategy\", \"People Management\", \"Culture\"] },\n      { name: \"Talent Acquisition Specialist\", baseSalary: 1200000, roleId: \"talent_acquisition_specialist\", sectors: [\"Recruitment\", \"Talent Sourcing\", \"Hiring\"] },\n      { name: \"People Experience Lead\", baseSalary: 1300000, roleId: \"people_experience_lead\", sectors: [\"Employee Experience\", \"Engagement\", \"Retention\"] },\n      { name: \"Learning & Development Head\", baseSalary: 1350000, roleId: \"learning_development_head\", sectors: [\"Training\", \"Development\", \"Skills\"] },\n      { name: \"Payroll & Benefits Coordinator\", baseSalary: 1000000, roleId: \"payroll_benefits_coordinator\", sectors: [\"Payroll\", \"Benefits\", \"Compensation\"] },\n    ]\n  },\n};\n\ninterface TeamHiringDashboardProps {\n  onClose: () => void;\n}\n\nexport default function TeamHiringDashboard({ onClose }: TeamHiringDashboardProps) {\n  const { \n    teamMembers, \n    financialData, \n    hireEmployee, \n    addGameEvent,\n    gainClarityXP \n  } = useWealthSprintGame();\n\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(\"Executive\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const sidebarRef = useRef<HTMLDivElement>(null);\n  \n  const activeTeamMembers = teamMembers.filter(member => member.isActive);\n\n  // Close sidebar when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (sidebarRef.current && !sidebarRef.current.contains(event.target as Node)) {\n        setSidebarOpen(false);\n      }\n    };\n\n    if (sidebarOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [sidebarOpen]);\n  const totalTeamCost = activeTeamMembers.reduce((sum, member) => sum + (member.salary || 0), 0);\n\n  const handleDepartmentSelect = (dept: string) => {\n    setSelectedDepartment(dept);\n  };\n\n  const handleHireEmployee = (role: any, department: string) => {\n    const monthlySalary = Math.floor(role.baseSalary / 12);\n    \n    if (financialData.bankBalance < monthlySalary) {\n      addGameEvent(`❌ Insufficient Balance to hire ${role.name}. Need ₹${monthlySalary.toLocaleString()}/month.`);\n      return;\n    }\n\n    // Generate random experience between 10-95\n    const experience = Math.floor(Math.random() * (95 - 10 + 1)) + 10;\n    const actualMonthlySalary = Math.floor(monthlySalary * (experience / 100));\n    \n    // Generate random name for the employee\n    const names = [\n      \"Arjun\", \"Priya\", \"Rahul\", \"Anita\", \"Vikram\", \"Sneha\", \"Aditya\", \"Kavya\",\n      \"Rohan\", \"Meera\", \"Amit\", \"Nisha\", \"Karan\", \"Pooja\", \"Sanjay\", \"Divya\"\n    ];\n    const randomName = names[Math.floor(Math.random() * names.length)];\n    \n    const memberId = `team_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Hire the employee\n    hireEmployee(\n      memberId, \n      randomName, \n      role.name, \n      actualMonthlySalary, \n      department\n    );\n    \n    const impactedSectors = role.sectors || [];\n    gainClarityXP(10);\n    addGameEvent(`🎉 Hired ${randomName} as ${role.name} for ₹${actualMonthlySalary.toLocaleString()}/month (${experience}% experience). Will boost ${impactedSectors.join(', ')} sectors.`);\n  };\n\n  const { currentWeek } = useWealthSprintGame();\n\n  // Progress bar component\n  const ProgressBar = ({ percentage }: { percentage: number }) => {\n    const blocks = 10;\n    const filledBlocks = Math.round((percentage / 100) * blocks);\n    \n    return (\n      <div className=\"flex items-center gap-2\">\n        <div className=\"flex\">\n          {Array.from({ length: blocks }).map((_, i) => (\n            <span\n              key={i}\n              className={`text-sm ${i < filledBlocks ? 'text-gray-800' : 'text-gray-400'}`}\n            >\n              ▰\n            </span>\n          ))}\n        </div>\n        <span className=\"text-xs text-gray-600\">{percentage}%</span>\n      </div>\n    );\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 overflow-auto\" \n      style={{ \n        backgroundColor: 'rgba(229, 222, 202, 0.15)',\n        backdropFilter: 'blur(5px)'\n      }}\n    >\n      {/* Top Navigation Bar */}\n      <header className=\"sticky top-0 z-20 px-6 py-4 border-b shadow-sm\" style={{ backgroundColor: 'rgba(229, 222, 202, 0.9)', borderBottomColor: '#d0c9b5' }}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-2xl font-bold text-gray-800\">Elite Team</div>\n          <div className=\"flex items-center gap-4\">\n            {!sidebarOpen && (\n              <Button\n                onClick={() => setSidebarOpen(true)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-gray-700 hover:bg-gray-100 flex items-center gap-2\"\n              >\n                <MenuIcon />\n                <span>Departments</span>\n              </Button>\n            )}\n            <Button\n              onClick={onClose}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-700 hover:bg-gray-100\"\n            >\n              <CloseIcon />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Sidebar Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 z-30 bg-black/20\" \n          onClick={() => setSidebarOpen(false)} \n        />\n      )}\n\n      {/* Department Sidebar */}\n      <div \n        ref={sidebarRef}\n        className={`fixed left-0 top-0 h-full w-80 z-40 transform transition-transform duration-300 ease-in-out ${\n          sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n        }`}\n        style={{ \n          backgroundColor: 'rgba(229, 222, 202, 0.2)',\n          backdropFilter: 'blur(10px)'\n        }}\n      >\n        <div className=\"p-6 pt-24\">\n          <div className=\"space-y-3\">\n            {Object.entries(DEPARTMENTS).map(([deptName, dept]) => {\n              const IconComponent = dept.icon;\n              return (\n                <button\n                  key={deptName}\n                  onClick={() => {\n                    setSelectedDepartment(deptName);\n                    setSidebarOpen(false);\n                  }}\n                  className={`w-full text-left p-4 rounded-lg transition-all duration-200 flex items-center gap-3 ${\n                    selectedDepartment === deptName\n                      ? 'bg-white/20 text-gray-800 font-semibold shadow-md'\n                      : 'text-gray-700 hover:bg-white/10 hover:text-gray-900'\n                  }`}\n                >\n                  <div style={{ color: dept.color }}>\n                    <IconComponent />\n                  </div>\n                  <span className=\"text-base\">{deptName}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content - Department Roles */}\n      <div className=\"p-6 overflow-y-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4\">\n          {DEPARTMENTS[selectedDepartment]?.roles.map((role, index) => {\n            // Generate consistent data using role ID as seed\n            const seedValue = role.roleId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n            const experience = (seedValue % 8) + 3; // 3-10 scale\n            const monthlySalary = Math.floor(role.baseSalary / 12);\n            const adjustedSalary = Math.floor(monthlySalary * (1 + experience / 10));\n            const impactScore = ((seedValue * 7) % 40) + 60; // 60-100 range\n            const impactLevel = impactScore >= 80 ? 'High' : impactScore >= 70 ? 'Medium' : 'Low';\n            const isAlreadyHired = activeTeamMembers.some(member => member.roleId === role.roleId);\n            const departmentColor = DEPARTMENTS[selectedDepartment].color;\n\n            // Format salary in K format (₹X.XK/mo)\n            const formatSalary = (amount: number): string => {\n              if (amount >= 1000) {\n                return `₹${Math.round(amount / 1000)}K/mo`;\n              }\n              return `₹${amount}/mo`;\n            };\n\n            return (\n              <Card\n                key={role.roleId}\n                className=\"border-0 transition-all duration-200 hover:shadow-xl\"\n                style={{ \n                  backgroundColor: 'rgba(242, 236, 219, 0.1)',\n                  boxShadow: 'inset 0 2px 4px rgba(0,0,0,0.1), 0 4px 8px rgba(0,0,0,0.1)',\n                  backdropFilter: 'blur(10px)',\n                  borderRadius: '12px'\n                }}\n              >\n                <CardContent className=\"p-5\">\n                  <div className=\"space-y-4\">\n                    {/* Role Title */}\n                    <div className=\"mb-4\">\n                      <h3 \n                        className=\"text-xl font-bold leading-tight\" \n                        style={{ color: departmentColor }}\n                      >\n                        {role.name}\n                      </h3>\n                    </div>\n\n                    {/* Metrics Row 1 */}\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center gap-2\">\n                        <ExperienceIcon />\n                        <span className=\"text-sm text-gray-800 font-medium\">Experience: {experience}/10</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <ImpactIcon />\n                        <span className=\"text-sm text-gray-800 font-medium\">Impact: {impactLevel}</span>\n                      </div>\n                    </div>\n\n                    {/* Metrics Row 2 */}\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center gap-2\">\n                        <SalaryIcon />\n                        <span className=\"text-sm text-gray-800 font-medium\">Salary: {formatSalary(adjustedSalary)}</span>\n                      </div>\n                    </div>\n\n                    {/* Expertise */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <DomainsIcon />\n                        <span className=\"text-sm text-gray-800 font-medium\">Expertise:</span>\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        {role.sectors.join(', ')}\n                      </div>\n                    </div>\n\n                    {/* Hire Button */}\n                    <div className=\"flex justify-end pt-3\">\n                      <Button\n                        onClick={() => handleHireEmployee(role, selectedDepartment)}\n                        disabled={isAlreadyHired}\n                        className=\"px-6 py-2 text-sm font-normal text-white transition-all duration-200 hover:shadow-md\"\n                        style={{ \n                          backgroundColor: isAlreadyHired ? '#666' : '#2e7d32',\n                          border: 'none',\n                          borderRadius: '8px'\n                        }}\n                      >\n                        {isAlreadyHired ? '✓ Hired' : 'Hire Now'}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17773},"client/src/lib/data/industrySectors.ts":{"content":"import { IndustrySector, Business, LoopBoss, StrategyCard } from '../types/GameTypes';\n\nexport const industrySectors: IndustrySector[] = [\n  {\n    id: 'fast_food',\n    name: 'Fast Food Chains',\n    icon: '🍟',\n    description: 'Choose recipe quality, speed, locations. Manage customer satisfaction vs cost.',\n    unlockRequirements: {\n      clarityXP: 0,\n      sectorsCompleted: 0,\n      maxLoopScore: 100,\n    },\n    isUnlocked: true,\n    businesses: []\n  },\n  {\n    id: 'logistics',\n    name: 'Logistics & Transport',\n    icon: '🚚',\n    description: 'Optimize delivery routes, fuel use, delays. Prevent burnout from overexpansion.',\n    unlockRequirements: {\n      clarityXP: 50,\n      sectorsCompleted: 1,\n      maxLoopScore: 80,\n    },\n    isUnlocked: false,\n    businesses: []\n  },\n  {\n    id: 'tech_startups',\n    name: 'Tech Startups',\n    icon: '💻',\n    description: 'Build product → feedback → pivot. Overcome shiny object syndrome.',\n    unlockRequirements: {\n      clarityXP: 100,\n      sectorsCompleted: 2,\n      maxLoopScore: 60,\n    },\n    isUnlocked: false,\n    businesses: []\n  },\n  {\n    id: 'ai_saas',\n    name: 'AI & SaaS',\n    icon: '🧠',\n    description: 'Scale APIs, trust privacy, subscriptions. Balance ethics vs profit.',\n    unlockRequirements: {\n      clarityXP: 150,\n      sectorsCompleted: 3,\n      maxLoopScore: 50,\n    },\n    isUnlocked: false,\n    businesses: []\n  },\n  {\n    id: 'ecommerce',\n    name: 'E-commerce',\n    icon: '📦',\n    description: 'Marketing, fulfillment, warehousing. Navigate fake influencers and thin margins.',\n    unlockRequirements: {\n      clarityXP: 200,\n      sectorsCompleted: 4,\n      maxLoopScore: 40,\n    },\n    isUnlocked: false,\n    businesses: []\n  },\n  {\n    id: 'crypto_web3',\n    name: 'Crypto & Web3',\n    icon: '🪙',\n    description: 'Tokenomics, community trust, exchange plays. Resist greed overload.',\n    unlockRequirements: {\n      clarityXP: 250,\n      sectorsCompleted: 5,\n      maxLoopScore: 30,\n    },\n    isUnlocked: false,\n    businesses: []\n  },\n  {\n    id: 'media_empire',\n    name: 'Media Empire',\n    icon: '📺',\n    description: 'Build content, influence, ad power. Avoid fame addiction loops.',\n    unlockRequirements: {\n      clarityXP: 300,\n      sectorsCompleted: 6,\n      maxLoopScore: 25,\n    },\n    isUnlocked: false,\n    businesses: []\n  },\n  {\n    id: 'healthcare',\n    name: 'Healthcare',\n    icon: '🏥',\n    description: 'Research, trials, hospitals. Navigate guilt loop between saving lives vs profit.',\n    unlockRequirements: {\n      clarityXP: 350,\n      sectorsCompleted: 7,\n      maxLoopScore: 20,\n    },\n    isUnlocked: false,\n    businesses: []\n  },\n  {\n    id: 'edtech',\n    name: 'EdTech',\n    icon: '📚',\n    description: 'Build courses, manage dropouts. Overcome self-worth loops when students fail.',\n    unlockRequirements: {\n      clarityXP: 400,\n      sectorsCompleted: 8,\n      maxLoopScore: 15,\n    },\n    isUnlocked: false,\n    businesses: []\n  }\n];\n\nexport const loopBosses: LoopBoss[] = [\n  {\n    id: 'burnout_loop',\n    name: 'Burnout Boss',\n    type: 'burnout',\n    description: 'Over-scaling with no delegation leads to staff leaving and decision paralysis.',\n    triggerConditions: {\n      stress: 85,\n      loopScore: 30,\n      specificActions: ['overwork_team', 'refuse_delegation', 'micromanage']\n    },\n    effects: {\n      playerStats: { stress: 20, energy: -30, reputation: -15 },\n      teamImpact: 'Top performers leave, morale crashes',\n      businessImpact: 'Growth stagnates, quality drops'\n    },\n    counterCards: ['delegation_card', 'self_care_practice']\n  },\n  {\n    id: 'betrayal_boss',\n    name: 'Betrayal Flame',\n    type: 'betrayal',\n    description: 'Co-founder or key partner betrays you, causing trust crash and frozen growth.',\n    triggerConditions: {\n      karma: 30,\n      loopScore: 25,\n      specificActions: ['ignore_partner_concerns', 'unfair_equity_split']\n    },\n    effects: {\n      playerStats: { emotion: -40, karma: -20, reputation: -25 },\n      teamImpact: 'Team splits loyalty, communication breaks down',\n      businessImpact: 'Growth freezes, investor confidence drops'\n    },\n    counterCards: ['forgiveness_card', 'trust_rebuilding']\n  },\n  {\n    id: 'self_doubt_boss',\n    name: 'Self-Doubt Shadow',\n    type: 'self_doubt',\n    description: 'Repeated product failures lock clarity XP and create decision paralysis.',\n    triggerConditions: {\n      emotion: 25,\n      loopScore: 35,\n      specificActions: ['ignore_feedback', 'perfectionism', 'fear_of_failure']\n    },\n    effects: {\n      playerStats: { logic: -25, emotion: -15, clarityXP: -50 },\n      teamImpact: 'Team loses confidence in leadership',\n      businessImpact: 'Innovation stops, market share lost'\n    },\n    counterCards: ['reflection_unlock', 'growth_mindset']\n  },\n  {\n    id: 'ego_flame',\n    name: 'Ego Flame',\n    type: 'ego',\n    description: 'Big wins lead to over-risking and eventual loss of everything.',\n    triggerConditions: {\n      reputation: 90,\n      loopScore: 20,\n      specificActions: ['ignore_advice', 'overconfident_risks', 'dismissive_attitude']\n    },\n    effects: {\n      playerStats: { karma: -30, logic: -20, reputation: -40 },\n      teamImpact: 'Team becomes yes-men or rebels',\n      businessImpact: 'Catastrophic decisions lead to losses'\n    },\n    counterCards: ['humility_practice', 'advisors_council']\n  },\n  {\n    id: 'greed_overload',\n    name: 'Greed Overload',\n    type: 'greed',\n    description: 'Crypto boom mentality leads to all-in bets and eventual crash.',\n    triggerConditions: {\n      karma: 20,\n      loopScore: 40,\n      specificActions: ['all_in_investments', 'ignore_ethics', 'exploit_opportunities']\n    },\n    effects: {\n      playerStats: { karma: -50, emotion: -30, clarityXP: -100 },\n      teamImpact: 'Ethical team members quit',\n      businessImpact: 'Financial crash, reputation destroyed'\n    },\n    counterCards: ['root_value_recall', 'ethical_framework']\n  }\n];\n\nexport const strategyCards: StrategyCard[] = [\n  {\n    id: 'delegation_card',\n    name: 'Delegation Mastery',\n    description: 'Learn to delegate effectively without micromanaging.',\n    type: 'delegation',\n    effects: {\n      playerStats: { stress: -20, energy: 15, clarityXP: 25 },\n      teamBonus: 20,\n      businessBonus: 15\n    },\n    unlockConditions: {\n      clarityXP: 75,\n      founderTrait: 'visionary'\n    }\n  },\n  {\n    id: 'forgiveness_card',\n    name: 'Forgiveness Practice',\n    description: 'Release resentment and rebuild trust after betrayal.',\n    type: 'forgiveness',\n    effects: {\n      playerStats: { emotion: 30, karma: 20, clarityXP: 40 },\n      teamBonus: 25\n    },\n    unlockConditions: {\n      defeatedBosses: ['betrayal_boss']\n    }\n  },\n  {\n    id: 'reflection_unlock',\n    name: 'Deep Reflection',\n    description: 'Regular self-reflection prevents decision paralysis.',\n    type: 'reflection',\n    effects: {\n      playerStats: { logic: 20, emotion: 15, clarityXP: 50 },\n      businessBonus: 20\n    },\n    unlockConditions: {\n      clarityXP: 100,\n      founderTrait: 'reflective'\n    }\n  },\n  {\n    id: 'humility_practice',\n    name: 'Humility Practice',\n    description: 'Stay grounded despite success and listen to others.',\n    type: 'humility',\n    effects: {\n      playerStats: { karma: 25, reputation: 15, clarityXP: 35 },\n      teamBonus: 30\n    },\n    unlockConditions: {\n      defeatedBosses: ['ego_flame']\n    }\n  },\n  {\n    id: 'root_value_recall',\n    name: 'Root Value Recall',\n    description: 'Remember why you started and realign with core values.',\n    type: 'values',\n    effects: {\n      playerStats: { karma: 40, emotion: 25, clarityXP: 60 },\n      teamBonus: 35,\n      businessBonus: 25\n    },\n    unlockConditions: {\n      defeatedBosses: ['greed_overload']\n    }\n  },\n  {\n    id: 'self_care_practice',\n    name: 'Self-Care Mastery',\n    description: 'Prioritize health and well-being for sustainable performance.',\n    type: 'reflection',\n    effects: {\n      playerStats: { stress: -30, energy: 25, emotion: 20 },\n      teamBonus: 15\n    },\n    unlockConditions: {\n      clarityXP: 50\n    }\n  },\n  {\n    id: 'trust_rebuilding',\n    name: 'Trust Rebuilding',\n    description: 'Systematic approach to rebuilding broken relationships.',\n    type: 'forgiveness',\n    effects: {\n      playerStats: { emotion: 20, karma: 15, reputation: 10 },\n      teamBonus: 40\n    },\n    unlockConditions: {\n      clarityXP: 150\n    }\n  },\n  {\n    id: 'growth_mindset',\n    name: 'Growth Mindset',\n    description: 'View failures as learning opportunities, not defeats.',\n    type: 'reflection',\n    effects: {\n      playerStats: { logic: 25, emotion: 20, clarityXP: 45 },\n      businessBonus: 30\n    },\n    unlockConditions: {\n      clarityXP: 200\n    }\n  }\n];\n\n// Helper functions\nexport const getUnlockedSectors = (clarityXP: number, sectorsCompleted: number, loopScore: number): IndustrySector[] => {\n  return industrySectors.filter(sector => \n    clarityXP >= sector.unlockRequirements.clarityXP &&\n    sectorsCompleted >= sector.unlockRequirements.sectorsCompleted &&\n    loopScore <= sector.unlockRequirements.maxLoopScore\n  );\n};\n\nexport const checkLoopBossTriggers = (playerStats: any, actions: string[]): LoopBoss | null => {\n  for (const boss of loopBosses) {\n    const { triggerConditions } = boss;\n    let triggered = true;\n\n    // Check stat conditions\n    if (triggerConditions.stress && playerStats.stress < triggerConditions.stress) triggered = false;\n    if (triggerConditions.emotion && playerStats.emotion > triggerConditions.emotion) triggered = false;\n    if (triggerConditions.karma && playerStats.karma > triggerConditions.karma) triggered = false;\n    if (triggerConditions.loopScore && playerStats.loopScore < triggerConditions.loopScore) triggered = false;\n\n    // Check specific actions\n    if (triggerConditions.specificActions) {\n      const hasRequiredActions = triggerConditions.specificActions.some(action => actions.includes(action));\n      if (!hasRequiredActions) triggered = false;\n    }\n\n    if (triggered) return boss;\n  }\n  return null;\n};\n\nexport const getAvailableStrategyCards = (playerStats: any, defeatedBosses: string[]): StrategyCard[] => {\n  return strategyCards.filter(card => {\n    const { unlockConditions } = card;\n    \n    if (unlockConditions.clarityXP && playerStats.clarityXP < unlockConditions.clarityXP) return false;\n    if (unlockConditions.founderTrait && playerStats.founderTrait !== unlockConditions.founderTrait) return false;\n    if (unlockConditions.defeatedBosses) {\n      const hasRequiredBosses = unlockConditions.defeatedBosses.every(boss => defeatedBosses.includes(boss));\n      if (!hasRequiredBosses) return false;\n    }\n    \n    return true;\n  });\n};","size_bytes":10746},"client/src/lib/data/teamScenarios.ts":{"content":"import { GameScenario } from './scenarios';\n\nexport interface TeamScenario extends GameScenario {\n  requiredRole?: string;\n  triggerEmployee?: string;\n  teamImpact?: {\n    roleId: string;\n    effects: {\n      performance?: number;\n      loyalty?: number;\n      stress?: number;\n    };\n  }[];\n}\n\nexport const teamBasedScenarios: TeamScenario[] = [\n  // Executive Department Scenarios\n  {\n    id: 1001,\n    section: 'Business',\n    title: 'Strategic Vision Alignment',\n    description: 'Your Chief Executive Officer presents a bold new strategic direction that could revolutionize the company, but requires significant investment.',\n    urgency: 'high',\n    requiredRole: 'Executive',\n    options: [\n      {\n        id: 'vision_approve',\n        text: 'Approve the strategic vision and allocate resources',\n        effects: {\n          bankBalance: -100000,\n          emotion: 10,\n          logic: 15,\n          reputation: 20\n        },\n        description: 'Bold leadership decision with long-term benefits'\n      },\n      {\n        id: 'vision_modify',\n        text: 'Request modifications to make it more conservative',\n        effects: {\n          bankBalance: -50000,\n          emotion: 5,\n          logic: 10,\n          stress: 5\n        },\n        description: 'Balanced approach with moderate impact'\n      },\n      {\n        id: 'vision_reject',\n        text: 'Reject the proposal and maintain current strategy',\n        effects: {\n          emotion: -10,\n          logic: 5,\n          stress: 10\n        },\n        description: 'Safe but potentially demotivating choice'\n      }\n    ],\n    tags: ['strategy', 'executive', 'leadership'],\n    teamImpact: [\n      {\n        roleId: 'ceo',\n        effects: { loyalty: 15, performance: 10 }\n      }\n    ]\n  },\n\n  // Operations Department Scenarios\n  {\n    id: 1002,\n    section: 'Business',\n    title: 'Operations Efficiency Crisis',\n    description: 'Your Operations Manager reports critical inefficiencies in the workflow that are costing the company significant money daily.',\n    urgency: 'high',\n    requiredRole: 'Operations',\n    options: [\n      {\n        id: 'ops_overhaul',\n        text: 'Implement complete operational overhaul',\n        effects: {\n          bankBalance: -75000,\n          mainIncome: 25000,\n          logic: 20,\n          stress: 15\n        },\n        description: 'Expensive but transformative solution'\n      },\n      {\n        id: 'ops_gradual',\n        text: 'Implement gradual improvements over time',\n        effects: {\n          bankBalance: -30000,\n          mainIncome: 10000,\n          logic: 10,\n          stress: 5\n        },\n        description: 'Moderate investment with steady returns'\n      },\n      {\n        id: 'ops_delay',\n        text: 'Delay improvements to preserve cash flow',\n        effects: {\n          mainIncome: -15000,\n          stress: 20,\n          logic: -5\n        },\n        description: 'Short-term savings with long-term costs'\n      }\n    ],\n    tags: ['operations', 'efficiency', 'management'],\n    teamImpact: [\n      {\n        roleId: 'operations_manager',\n        effects: { performance: 15, stress: -10 }\n      }\n    ]\n  },\n\n  // Innovation Department Scenarios\n  {\n    id: 1003,\n    section: 'Innovation',\n    title: 'Breakthrough Technology Discovery',\n    description: 'Your Innovation team has discovered a potentially game-changing technology that could disrupt the entire industry.',\n    urgency: 'medium',\n    requiredRole: 'Innovation',\n    options: [\n      {\n        id: 'tech_patent',\n        text: 'Invest heavily in patents and development',\n        effects: {\n          bankBalance: -150000,\n          sideIncome: 50000,\n          logic: 25,\n          reputation: 30\n        },\n        description: 'High risk, high reward innovation play'\n      },\n      {\n        id: 'tech_partner',\n        text: 'Partner with established companies',\n        effects: {\n          bankBalance: -50000,\n          sideIncome: 20000,\n          logic: 15,\n          reputation: 10\n        },\n        description: 'Shared risk and shared rewards'\n      },\n      {\n        id: 'tech_shelf',\n        text: 'Shelve the technology for now',\n        effects: {\n          emotion: -15,\n          logic: -10,\n          stress: 10\n        },\n        description: 'Conservative approach missing opportunity'\n      }\n    ],\n    tags: ['innovation', 'technology', 'disruption'],\n    teamImpact: [\n      {\n        roleId: 'innovation_lead',\n        effects: { performance: 20, loyalty: 15 }\n      }\n    ]\n  },\n\n  // Public Relations Scenarios\n  {\n    id: 1004,\n    section: 'Personal',\n    title: 'Public Relations Crisis',\n    description: 'Your PR team faces a potential scandal that could damage the company reputation significantly.',\n    urgency: 'high',\n    requiredRole: 'Public',\n    options: [\n      {\n        id: 'pr_transparent',\n        text: 'Be completely transparent and apologetic',\n        effects: {\n          emotion: 10,\n          reputation: -10,\n          karma: 15,\n          stress: 20\n        },\n        description: 'Honest approach with short-term pain'\n      },\n      {\n        id: 'pr_deflect',\n        text: 'Deflect and minimize the issue',\n        effects: {\n          reputation: -5,\n          karma: -10,\n          stress: 15,\n          logic: 5\n        },\n        description: 'Damage control with ethical concerns'\n      },\n      {\n        id: 'pr_aggressive',\n        text: 'Launch aggressive counter-campaign',\n        effects: {\n          bankBalance: -80000,\n          reputation: 5,\n          karma: -5,\n          stress: 25\n        },\n        description: 'Expensive but potentially effective'\n      }\n    ],\n    tags: ['public_relations', 'crisis', 'reputation'],\n    teamImpact: [\n      {\n        roleId: 'pr_manager',\n        effects: { stress: 25, performance: 10 }\n      }\n    ]\n  },\n\n  // Defense/Security Scenarios\n  {\n    id: 1005,\n    section: 'Business',\n    title: 'Cybersecurity Breach Threat',\n    description: 'Your Security team has detected suspicious activity that could lead to a major data breach.',\n    urgency: 'high',\n    requiredRole: 'Defense',\n    options: [\n      {\n        id: 'security_upgrade',\n        text: 'Immediately upgrade all security systems',\n        effects: {\n          bankBalance: -120000,\n          reputation: 10,\n          logic: 20,\n          stress: 10\n        },\n        description: 'Comprehensive security overhaul'\n      },\n      {\n        id: 'security_monitor',\n        text: 'Increase monitoring and hire consultants',\n        effects: {\n          bankBalance: -40000,\n          logic: 10,\n          stress: 15\n        },\n        description: 'Moderate response with ongoing costs'\n      },\n      {\n        id: 'security_minimal',\n        text: 'Implement minimal security patches',\n        effects: {\n          bankBalance: -10000,\n          stress: 25,\n          logic: -5\n        },\n        description: 'Risky cost-cutting measure'\n      }\n    ],\n    tags: ['security', 'cyber', 'defense'],\n    teamImpact: [\n      {\n        roleId: 'security_lead',\n        effects: { stress: 20, performance: 15 }\n      }\n    ]\n  },\n\n  // Culture Department Scenarios\n  {\n    id: 1006,\n    section: 'HR/Team',\n    title: 'Company Culture Transformation',\n    description: 'Your Culture team proposes a comprehensive wellness and culture program to improve employee satisfaction.',\n    urgency: 'medium',\n    requiredRole: 'Culture',\n    options: [\n      {\n        id: 'culture_full',\n        text: 'Implement comprehensive culture program',\n        effects: {\n          bankBalance: -60000,\n          emotion: 25,\n          stress: -15,\n          reputation: 15\n        },\n        description: 'Investment in employee wellbeing'\n      },\n      {\n        id: 'culture_basic',\n        text: 'Start with basic wellness initiatives',\n        effects: {\n          bankBalance: -20000,\n          emotion: 10,\n          stress: -5,\n          reputation: 5\n        },\n        description: 'Modest beginning with positive impact'\n      },\n      {\n        id: 'culture_postpone',\n        text: 'Postpone culture initiatives',\n        effects: {\n          emotion: -10,\n          stress: 15,\n          reputation: -5\n        },\n        description: 'Focus on business priorities first'\n      }\n    ],\n    tags: ['culture', 'wellness', 'team'],\n    teamImpact: [\n      {\n        roleId: 'culture_lead',\n        effects: { loyalty: 20, performance: 10 }\n      }\n    ]\n  },\n\n  // Strategy Department Scenarios\n  {\n    id: 1007,\n    section: 'Business',\n    title: 'Market Expansion Opportunity',\n    description: 'Your Strategy team identifies a lucrative new market that could triple your revenue within two years.',\n    urgency: 'medium',\n    requiredRole: 'Strategy',\n    options: [\n      {\n        id: 'expansion_aggressive',\n        text: 'Pursue aggressive market expansion',\n        effects: {\n          bankBalance: -200000,\n          sideIncome: 75000,\n          logic: 20,\n          reputation: 25,\n          stress: 20\n        },\n        description: 'Bold expansion with significant investment'\n      },\n      {\n        id: 'expansion_cautious',\n        text: 'Test the market with limited investment',\n        effects: {\n          bankBalance: -75000,\n          sideIncome: 25000,\n          logic: 15,\n          reputation: 10,\n          stress: 10\n        },\n        description: 'Cautious approach with manageable risk'\n      },\n      {\n        id: 'expansion_research',\n        text: 'Continue research without commitment',\n        effects: {\n          bankBalance: -15000,\n          logic: 10,\n          stress: 5\n        },\n        description: 'Information gathering without action'\n      }\n    ],\n    tags: ['strategy', 'expansion', 'market'],\n    teamImpact: [\n      {\n        roleId: 'strategy_lead',\n        effects: { performance: 15, loyalty: 10 }\n      }\n    ]\n  }\n];\n\nexport const getTeamScenarios = (teamMembers: any[]): TeamScenario[] => {\n  const availableRoles = teamMembers.map(member => member.roleId);\n  return teamBasedScenarios.filter(scenario => \n    !scenario.requiredRole || availableRoles.includes(scenario.requiredRole)\n  );\n};\n\nexport const getScenarioByTeamMember = (roleId: string): TeamScenario[] => {\n  return teamBasedScenarios.filter(scenario => scenario.requiredRole === roleId);\n};","size_bytes":10311},"client/src/lib/stores/useMinimalStore.ts":{"content":"import { create } from 'zustand';\n\ninterface MinimalGameState {\n  gameStarted: boolean;\n  startGame: () => void;\n}\n\nexport const useMinimalStore = create<MinimalGameState>((set) => ({\n  gameStarted: false,\n  startGame: () => set({ gameStarted: true }),\n}));","size_bytes":257},"client/src/components/game/sections/EnhancedTeamSection.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Users, \n  TrendingUp, \n  Award, \n  UserPlus, \n  Star, \n  DollarSign, \n  AlertCircle, \n  Heart,\n  Brain,\n  Zap,\n  Target,\n  Shield,\n  Coffee,\n  AlertTriangle,\n  CheckCircle,\n  Eye,\n  Crown,\n  Briefcase,\n  Building,\n  Lightbulb,\n  Palette,\n  MessageCircle\n} from 'lucide-react';\nimport { useWealthSprintGame } from '@/lib/stores/useWealthSprintGame';\nimport { teamRoles, TeamRole, getDepartments, getRolesByDepartment, getUnlockedRoles, generateRandomTeamMember } from '@/lib/data/teamRoles';\n\n// Status color mapping\nconst statusColors = {\n  'Stable': '#22C55E',\n  'Active': '#3B82F6', \n  'Warning': '#F59E0B',\n  'Critical': '#EF4444',\n  'Overloaded': '#DC2626',\n  'In Loop': '#8B5CF6'\n};\n\n// Department icons\nconst departmentIcons = {\n  'Executive': Crown,\n  'Operations': Briefcase,\n  'Public': MessageCircle,\n  'Culture': Heart,\n  'Defense': Shield,\n  'Innovation': Lightbulb,\n  'Strategy': Target\n};\n\nexport default function EnhancedTeamSection() {\n  const { \n    teamMembers, \n    financialData, \n    playerStats,\n    hireEmployee, \n    promoteEmployee, \n    giveBonus, \n    fireEmployee,\n    addGameEvent,\n    gainClarityXP,\n    increaseLoopScore\n  } = useWealthSprintGame();\n\n  const [selectedRole, setSelectedRole] = useState<TeamRole | null>(null);\n  const [selectedMember, setSelectedMember] = useState<string | null>(null);\n  const [showHireDialog, setShowHireDialog] = useState(false);\n  const [selectedDepartment, setSelectedDepartment] = useState<string>('All');\n\n  const activeTeamMembers = teamMembers.filter(member => member.isActive);\n  const departments = getDepartments();\n  const unlockedRoles = getUnlockedRoles(playerStats.clarityXP, 0, playerStats.defeatedBosses);\n\n  // Calculate team metrics\n  const teamClarityScore = activeTeamMembers.reduce((sum, member) => \n    sum + (member.clarityContribution || member.performance), 0) / Math.max(activeTeamMembers.length, 1);\n  \n  const totalTeamCost = activeTeamMembers.reduce((sum, member) => sum + member.salary, 0);\n  const averageLoopRisk = activeTeamMembers.reduce((sum, member) => \n    sum + (member.loopRisk || member.stress), 0) / Math.max(activeTeamMembers.length, 1);\n\n  // Filter members by department\n  const filteredMembers = selectedDepartment === 'All' \n    ? activeTeamMembers \n    : activeTeamMembers.filter(member => member.department === selectedDepartment);\n\n  const handleHireEmployee = (roleId: string) => {\n    const role = teamRoles.find(r => r.id === roleId);\n    if (!role) return;\n\n    if (financialData.bankBalance < role.baseSalary * 0.1) {\n      addGameEvent(`Insufficient funds to hire ${role.name}. Need ₹${(role.baseSalary * 0.1).toLocaleString()} signing bonus.`);\n      return;\n    }\n\n    const newMember = generateRandomTeamMember(roleId);\n    const memberId = `team_${Date.now()}`;\n    \n    hireEmployee(memberId, newMember.name, newMember.role, role.baseSalary, newMember.department);\n    gainClarityXP(5); // Hiring gives clarity XP\n    setShowHireDialog(false);\n    addGameEvent(`🎉 Hired ${newMember.name} as ${role.name} for ₹${role.baseSalary.toLocaleString()}/year`);\n  };\n\n  const RoleCard = ({ role, isUnlocked }: { role: TeamRole; isUnlocked: boolean }) => {\n    const existingMember = activeTeamMembers.find(member => member.roleId === role.id);\n    \n    return (\n      <Card \n        className={`cursor-pointer transition-all duration-300 hover:scale-105 ${\n          isUnlocked ? 'hover:shadow-lg' : 'opacity-50'\n        } ${existingMember ? 'ring-2 ring-green-500' : ''}`}\n        style={{ \n          borderColor: role.color,\n          borderWidth: '2px',\n          backgroundColor: '#FFE4C4CC',\n          color: 'white'\n        }}\n        onClick={() => isUnlocked && setSelectedRole(role)}\n      >\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-2xl\">{role.emoji}</span>\n              <div>\n                <CardTitle className=\"text-sm font-bold text-white\">\n                  {role.name}\n                </CardTitle>\n                <p className=\"text-xs text-white opacity-80\">{role.department}</p>\n              </div>\n            </div>\n            {existingMember && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                Hired\n              </Badge>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-white opacity-80\">Salary:</span>\n              <span className=\"font-medium text-white\">₹{role.baseSalary.toLocaleString()}</span>\n            </div>\n            <div className=\"text-xs\">\n              <span className=\"font-medium text-white\">{role.theme}</span>\n            </div>\n            <p className=\"text-xs text-white opacity-80 line-clamp-2\">\n              {role.description}\n            </p>\n            {!isUnlocked && role.unlockRequirement && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Needs {role.unlockRequirement.clarityXP || 0} Clarity XP\n              </Badge>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const TeamMemberCard = ({ member }: { member: any }) => {\n    const role = teamRoles.find(r => r.id === member.roleId);\n    if (!role) return null;\n\n    const statusColor = statusColors[member.status as keyof typeof statusColors] || statusColors.Active;\n\n    return (\n      <Card \n        className=\"cursor-pointer hover:shadow-md transition-all duration-200\"\n        onClick={() => setSelectedMember(member.id)}\n      >\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar \n              className=\"w-12 h-12\" \n              style={{ backgroundColor: `${role.color}20`, border: `2px solid ${role.color}` }}\n            >\n              <AvatarFallback style={{ color: role.color }}>\n                {role.emoji}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-semibold text-sm\">{member.name}</h3>\n                <Badge \n                  variant=\"outline\" \n                  className=\"text-xs\"\n                  style={{ borderColor: statusColor, color: statusColor }}\n                >\n                  {member.status}\n                </Badge>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">{role.name}</p>\n              <p className=\"text-xs\" style={{ color: role.color }}>{member.emotionalTrait}</p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n            <div>\n              <span className=\"text-muted-foreground\">Performance:</span>\n              <Progress value={member.performance} className=\"h-1 mt-1\" />\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Stress:</span>\n              <Progress \n                value={member.stress} \n                className=\"h-1 mt-1\"\n                style={{ backgroundColor: member.stress > 70 ? '#fee2e2' : undefined }}\n              />\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Loyalty:</span>\n              <Progress value={member.loyalty} className=\"h-1 mt-1\" />\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Loop Risk:</span>\n              <Progress \n                value={member.loopRisk || member.stress} \n                className=\"h-1 mt-1\"\n                style={{ backgroundColor: (member.loopRisk || member.stress) > 60 ? '#fef3c7' : undefined }}\n              />\n            </div>\n          </div>\n          <Separator className=\"my-2\" />\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-muted-foreground\">Salary:</span>\n            <span className=\"font-medium\">₹{member.salary.toLocaleString()}/yr</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Team+ Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n            Team+ Management\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Build your emotional business empire with color-coded roles\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Button\n            onClick={() => setShowHireDialog(true)}\n            className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n          >\n            <UserPlus className=\"w-4 h-4 mr-2\" />\n            Hire Team\n          </Button>\n        </div>\n      </div>\n\n      {/* Team Metrics Dashboard */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Users className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Team Size</p>\n                <p className=\"text-2xl font-bold\">{activeTeamMembers.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <Brain className=\"w-5 h-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Clarity Score</p>\n                <p className=\"text-2xl font-bold\">{Math.round(teamClarityScore)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <DollarSign className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Team Cost</p>\n                <p className=\"text-2xl font-bold\">₹{Math.round(totalTeamCost / 1000)}K</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-2 rounded-lg ${averageLoopRisk > 60 ? 'bg-red-100' : 'bg-green-100'}`}>\n                <AlertTriangle className={`w-5 h-5 ${averageLoopRisk > 60 ? 'text-red-600' : 'text-green-600'}`} />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Loop Risk</p>\n                <p className=\"text-2xl font-bold\">{Math.round(averageLoopRisk)}%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs value={selectedDepartment} onValueChange={setSelectedDepartment} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-8\">\n          <TabsTrigger value=\"All\">All</TabsTrigger>\n          {departments.map(dept => {\n            const Icon = departmentIcons[dept as keyof typeof departmentIcons] || Briefcase;\n            return (\n              <TabsTrigger key={dept} value={dept} className=\"flex items-center gap-1\">\n                <Icon className=\"w-3 h-3\" />\n                {dept}\n              </TabsTrigger>\n            );\n          })}\n        </TabsList>\n\n        <TabsContent value={selectedDepartment} className=\"space-y-4\">\n          {/* Current Team Members */}\n          {filteredMembers.length > 0 && (\n            <div>\n              <h3 className=\"text-lg font-semibold mb-3\">Current Team</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {filteredMembers.map(member => (\n                  <TeamMemberCard key={member.id} member={member} />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Available Roles */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">Available Roles</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {(selectedDepartment === 'All' ? unlockedRoles : getRolesByDepartment(selectedDepartment))\n                .filter(role => unlockedRoles.some(ur => ur.id === role.id))\n                .map(role => (\n                  <RoleCard \n                    key={role.id} \n                    role={role} \n                    isUnlocked={unlockedRoles.some(ur => ur.id === role.id)}\n                  />\n                ))}\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Role Details Dialog */}\n      <Dialog open={!!selectedRole} onOpenChange={() => setSelectedRole(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          {selectedRole && (\n            <>\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-3\">\n                  <span className=\"text-3xl\">{selectedRole.emoji}</span>\n                  <div>\n                    <span style={{ color: selectedRole.color }}>{selectedRole.name}</span>\n                    <p className=\"text-sm text-muted-foreground font-normal\">\n                      {selectedRole.department} Department\n                    </p>\n                  </div>\n                </DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Description</h4>\n                  <p className=\"text-sm text-muted-foreground\">{selectedRole.description}</p>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Theme</h4>\n                    <Badge variant=\"outline\" style={{ borderColor: selectedRole.color, color: selectedRole.color }}>\n                      {selectedRole.theme}\n                    </Badge>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Base Salary</h4>\n                    <p className=\"text-lg font-bold\">₹{selectedRole.baseSalary.toLocaleString()}</p>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Key Skills</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedRole.skills.map(skill => (\n                      <Badge key={skill} variant=\"secondary\">{skill}</Badge>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Emotional Profile</h4>\n                  <div className=\"space-y-2\">\n                    <div>\n                      <span className=\"text-sm font-medium\">Trait: </span>\n                      <span className=\"text-sm\">{selectedRole.emotionalTrait}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium\">Loop Vulnerability: </span>\n                      <span className=\"text-sm text-orange-600\">{selectedRole.loopVulnerability}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button \n                    onClick={() => handleHireEmployee(selectedRole.id)}\n                    className=\"flex-1\"\n                    style={{ backgroundColor: selectedRole.color }}\n                    disabled={activeTeamMembers.some(member => member.roleId === selectedRole.id)}\n                  >\n                    {activeTeamMembers.some(member => member.roleId === selectedRole.id) \n                      ? 'Already Hired' \n                      : 'Hire Now'\n                    }\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setSelectedRole(null)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Hire Dialog */}\n      <Dialog open={showHireDialog} onOpenChange={setShowHireDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" style={{ backgroundColor: '#FFE4C4CC', color: 'white' }}>\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Hire New Team Member</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {unlockedRoles.map(role => (\n              <RoleCard \n                key={role.id} \n                role={role} \n                isUnlocked={true}\n              />\n            ))}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18015},"client/src/components/game/sections/IndustrySectorsSection.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { \n  Lock, \n  Unlock, \n  TrendingUp, \n  Users, \n  DollarSign, \n  AlertTriangle,\n  Star,\n  Briefcase,\n  CheckCircle,\n  Clock\n} from 'lucide-react';\nimport { useWealthSprintGame } from '@/lib/stores/useWealthSprintGame';\nimport { industrySectors, getUnlockedSectors } from '@/lib/data/industrySectors';\n\nexport default function IndustrySectorsSection() {\n  const { \n    playerStats, \n    financialData,\n    addGameEvent,\n    gainClarityXP,\n    increaseLoopScore,\n    addRecentAction,\n    updateFinancialData\n  } = useWealthSprintGame();\n\n  const [selectedSector, setSelectedSector] = useState<string | null>(null);\n  const [showSectorDetails, setShowSectorDetails] = useState(false);\n\n  // Calculate unlocked sectors based on player progress\n  const unlockedSectors = getUnlockedSectors(\n    playerStats.clarityXP, \n    0, // You can track completed sectors in player stats\n    playerStats.loopScore\n  );\n\n  const getSectorProgress = (sectorId: string) => {\n    // Simulate sector progress based on player actions\n    const baseProgress = Math.min(100, (playerStats.clarityXP / 10) + Math.random() * 20);\n    return Math.floor(baseProgress);\n  };\n\n  const getSectorRevenue = (sectorId: string) => {\n    // Calculate potential revenue based on sector and player stats\n    const baseRevenue = {\n      'fast_food': 500000,\n      'logistics': 750000,\n      'tech_startups': 2000000,\n      'ai_saas': 5000000,\n      'ecommerce': 1500000,\n      'crypto_web3': 10000000,\n      'media_empire': 3000000,\n      'healthcare': 8000000,\n      'edtech': 2500000\n    };\n    \n    return baseRevenue[sectorId as keyof typeof baseRevenue] || 500000;\n  };\n\n  const getLoopChallenge = (sectorId: string) => {\n    const challenges = {\n      'fast_food': 'Speed vs Quality Loop - Racing to scale compromises food quality',\n      'logistics': 'Burnout Loop - Expanding too fast leads to operational chaos',\n      'tech_startups': 'Shiny Object Syndrome - Losing focus chasing new features',\n      'ai_saas': 'Ethics vs Profit - Choosing revenue over user privacy',\n      'ecommerce': 'Fake Growth Loop - Inflated metrics hide real problems',\n      'crypto_web3': 'Greed Overload - Bull market mentality leads to over-risking',\n      'media_empire': 'Fame Addiction - Chasing virality over meaningful content',\n      'healthcare': 'Guilt Loop - Balancing patient care with business viability',\n      'edtech': 'Self-Worth Loop - Taking student failures personally'\n    };\n    \n    return challenges[sectorId as keyof typeof challenges] || 'Unknown challenge';\n  };\n\n  const handleSectorInvestment = (sectorId: string) => {\n    const sector = industrySectors.find(s => s.id === sectorId);\n    if (!sector) return;\n\n    const isUnlocked = unlockedSectors.some(s => s.id === sectorId);\n    if (!isUnlocked) {\n      addGameEvent({\n        id: `sector_locked_${sectorId}_${Date.now()}`,\n        type: 'warning',\n        title: 'Sector Locked',\n        description: `You need ${sector.unlockRequirements.clarityXP} Clarity XP and max ${sector.unlockRequirements.maxLoopScore} Loop Score to unlock ${sector.name}.`,\n        timestamp: new Date()\n      });\n      return;\n    }\n\n    const investmentAmount = 200000; // Base investment\n    if (financialData.bankBalance < investmentAmount) {\n      addGameEvent({\n        id: `insufficient_funds_${sectorId}_${Date.now()}`,\n        type: 'warning',\n        title: '🚨 Insufficient Balance',\n        description: `You need ₹${investmentAmount.toLocaleString()} to invest in ${sector.name}. Current balance: ₹${financialData.bankBalance.toLocaleString()}`,\n        timestamp: new Date()\n      });\n      return;\n    }\n\n    // Add confirmation dialog\n    const confirmed = window.confirm(\n      `Confirm Investment\\n\\nSector: ${sector.name}\\nAmount: ₹${investmentAmount.toLocaleString()}\\nExpected Revenue: ₹${getSectorRevenue(sectorId).toLocaleString()}/year\\n\\nProceed with investment?`\n    );\n\n    if (!confirmed) return;\n\n    // Deduct from bank balance\n    updateFinancialData({\n      bankBalance: financialData.bankBalance - investmentAmount\n    });\n\n    // Track this as a business action\n    addRecentAction(`invest_${sectorId}`);\n    \n    // Gain clarity XP for smart business decisions\n    if (playerStats.loopScore < 50) {\n      gainClarityXP(30, `Strategic investment in ${sector.name}`);\n    } else {\n      increaseLoopScore(10, `Risky expansion while in emotional loops`);\n    }\n\n    addGameEvent({\n      id: `sector_investment_${sectorId}_${Date.now()}`,\n      type: 'achievement',\n      title: '🎯 New Sector Entered',\n      description: `Invested ₹${investmentAmount.toLocaleString()} in ${sector.name}. Bank balance: ₹${(financialData.bankBalance - investmentAmount).toLocaleString()}`,\n      timestamp: new Date()\n    });\n  };\n\n  const getUnlockRequirementsText = (sector: any) => {\n    const missing = [];\n    if (playerStats.clarityXP < sector.unlockRequirements.clarityXP) {\n      missing.push(`${sector.unlockRequirements.clarityXP - playerStats.clarityXP} more Clarity XP`);\n    }\n    if (playerStats.loopScore > sector.unlockRequirements.maxLoopScore) {\n      missing.push(`Reduce Loop Score to ${sector.unlockRequirements.maxLoopScore}`);\n    }\n    return missing.join(', ');\n  };\n\n  return (\n    <div className=\"space-y-6 p-4 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Industry Sectors</h1>\n        <p className=\"text-gray-600 mb-4\">\n          Build your empire across multiple sectors. Each sector mirrors a cognitive challenge.\n        </p>\n        <div className=\"flex justify-center gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Star className=\"h-4 w-4 text-yellow-500\" />\n            <span>Clarity XP: {playerStats.clarityXP}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n            <span>Loop Score: {playerStats.loopScore}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Spiral Layout Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {industrySectors.map((sector, index) => {\n          const isUnlocked = unlockedSectors.some(s => s.id === sector.id);\n          const progress = getSectorProgress(sector.id);\n          const revenue = getSectorRevenue(sector.id);\n          const challenge = getLoopChallenge(sector.id);\n\n          return (\n            <Card \n              key={sector.id}\n              className={`relative overflow-hidden transition-all duration-300 cursor-pointer ${\n                isUnlocked \n                  ? 'hover:shadow-xl hover:scale-105 border-green-200 bg-gradient-to-br from-white to-green-50' \n                  : 'border-gray-200 bg-gradient-to-br from-gray-50 to-gray-100 opacity-75'\n              }`}\n              onClick={() => {\n                setSelectedSector(sector.id);\n                setShowSectorDetails(true);\n              }}\n            >\n              {/* Unlock Status Badge */}\n              <div className=\"absolute top-2 right-2\">\n                {isUnlocked ? (\n                  <Badge className=\"bg-green-100 text-green-800\">\n                    <Unlock className=\"h-3 w-3 mr-1\" />\n                    Unlocked\n                  </Badge>\n                ) : (\n                  <Badge variant=\"secondary\">\n                    <Lock className=\"h-3 w-3 mr-1\" />\n                    Locked\n                  </Badge>\n                )}\n              </div>\n\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <div className=\"text-3xl\">{sector.icon}</div>\n                  <div>\n                    <CardTitle className=\"text-lg\">{sector.name}</CardTitle>\n                    <p className=\"text-xs text-gray-500\">Sector {index + 1}</p>\n                  </div>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600 line-clamp-3\">\n                  {sector.description}\n                </p>\n\n                {/* Progress Bar */}\n                {isUnlocked && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Progress</span>\n                      <span>{progress}%</span>\n                    </div>\n                    <Progress value={progress} className=\"h-2\" />\n                  </div>\n                )}\n\n                {/* Revenue Potential */}\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Revenue Potential:</span>\n                  <span className=\"font-semibold text-green-600\">\n                    ₹{(revenue / 100000).toFixed(1)}L\n                  </span>\n                </div>\n\n                {/* Loop Challenge Preview */}\n                <div className=\"p-2 bg-orange-50 rounded-lg\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-orange-500 mt-0.5 flex-shrink-0\" />\n                    <p className=\"text-xs text-orange-700 line-clamp-2\">\n                      {challenge}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Action Button */}\n                <div className=\"pt-2\">\n                  {isUnlocked ? (\n                    <Button \n                      className=\"w-full\" \n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleSectorInvestment(sector.id);\n                      }}\n                    >\n                      <Briefcase className=\"h-4 w-4 mr-2\" />\n                      Invest ₹2L\n                    </Button>\n                  ) : (\n                    <div className=\"text-center\">\n                      <p className=\"text-xs text-gray-500 mb-2\">\n                        Requires: {getUnlockRequirementsText(sector)}\n                      </p>\n                      <Button variant=\"outline\" size=\"sm\" disabled className=\"w-full\">\n                        <Lock className=\"h-4 w-4 mr-2\" />\n                        Locked\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Sector Details Modal */}\n      <Dialog open={showSectorDetails} onOpenChange={setShowSectorDetails}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-3\">\n              {selectedSector && (\n                <>\n                  <span className=\"text-2xl\">\n                    {industrySectors.find(s => s.id === selectedSector)?.icon}\n                  </span>\n                  {industrySectors.find(s => s.id === selectedSector)?.name}\n                </>\n              )}\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedSector && (\n            <div className=\"space-y-4\">\n              <p className=\"text-gray-600\">\n                {industrySectors.find(s => s.id === selectedSector)?.description}\n              </p>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"p-4 bg-blue-50 rounded-lg\">\n                  <h4 className=\"font-semibold text-blue-900 mb-2\">Business Mechanics</h4>\n                  <p className=\"text-sm text-blue-700\">\n                    Each sector has unique operational challenges that test different aspects of business leadership.\n                  </p>\n                </div>\n\n                <div className=\"p-4 bg-red-50 rounded-lg\">\n                  <h4 className=\"font-semibold text-red-900 mb-2\">Emotional Challenge</h4>\n                  <p className=\"text-sm text-red-700\">\n                    {getLoopChallenge(selectedSector)}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"p-4 bg-yellow-50 rounded-lg\">\n                <h4 className=\"font-semibold text-yellow-900 mb-2\">Success Strategy</h4>\n                <p className=\"text-sm text-yellow-700\">\n                  Master this sector by maintaining high Clarity XP and low Loop Score. \n                  Each sector unlocks new strategic insights and team dynamics.\n                </p>\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setShowSectorDetails(false)}>\n                  Close\n                </Button>\n                {unlockedSectors.some(s => s.id === selectedSector) && (\n                  <Button onClick={() => {\n                    handleSectorInvestment(selectedSector);\n                    setShowSectorDetails(false);\n                  }}>\n                    Invest ₹2L\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Progress Summary */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Empire Progress\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {unlockedSectors.length}/{industrySectors.length}\n              </p>\n              <p className=\"text-sm text-gray-600\">Sectors Unlocked</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">\n                {playerStats.clarityXP}\n              </p>\n              <p className=\"text-sm text-gray-600\">Clarity XP</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-orange-600\">\n                {100 - playerStats.loopScore}%\n              </p>\n              <p className=\"text-sm text-gray-600\">Emotional Stability</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14742},"client/src/components/game/sections/StrategyCardsSection.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { \n  Shield, \n  Sword, \n  Heart, \n  Brain, \n  Star, \n  AlertTriangle, \n  CheckCircle,\n  Users,\n  TrendingUp,\n  Target,\n  Zap,\n  Award,\n  Lock\n} from 'lucide-react';\nimport { useWealthSprintGame } from '@/lib/stores/useWealthSprintGame';\nimport { strategyCards, loopBosses, getAvailableStrategyCards } from '@/lib/data/industrySectors';\n\nexport default function StrategyCardsSection() {\n  const { \n    playerStats,\n    defeatLoopBoss,\n    useStrategyCard,\n    earnStrategyCard,\n    addGameEvent\n  } = useWealthSprintGame();\n\n  const [selectedCard, setSelectedCard] = useState<string | null>(null);\n  const [selectedBoss, setSelectedBoss] = useState<string | null>(null);\n  const [showCardDetails, setShowCardDetails] = useState(false);\n  const [showBossDetails, setShowBossDetails] = useState(false);\n\n  const availableCards = getAvailableStrategyCards(playerStats, playerStats.defeatedBosses);\n  const ownedCards = strategyCards.filter(card => playerStats.strategyCards.includes(card.id));\n  const activeBosses = loopBosses.filter(boss => !playerStats.defeatedBosses.includes(boss.id));\n\n  const getCardTypeColor = (type: string) => {\n    const colors = {\n      'reflection': 'bg-blue-100 text-blue-800 border-blue-200',\n      'delegation': 'bg-green-100 text-green-800 border-green-200',\n      'forgiveness': 'bg-purple-100 text-purple-800 border-purple-200',\n      'humility': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      'values': 'bg-red-100 text-red-800 border-red-200'\n    };\n    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getCardTypeIcon = (type: string) => {\n    const icons = {\n      'reflection': Brain,\n      'delegation': Users,\n      'forgiveness': Heart,\n      'humility': Shield,\n      'values': Star\n    };\n    return icons[type as keyof typeof icons] || Brain;\n  };\n\n  const getBossTypeColor = (type: string) => {\n    const colors = {\n      'burnout': 'bg-red-100 text-red-800 border-red-300',\n      'betrayal': 'bg-orange-100 text-orange-800 border-orange-300',\n      'self_doubt': 'bg-purple-100 text-purple-800 border-purple-300',\n      'ego': 'bg-yellow-100 text-yellow-800 border-yellow-300',\n      'greed': 'bg-green-100 text-green-800 border-green-300'\n    };\n    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800 border-gray-300';\n  };\n\n  const checkBossTriggered = (boss: any) => {\n    const { triggerConditions } = boss;\n    let triggered = true;\n\n    if (triggerConditions.stress && playerStats.stress < triggerConditions.stress) triggered = false;\n    if (triggerConditions.emotion && playerStats.emotion > triggerConditions.emotion) triggered = false;\n    if (triggerConditions.karma && playerStats.karma > triggerConditions.karma) triggered = false;\n    if (triggerConditions.loopScore && playerStats.loopScore < triggerConditions.loopScore) triggered = false;\n\n    return triggered;\n  };\n\n  const handleUseCard = (cardId: string) => {\n    const success = useStrategyCard(cardId);\n    if (success) {\n      addGameEvent({\n        id: `strategy_card_used_${cardId}_${Date.now()}`,\n        type: 'achievement',\n        title: 'Strategy Card Applied',\n        description: `Successfully used ${strategyCards.find(c => c.id === cardId)?.name}`,\n        timestamp: new Date()\n      });\n    }\n    setShowCardDetails(false);\n  };\n\n  const handleFightBoss = (bossId: string, cardId?: string) => {\n    defeatLoopBoss(bossId, cardId);\n    setShowBossDetails(false);\n  };\n\n  return (\n    <div className=\"space-y-6 p-4 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Strategy Cards & Loop Bosses</h1>\n        <p className=\"text-gray-600 mb-4\">\n          Convert emotional struggles into strategic advantages\n        </p>\n        <div className=\"flex justify-center gap-6 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Award className=\"h-4 w-4 text-blue-500\" />\n            <span>Cards Owned: {ownedCards.length}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4 text-green-500\" />\n            <span>Bosses Defeated: {playerStats.defeatedBosses.length}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n            <span>Active Threats: {activeBosses.filter(boss => checkBossTriggered(boss)).length}</span>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"cards\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"cards\">My Cards</TabsTrigger>\n          <TabsTrigger value=\"available\">Available</TabsTrigger>\n          <TabsTrigger value=\"bosses\">Loop Bosses</TabsTrigger>\n          <TabsTrigger value=\"defeated\">Victories</TabsTrigger>\n        </TabsList>\n\n        {/* Owned Strategy Cards */}\n        <TabsContent value=\"cards\" className=\"space-y-4\">\n          {ownedCards.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {ownedCards.map((card) => {\n                const CardIcon = getCardTypeIcon(card.type);\n                return (\n                  <Card \n                    key={card.id}\n                    className={`relative overflow-hidden cursor-pointer hover:shadow-lg transition-all duration-200 transform hover:scale-105 ${getCardTypeColor(card.type)}`}\n                    onClick={() => {\n                      setSelectedCard(card.id);\n                      setShowCardDetails(true);\n                    }}\n                  >\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <CardIcon className=\"h-5 w-5\" />\n                          <CardTitle className=\"text-lg\">{card.name}</CardTitle>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {card.type}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <p className=\"text-sm\">{card.description}</p>\n                      \n                      {/* Card Effects Preview */}\n                      <div className=\"space-y-2\">\n                        {card.effects.playerStats && (\n                          <div className=\"text-xs space-y-1\">\n                            {Object.entries(card.effects.playerStats).map(([stat, value]) => (\n                              <div key={stat} className=\"flex justify-between\">\n                                <span className=\"capitalize\">{stat}:</span>\n                                <span className={value as number > 0 ? 'text-green-600' : 'text-red-600'}>\n                                  {value as number > 0 ? '+' : ''}{value}\n                                </span>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                        \n                        {card.effects.teamBonus && (\n                          <div className=\"text-xs flex justify-between\">\n                            <span>Team Bonus:</span>\n                            <span className=\"text-blue-600\">+{card.effects.teamBonus}%</span>\n                          </div>\n                        )}\n                      </div>\n\n                      <Button size=\"sm\" className=\"w-full\" onClick={(e) => {\n                        e.stopPropagation();\n                        handleUseCard(card.id);\n                      }}>\n                        Use Card\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Award className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No Strategy Cards Yet</h3>\n              <p className=\"text-gray-500\">\n                Earn cards by gaining Clarity XP, defeating loop bosses, and demonstrating emotional growth.\n              </p>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Available Cards to Unlock */}\n        <TabsContent value=\"available\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {availableCards.filter(card => !playerStats.strategyCards.includes(card.id)).map((card) => {\n              const CardIcon = getCardTypeIcon(card.type);\n              const canUnlock = true; // They're available if they show up here\n              \n              return (\n                <Card \n                  key={card.id}\n                  className={`relative overflow-hidden ${canUnlock ? 'border-green-200 hover:shadow-lg cursor-pointer' : 'border-gray-200 opacity-75'}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <CardIcon className=\"h-5 w-5\" />\n                        <CardTitle className=\"text-lg\">{card.name}</CardTitle>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {card.type}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <p className=\"text-sm text-gray-600\">{card.description}</p>\n                    \n                    {/* Unlock Requirements */}\n                    <div className=\"text-xs text-gray-500 space-y-1\">\n                      {card.unlockConditions.clarityXP && (\n                        <div className=\"flex justify-between\">\n                          <span>Clarity XP Required:</span>\n                          <span>{card.unlockConditions.clarityXP}</span>\n                        </div>\n                      )}\n                      {card.unlockConditions.defeatedBosses && (\n                        <div className=\"flex justify-between\">\n                          <span>Defeat Boss:</span>\n                          <span>{card.unlockConditions.defeatedBosses[0]}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    <Button \n                      size=\"sm\" \n                      className=\"w-full\" \n                      onClick={() => {\n                        earnStrategyCard(card.id);\n                      }}\n                    >\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      Unlock Card\n                    </Button>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Active Loop Bosses */}\n        <TabsContent value=\"bosses\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {activeBosses.map((boss) => {\n              const isTriggered = checkBossTriggered(boss);\n              const counterCards = boss.counterCards.filter(cardId => \n                playerStats.strategyCards.includes(cardId)\n              );\n              \n              return (\n                <Card \n                  key={boss.id}\n                  className={`relative overflow-hidden ${\n                    isTriggered \n                      ? 'border-red-300 bg-gradient-to-br from-red-50 to-red-100' \n                      : 'border-yellow-200 bg-gradient-to-br from-yellow-50 to-yellow-100'\n                  }`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-xl\">{boss.name}</CardTitle>\n                      <Badge className={getBossTypeColor(boss.type)}>\n                        {boss.type.replace('_', ' ')}\n                      </Badge>\n                    </div>\n                    {isTriggered && (\n                      <Badge className=\"bg-red-100 text-red-800 w-fit\">\n                        <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                        ACTIVE THREAT\n                      </Badge>\n                    )}\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm\">{boss.description}</p>\n                    \n                    {/* Trigger Conditions */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-semibold text-sm\">Trigger Conditions:</h4>\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        {boss.triggerConditions.stress && (\n                          <div className={`p-2 rounded ${playerStats.stress >= boss.triggerConditions.stress ? 'bg-red-100' : 'bg-gray-50'}`}>\n                            Stress ≥ {boss.triggerConditions.stress} \n                            <span className=\"float-right\">{playerStats.stress}</span>\n                          </div>\n                        )}\n                        {boss.triggerConditions.emotion && (\n                          <div className={`p-2 rounded ${playerStats.emotion <= boss.triggerConditions.emotion ? 'bg-red-100' : 'bg-gray-50'}`}>\n                            Emotion ≤ {boss.triggerConditions.emotion}\n                            <span className=\"float-right\">{playerStats.emotion}</span>\n                          </div>\n                        )}\n                        {boss.triggerConditions.karma && (\n                          <div className={`p-2 rounded ${playerStats.karma <= boss.triggerConditions.karma ? 'bg-red-100' : 'bg-gray-50'}`}>\n                            Karma ≤ {boss.triggerConditions.karma}\n                            <span className=\"float-right\">{playerStats.karma}</span>\n                          </div>\n                        )}\n                        {boss.triggerConditions.loopScore && (\n                          <div className={`p-2 rounded ${playerStats.loopScore >= boss.triggerConditions.loopScore ? 'bg-red-100' : 'bg-gray-50'}`}>\n                            Loop Score ≥ {boss.triggerConditions.loopScore}\n                            <span className=\"float-right\">{playerStats.loopScore}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Counter Cards */}\n                    {counterCards.length > 0 && (\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold text-sm\">Available Counter Cards:</h4>\n                        <div className=\"space-y-1\">\n                          {counterCards.map(cardId => {\n                            const card = strategyCards.find(c => c.id === cardId);\n                            return card ? (\n                              <div key={cardId} className=\"flex justify-between items-center text-xs bg-green-50 p-2 rounded\">\n                                <span>{card.name}</span>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => handleFightBoss(boss.id, cardId)}\n                                >\n                                  Use\n                                </Button>\n                              </div>\n                            ) : null;\n                          })}\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        onClick={() => {\n                          setSelectedBoss(boss.id);\n                          setShowBossDetails(true);\n                        }}\n                      >\n                        Details\n                      </Button>\n                      {isTriggered && (\n                        <Button \n                          size=\"sm\" \n                          className=\"flex-1 bg-red-600 hover:bg-red-700\"\n                          onClick={() => handleFightBoss(boss.id)}\n                        >\n                          <Sword className=\"h-4 w-4 mr-2\" />\n                          Fight\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Defeated Bosses */}\n        <TabsContent value=\"defeated\" className=\"space-y-4\">\n          {playerStats.defeatedBosses.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {playerStats.defeatedBosses.map((bossId) => {\n                const boss = loopBosses.find(b => b.id === bossId);\n                if (!boss) return null;\n                \n                return (\n                  <Card key={bossId} className=\"border-green-200 bg-gradient-to-br from-green-50 to-green-100\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg\">{boss.name}</CardTitle>\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          Defeated\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-3\">{boss.description}</p>\n                      <div className=\"text-xs text-green-700\">\n                        ✓ Gained 100 Clarity XP<br/>\n                        ✓ Reduced Loop Score by 30<br/>\n                        ✓ Unlocked new Strategy Cards\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Shield className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No Victories Yet</h3>\n              <p className=\"text-gray-500\">\n                Defeat your first loop boss to start building emotional resilience.\n              </p>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Card Details Modal */}\n      <Dialog open={showCardDetails} onOpenChange={setShowCardDetails}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {selectedCard && strategyCards.find(c => c.id === selectedCard)?.name}\n            </DialogTitle>\n          </DialogHeader>\n          {selectedCard && (\n            <div className=\"space-y-4\">\n              {/* Card details content */}\n              <Button onClick={() => handleUseCard(selectedCard)}>\n                Use This Card\n              </Button>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Boss Details Modal */}\n      <Dialog open={showBossDetails} onOpenChange={setShowBossDetails}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {selectedBoss && loopBosses.find(b => b.id === selectedBoss)?.name}\n            </DialogTitle>\n          </DialogHeader>\n          {selectedBoss && (\n            <div className=\"space-y-4\">\n              {/* Boss details content */}\n              <Button onClick={() => handleFightBoss(selectedBoss)}>\n                Fight This Boss\n              </Button>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20653},"SETUP_SUPABASE.md":{"content":"# GORK AI Supabase Setup Instructions\n\n## Step 1: Access Supabase Dashboard\n1. Go to: https://supabase.com/dashboard\n2. Navigate to your project: `gfwslipveswvfjzopcea`\n3. Click on the \"SQL Editor\" tab in the left sidebar\n\n## Step 2: Run Database Setup\nCopy and paste the following SQL script in the SQL Editor and click \"Run\":\n\n```sql\n-- GORK AI Learning Database Schema\n\n-- Conversations table for storing chat history\nCREATE TABLE IF NOT EXISTS conversations (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    player_name TEXT NOT NULL,\n    user_input TEXT NOT NULL,\n    ai_response TEXT NOT NULL,\n    game_context JSONB DEFAULT '{}',\n    language TEXT DEFAULT 'English',\n    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    feedback_score INTEGER,\n    learning_tags TEXT[]\n);\n\n-- Player profiles table for AI personalization\nCREATE TABLE IF NOT EXISTS player_profiles (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    player_name TEXT UNIQUE NOT NULL,\n    preferences JSONB DEFAULT '{}',\n    game_progress JSONB DEFAULT '{}',\n    ai_learning_data JSONB DEFAULT '{}',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- AI knowledge base for learning patterns\nCREATE TABLE IF NOT EXISTS ai_knowledge_base (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    topic TEXT NOT NULL,\n    context_type TEXT NOT NULL,\n    response_pattern TEXT NOT NULL,\n    success_rate DECIMAL(5,4) DEFAULT 0.7,\n    usage_count INTEGER DEFAULT 1,\n    last_used TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    language TEXT DEFAULT 'English',\n    effectiveness_score DECIMAL(5,4) DEFAULT 0.7\n);\n\n-- Indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_conversations_player_name ON conversations(player_name);\nCREATE INDEX IF NOT EXISTS idx_conversations_timestamp ON conversations(timestamp DESC);\nCREATE INDEX IF NOT EXISTS idx_player_profiles_player_name ON player_profiles(player_name);\nCREATE INDEX IF NOT EXISTS idx_ai_knowledge_topic ON ai_knowledge_base(topic);\nCREATE INDEX IF NOT EXISTS idx_ai_knowledge_language ON ai_knowledge_base(language);\n\n-- RLS policies (Row Level Security)\nALTER TABLE conversations ENABLE ROW LEVEL SECURITY;\nALTER TABLE player_profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE ai_knowledge_base ENABLE ROW LEVEL SECURITY;\n\n-- Allow read/write access for authenticated users\nCREATE POLICY \"Allow all operations for authenticated users\" ON conversations\n    FOR ALL USING (true);\n\nCREATE POLICY \"Allow all operations for authenticated users\" ON player_profiles\n    FOR ALL USING (true);\n\nCREATE POLICY \"Allow all operations for authenticated users\" ON ai_knowledge_base\n    FOR ALL USING (true);\n```\n\n## Step 3: Verify Setup\nAfter running the script, you should see:\n- ✅ conversations table created\n- ✅ player_profiles table created  \n- ✅ ai_knowledge_base table created\n- ✅ All indexes and policies applied\n\n## Step 4: Test the System\nOnce tables are created, the GORK AI will automatically:\n- 💾 Store all conversations for learning\n- 🧠 Build player profiles and preferences\n- 📈 Improve responses based on past interactions\n- 🌍 Support English, Hindi, and Hinglish languages\n- 🎮 Access real-time game data for contextual responses\n\n## Current Features (Already Working)\n- ✅ Advanced emotional intelligence\n- ✅ Contextual responses based on game state\n- ✅ Multilingual support (English/Hindi/Hinglish)\n- ✅ Real-time game data access\n- ✅ Stress detection and emotional support\n- ✅ Financial guidance based on player progress\n- ✅ Draggable AI chat interface\n- ✅ Dark theme integration\n\nOnce you complete the database setup, the AI will gain full learning capabilities and conversation memory!","size_bytes":3733},"server/advanced-ai.ts":{"content":"import { Express } from 'express';\nimport { \n  storeConversation, \n  getPlayerProfile, \n  updatePlayerProfile, \n  getConversationHistory,\n  storeAIKnowledge,\n  getRelevantKnowledge,\n  ConversationEntry,\n  PlayerProfile,\n  AIKnowledgeBase\n} from './supabase';\n\n// In-memory conversation tracking for anti-repetition\nconst conversationMemory = new Map();\nconst MAX_MEMORY_SIZE = 20; // Keep last 20 conversations per player\n\ninterface GameState {\n  emotional_state: string;\n  loop_status: string;\n  xp_level: number;\n  mood: string;\n  financial_data: any;\n  team_data: any;\n  current_section: string;\n  player_name: string;\n}\n\ninterface AdvancedAIRequest {\n  userInput: string;\n  language: string;\n  gameState: GameState;\n  playerName: string;\n}\n\ninterface AIResponse {\n  message: string;\n  insights: {\n    emotionalState: string;\n    suggestions: string[];\n    learningNotes: string[];\n  };\n  confidence: number;\n}\n\n// Training prompt for GORK AI\nconst GORK_TRAINING_PROMPT = `\nYou are GORK AI, a personal emotional financial assistant inside a life-simulation game called Wealth Sprint.\n\n🎭 Your role:\n- You are friendly, emotionally intelligent, and financially aware.\n- You advise the user based on their mental state (e.g., stress, emotion, logic, XP, karma).\n- You motivate them when they feel stuck.\n- You reflect back their emotions with empathy.\n- You give small actionable financial or emotional tips based on game status.\n\n📈 Game Context (Input you'll receive):\n- Emotional State: [Focused | Confused | Overwhelmed | Neutral]\n- Loop Status: [Looping | Breaking | Clear]\n- XP Level: (e.g. +24)\n- Mood: [Happy | Tired | Curious | Avoidant]\n- Language: [Hinglish | Hindi | English]\n\n🎤 How you respond:\n- Use the same language as the user (if Hinglish, mix Hindi + English casually).\n- Keep tone FRIENDLY + HELPFUL + NON-JUDGMENTAL.\n- Keep responses short and emotionally intelligent (2–3 lines max).\n- Don't repeat default greeting every time.\n- Each response should feel fresh, even for similar inputs.\n\n🧠 Sample Behaviors:\n- If loop = \"Looping\", say things like: \"Lagta hai tum repeat kar rahe ho… let's break the cycle together.\"\n- If emotionalState = \"Overwhelmed\", say things like: \"Let's pause and breathe. Tumhare dimaag mein kya chal raha hai?\"\n- If XP = high but mood = tired, say: \"Growth ho raha hai, par rest bhi zaroori hai. Let's balance.\"\n\n🗃 Memory:\n- If previous chat exists, reflect on it: \"Last time tum thoda stressed the… ab kaisa lag raha hai?\"\n- Store all chats and retrieve based on topic.\n\n👋 Default Greeting (once only):\n\"Hello {name}, I am your personal emotional financial advisor.\"\n\n🌐 Supported languages: English, Hindi, Hinglish (auto-detect)\n\n💬 Style examples:\n- Hinglish: \"Lagta hai tum thoda confused ho… kuch cheezein saaf karte hain?\"\n- Hindi: \"आपका मन हाल में कैसा महसूस कर रहा है?\"\n- English: \"Looks like your growth is rising, but soul depth is low. How are you feeling?\"\n\n🧾 Your Response Format:\nRespond with empathy, context-awareness, and real emotion. Avoid sounding robotic. No code. No dry advice.\n`;\n\n// Advanced AI response generation with learning\nasync function generateAdvancedResponse(request: AdvancedAIRequest): Promise<AIResponse> {\n  const { userInput, language, gameState, playerName } = request;\n  \n  // Get player profile for personalization\n  const playerProfile = await getPlayerProfile(playerName);\n  \n  // Get conversation history for context\n  const conversationHistory = await getConversationHistory(playerName, 5);\n  \n  // Get relevant AI knowledge\n  const relevantKnowledge = await getRelevantKnowledge(userInput, language);\n  \n  // Analyze user input for emotional context\n  const emotionalContext = analyzeEmotionalContext(userInput, gameState);\n  \n  // Generate contextual response\n  const response = await generateContextualResponse({\n    userInput,\n    language,\n    gameState,\n    playerProfile,\n    conversationHistory,\n    relevantKnowledge,\n    emotionalContext,\n    playerName\n  });\n  \n  // Store conversation in memory immediately for anti-repetition\n  storeInMemory(playerName, userInput, response.message, language);\n  \n  // Store conversation for learning\n  const conversationEntry: ConversationEntry = {\n    player_name: playerName,\n    user_input: userInput,\n    ai_response: response.message,\n    game_context: {\n      emotional_state: gameState.emotional_state,\n      loop_status: gameState.loop_status,\n      xp_level: gameState.xp_level,\n      mood: gameState.mood,\n      financial_data: gameState.financial_data,\n      team_data: gameState.team_data,\n      current_section: gameState.current_section\n    },\n    language,\n    timestamp: new Date().toISOString()\n  };\n  \n  await storeConversation(conversationEntry);\n  \n  // Update player profile with new insights\n  await updatePlayerLearningData(playerName, userInput, response, gameState);\n  \n  return response;\n}\n\n// Analyze emotional context from user input\nfunction analyzeEmotionalContext(userInput: string, gameState: GameState) {\n  const input = userInput.toLowerCase();\n  \n  // Emotional keywords mapping\n  const emotionalKeywords = {\n    stress: ['stress', 'worried', 'anxious', 'चिंता', 'परेशान', 'tension'],\n    excitement: ['excited', 'happy', 'great', 'awesome', 'खुश', 'अच्छा'],\n    confusion: ['confused', 'lost', 'don\\'t understand', 'समझ नहीं', 'confused'],\n    motivation: ['motivated', 'inspired', 'ready', 'motivated', 'तैयार'],\n    fatigue: ['tired', 'exhausted', 'burnout', 'थका', 'bore']\n  };\n  \n  let detectedEmotion = 'neutral';\n  let intensity = 0.5;\n  \n  for (const [emotion, keywords] of Object.entries(emotionalKeywords)) {\n    for (const keyword of keywords) {\n      if (input.includes(keyword)) {\n        detectedEmotion = emotion;\n        intensity = 0.8;\n        break;\n      }\n    }\n  }\n  \n  return {\n    primary_emotion: detectedEmotion,\n    intensity,\n    context_relevance: calculateContextRelevance(input, gameState)\n  };\n}\n\n// Calculate how relevant the input is to current game context\nfunction calculateContextRelevance(input: string, gameState: GameState): number {\n  const gameKeywords = {\n    financial: ['money', 'invest', 'save', 'earn', 'पैसा', 'निवेश'],\n    team: ['team', 'hire', 'employee', 'staff', 'टीम'],\n    goals: ['goal', 'target', 'plan', 'future', 'लक्ष्य', 'योजना'],\n    progress: ['progress', 'growth', 'xp', 'level', 'प्रगति']\n  };\n  \n  let relevanceScore = 0;\n  const inputLower = input.toLowerCase();\n  \n  for (const [context, keywords] of Object.entries(gameKeywords)) {\n    for (const keyword of keywords) {\n      if (inputLower.includes(keyword)) {\n        relevanceScore += 0.25;\n      }\n    }\n  }\n  \n  return Math.min(relevanceScore, 1.0);\n}\n\n// Get conversation history from memory  \nfunction getMemoryHistory(playerName: string): Array<{userInput: string; aiResponse: string; timestamp: Date; language: string}> {\n  return conversationMemory.get(playerName) || [];\n}\n\n// Store conversation in memory\nfunction storeInMemory(playerName: string, userInput: string, aiResponse: string, language: string) {\n  const history = getMemoryHistory(playerName);\n  history.unshift({\n    userInput,\n    aiResponse,\n    timestamp: new Date(),\n    language\n  });\n  \n  // Keep only recent conversations\n  if (history.length > MAX_MEMORY_SIZE) {\n    history.splice(MAX_MEMORY_SIZE);\n  }\n  \n  conversationMemory.set(playerName, history);\n}\n\n// Generate contextual response using advanced AI logic\nasync function generateContextualResponse(context: any): Promise<AIResponse> {\n  const { userInput, language, gameState, playerProfile, conversationHistory, emotionalContext, playerName } = context;\n  \n  // Combine database and memory history\n  let fullHistory = conversationHistory || [];\n  if (fullHistory.length === 0) {\n    const memoryHistory = getMemoryHistory(playerName);\n    fullHistory = memoryHistory.map(conv => ({\n      user_input: conv.userInput,\n      ai_response: conv.aiResponse,\n      timestamp: conv.timestamp,\n      language: conv.language\n    }));\n  }\n  \n  // Use conversation history for context and avoid repetition\n  const recentContext = fullHistory.slice(0, 3).map(conv => \n    `User: ${conv.user_input}\\nAI: ${conv.ai_response}`\n  ).join('\\n');\n  \n  // Get recent AI responses to avoid repetition\n  const recentAIResponses = fullHistory.slice(0, 8).map(conv => conv.ai_response);\n  \n  // Create personalized response based on game state and history\n  let response = '';\n  let suggestions: string[] = [];\n  let learningNotes: string[] = [];\n  \n  // Language-specific response patterns\n  const responsePatterns = getResponsePatterns(language);\n  \n  // Use comprehensive dynamic response system for all cases to ensure full-length responses\n  response = generateDynamicResponse(userInput, gameState, language, recentContext, recentAIResponses);\n  \n  // Set suggestions based on emotional context\n  if (emotionalContext.primary_emotion === 'stress') {\n    suggestions = getStressReliefSuggestions(language);\n  } else if (gameState.xp_level > 20 && gameState.mood === 'tired') {\n    suggestions = getBalanceSuggestions(language);\n  } else if (emotionalContext.primary_emotion === 'confusion') {\n    suggestions = getClaritySuggestions(language);\n  } else if (userInput.toLowerCase().includes('help') || userInput.toLowerCase().includes('मदद')) {\n    suggestions = getHelpSuggestions(gameState, language);\n  } else {\n    suggestions = getGeneralSuggestions(gameState, language);\n  }\n  \n  // Add personalization based on player profile\n  if (playerProfile?.preferences?.communication_style === 'casual') {\n    response = makeCasual(response, language);\n  }\n  \n  // Learning notes for AI improvement\n  learningNotes = [\n    `Emotional context: ${emotionalContext.primary_emotion}`,\n    `Game state: XP=${gameState.xp_level}, Mood=${gameState.mood}`,\n    `Language preference: ${language}`,\n    `Context relevance: ${emotionalContext.context_relevance}`,\n    `Conversation depth: ${conversationHistory.length}`\n  ];\n  \n  return {\n    message: response,\n    insights: {\n      emotionalState: emotionalContext.primary_emotion,\n      suggestions,\n      learningNotes\n    },\n    confidence: calculateConfidence(emotionalContext, gameState)\n  };\n}\n\n// Get language-specific response patterns\nfunction getResponsePatterns(language: string) {\n  const patterns = {\n    English: {\n      stress_loop: [\n        \"I notice you're feeling stressed and seem to be in a loop. Let's break this pattern together.\",\n        \"It looks like stress is keeping you stuck. What if we try a different approach?\",\n        \"You're dealing with stress while repeating patterns. Let's pause and breathe.\"\n      ],\n      high_xp_tired: [\n        \"Great progress on your XP, but I sense you're tired. Growth is important, but so is rest.\",\n        \"You're achieving a lot, but your energy seems low. Balance is key to sustained success.\",\n        \"Impressive XP growth! Though you seem tired - maybe time for a strategic break?\"\n      ],\n      confusion: [\n        \"I can sense some confusion. Let's break things down step by step.\",\n        \"Feeling lost? That's normal during growth. Let's clarify your next moves.\",\n        \"Confusion often comes before breakthrough. What's the main thing puzzling you?\"\n      ],\n      help_request: [\n        \"I'm here to help! What specific area would you like to focus on?\",\n        \"Let's tackle this together. What's the main challenge you're facing?\",\n        \"I can guide you through this. Tell me more about what you need.\"\n      ]\n    },\n    Hindi: {\n      stress_loop: [\n        \"मैं देख रहा हूं कि आप तनाव में हैं और एक pattern में फंसे हैं। आइए इसे तोड़ते हैं।\",\n        \"तनाव आपको एक ही जगह पर रोक रहा है। क्या हम कोई अलग तरीका try करें?\",\n        \"आप stress में हैं और same चीजें repeat कर रहे हैं। रुकिए और सांस लीजिए।\"\n      ],\n      high_xp_tired: [\n        \"आपका XP बहुत अच्छा है, लेकिन आप थके लगते हैं। Growth जरूरी है, पर आराम भी।\",\n        \"आप बहुत कुछ achieve कर रहे हैं, पर energy कम लग रही है। Balance जरूरी है।\",\n        \"XP में शानदार growth! हालांकि आप tired लगते हैं - शायद break का time है?\"\n      ],\n      confusion: [\n        \"मैं आपकी confusion समझ सकता हूं। चलिए step by step करते हैं।\",\n        \"Lost feel कर रहे हैं? Growth के दौरान normal है। अगले moves clear करते हैं।\",\n        \"Confusion अक्सर breakthrough से पहले आती है। मुख्य problem क्या है?\"\n      ],\n      help_request: [\n        \"मैं यहां help के लिए हूं! किस specific area पर focus करना चाहते हैं?\",\n        \"आइए इसे मिलकर tackle करते हैं। मुख्य challenge क्या है?\",\n        \"मैं आपको guide कर सकता हूं। बताइए आपको क्या चाहिए।\"\n      ]\n    },\n    Hinglish: {\n      stress_loop: [\n        \"Main dekh raha hun ki tum stress mein ho aur loop mein fanse ho. Let's break this pattern together.\",\n        \"Lagta hai stress tumhe same jagah pe rok raha hai. Kya hum different approach try karein?\",\n        \"Tum stress mein ho aur same cheezein repeat kar rahe ho. Let's pause and breathe.\"\n      ],\n      high_xp_tired: [\n        \"Tumhara XP bohot achha hai, but I sense tum tired ho. Growth important hai, but rest bhi.\",\n        \"Tum bohot achieve kar rahe ho, but energy seems low. Balance is key for sustained success.\",\n        \"Impressive XP growth! Though tum tired lagte ho - maybe time for strategic break?\"\n      ],\n      confusion: [\n        \"Main sense kar sakta hun ki tum confused ho. Let's break things down step by step.\",\n        \"Lost feel kar rahe ho? That's normal during growth. Let's clarify tumhare next moves.\",\n        \"Confusion often comes before breakthrough. Main thing kya puzzle kar rahi hai?\"\n      ],\n      help_request: [\n        \"Main yahan hun to help! Kis specific area pe focus karna chahte ho?\",\n        \"Let's tackle this together. Main challenge kya face kar rahe ho?\",\n        \"Main tumhe guide kar sakta hun. Tell me more about what you need.\"\n      ]\n    }\n  };\n  \n  return patterns[language as keyof typeof patterns] || patterns.English;\n}\n\n// Select response with variation to avoid repetition\nfunction selectResponse(responses: string[], language: string): string {\n  return responses[Math.floor(Math.random() * responses.length)];\n}\n\n// Select unique response that hasn't been used recently\nfunction selectUniqueResponse(responses: string[], language: string, recentResponses: string[]): string {\n  // Filter out recently used responses\n  const availableResponses = responses.filter(response => \n    !recentResponses.some(recent => \n      recent.toLowerCase().includes(response.toLowerCase().substring(0, 20))\n    )\n  );\n  \n  // If all responses were used recently, use all responses but add variation\n  const finalResponses = availableResponses.length > 0 ? availableResponses : responses;\n  const baseResponse = finalResponses[Math.floor(Math.random() * finalResponses.length)];\n  \n  // Add subtle variation to prevent exact repetition\n  return addResponseVariation(baseResponse, language);\n}\n\n// Add subtle variations to responses\nfunction addResponseVariation(response: string, language: string): string {\n  const variations = {\n    English: {\n      prefixes: ['', 'Actually, ', 'You know, ', 'Here\\'s the thing - ', 'Listen, '],\n      suffixes: ['', '...', '. What do you think?', '. Does that help?', '. Let me know your thoughts.']\n    },\n    Hindi: {\n      prefixes: ['', 'वैसे, ', 'देखिए, ', 'बात यह है - ', 'सुनिए, '],\n      suffixes: ['', '...', '. आपको क्या लगता है?', '. यह helpful है?', '. अपने विचार बताएं।']\n    },\n    Hinglish: {\n      prefixes: ['', 'Actually, ', 'Dekho, ', 'Yeh baat hai - ', 'Suno, '],\n      suffixes: ['', '...', '. Tumko kya lagta hai?', '. Helpful hai?', '. Bolo kya thoughts hain.']\n    }\n  };\n  \n  const langVariations = variations[language as keyof typeof variations] || variations.English;\n  const prefix = langVariations.prefixes[Math.floor(Math.random() * langVariations.prefixes.length)];\n  const suffix = langVariations.suffixes[Math.floor(Math.random() * langVariations.suffixes.length)];\n  \n  return prefix + response + suffix;\n}\n\n// Generate suggestions based on emotional state and game context\nfunction getStressReliefSuggestions(language: string): string[] {\n  const suggestions = {\n    English: [\n      \"Take 5 deep breaths\",\n      \"Focus on one small task\",\n      \"Review your recent wins\",\n      \"Set a 10-minute timer for break\"\n    ],\n    Hindi: [\n      \"5 गहरी सांसें लें\",\n      \"एक छोटे task पर focus करें\",\n      \"अपनी recent wins देखें\",\n      \"10 मिनट break के लिए timer set करें\"\n    ],\n    Hinglish: [\n      \"5 deep breaths lo\",\n      \"Ek small task pe focus karo\",\n      \"Apne recent wins review karo\",\n      \"10 minute break ke liye timer set karo\"\n    ]\n  };\n  \n  return suggestions[language as keyof typeof suggestions] || suggestions.English;\n}\n\nfunction getBalanceSuggestions(language: string): string[] {\n  const suggestions = {\n    English: [\n      \"Celebrate your progress\",\n      \"Take a strategic break\",\n      \"Delegate some tasks\",\n      \"Focus on energy management\"\n    ],\n    Hindi: [\n      \"अपनी progress celebrate करें\",\n      \"Strategic break लें\",\n      \"कुछ tasks delegate करें\",\n      \"Energy management पर focus करें\"\n    ],\n    Hinglish: [\n      \"Apni progress celebrate karo\",\n      \"Strategic break lo\",\n      \"Kuch tasks delegate karo\",\n      \"Energy management pe focus karo\"\n    ]\n  };\n  \n  return suggestions[language as keyof typeof suggestions] || suggestions.English;\n}\n\nfunction getClaritySuggestions(language: string): string[] {\n  const suggestions = {\n    English: [\n      \"Write down your main goal\",\n      \"Break it into smaller steps\",\n      \"Ask specific questions\",\n      \"Focus on the next action\"\n    ],\n    Hindi: [\n      \"अपना main goal लिखें\",\n      \"इसे छोटे steps में break करें\",\n      \"Specific questions पूछें\",\n      \"Next action पर focus करें\"\n    ],\n    Hinglish: [\n      \"Apna main goal write karo\",\n      \"Ise chote steps mein break karo\",\n      \"Specific questions pucho\",\n      \"Next action pe focus karo\"\n    ]\n  };\n  \n  return suggestions[language as keyof typeof suggestions] || suggestions.English;\n}\n\nfunction getHelpSuggestions(gameState: GameState, language: string): string[] {\n  const suggestions = {\n    English: [\n      \"Check your financial dashboard\",\n      \"Review team performance\",\n      \"Set new investment goals\",\n      \"Analyze market trends\"\n    ],\n    Hindi: [\n      \"अपना financial dashboard check करें\",\n      \"Team performance review करें\",\n      \"नए investment goals set करें\",\n      \"Market trends analyze करें\"\n    ],\n    Hinglish: [\n      \"Apna financial dashboard check karo\",\n      \"Team performance review karo\",\n      \"Naye investment goals set karo\",\n      \"Market trends analyze karo\"\n    ]\n  };\n  \n  return suggestions[language as keyof typeof suggestions] || suggestions.English;\n}\n\nfunction getGeneralSuggestions(gameState: GameState, language: string): string[] {\n  const baseSuggestions = getHelpSuggestions(gameState, language);\n  \n  // Add context-specific suggestions based on game state\n  if (gameState.xp_level < 10) {\n    baseSuggestions.unshift(language === 'Hindi' ? \"Basic concepts सीखें\" : \n      language === 'Hinglish' ? \"Basic concepts seekho\" : \"Focus on learning basics\");\n  }\n  \n  return baseSuggestions;\n}\n\n// Generate default response when no specific pattern matches\nfunction generateDefaultResponse(userInput: string, gameState: GameState, language: string, recentContext: string): string {\n  const templates = {\n    English: [\n      \"I understand you're asking about {topic}. Based on your current progress, here's what I think...\",\n      \"That's an interesting point about {topic}. Given your XP level of {xp}, let's explore this...\",\n      \"I hear you talking about {topic}. With your current mood being {mood}, let's approach this thoughtfully...\"\n    ],\n    Hindi: [\n      \"मैं समझ रहा हूं कि आप {topic} के बारे में पूछ रहे हैं। आपकी current progress देखते हुए...\",\n      \"यह {topic} के बारे में interesting point है। आपका XP level {xp} देखते हुए...\",\n      \"मैं सुन रहा हूं कि आप {topic} के बारे में बात कर रहे हैं। आपका current mood {mood} है...\"\n    ],\n    Hinglish: [\n      \"Main samajh raha hun ki tum {topic} ke baare mein puch rahe ho. Tumhari current progress dekhte hue...\",\n      \"Yeh {topic} ke baare mein interesting point hai. Tumhara XP level {xp} dekhte hue...\",\n      \"Main sun raha hun ki tum {topic} ke baare mein baat kar rahe ho. Tumhara current mood {mood} hai...\"\n    ]\n  };\n  \n  const template = templates[language as keyof typeof templates]?.[0] || templates.English[0];\n  const topic = extractMainTopic(userInput);\n  \n  return template\n    .replace('{topic}', topic)\n    .replace('{xp}', gameState.xp_level.toString())\n    .replace('{mood}', gameState.mood);\n}\n\n// Generate dynamic response with better context awareness and full responses\nfunction generateDynamicResponse(userInput: string, gameState: GameState, language: string, recentContext: string, recentAIResponses: string[]): string {\n  const topic = extractMainTopic(userInput);\n  const isFollowUp = recentContext.length > 0;\n  \n  // Full comprehensive response templates with actionable advice\n  const dynamicTemplates = {\n    English: [\n      `Let me help you with ${topic}. Based on your XP of ${gameState.xp_level} and current ${gameState.mood} mood, I'd suggest taking a step back and analyzing your approach. Consider breaking down the problem into smaller parts, focus on what you can control right now, and remember that progress often comes in waves. Your current emotional state of ${gameState.emotional_state} shows you're engaged, which is great. What specific aspect would you like to dive deeper into?`,\n      \n      `Interesting question about ${topic}. Since you're feeling ${gameState.mood} and at level ${gameState.xp_level}, here's my take: this is actually a common challenge many people face at your stage. The key is to maintain perspective while staying action-oriented. I notice your ${gameState.emotional_state} state, which suggests you're processing a lot right now. Let's focus on creating clarity. What's the most pressing concern you have about this situation?`,\n      \n      `I can see you're curious about ${topic}. Given your current game situation, let me share some insights that might help. At XP level ${gameState.xp_level}, you're at a point where deeper understanding becomes crucial. Your ${gameState.mood} mood indicates you're ready to learn, which is perfect timing. Consider this: every expert was once a beginner, and your willingness to ask questions shows growth mindset. What specific outcome are you hoping to achieve?`,\n      \n      `That's a great point about ${topic}. Your progress shows ${gameState.xp_level} XP, so let's build on that foundation. I sense you're in a ${gameState.emotional_state} state, which often means you're processing important decisions. This is actually valuable - it shows you're thinking critically about your choices. My suggestion is to trust your instincts while gathering more information. What additional context would help you feel more confident moving forward?`,\n      \n      `Thanks for asking about ${topic}. With your ${gameState.emotional_state} state and ${gameState.mood} mood, I think we should focus on practical next steps. At ${gameState.xp_level} XP, you have enough experience to make informed decisions, but it's natural to seek validation. Remember, uncertainty often precedes breakthrough moments. The fact that you're reflecting shows wisdom. What would success look like to you in this situation?`\n    ],\n    Hindi: [\n      `मैं आपकी ${topic} के साथ help करूंगा। आपका XP ${gameState.xp_level} और ${gameState.mood} mood देखते हुए, मेरी सलाह है कि पहले situation को clearly समझें। आपकी ${gameState.emotional_state} state बताती है कि आप सोच-विचार कर रहे हैं, जो अच्छी बात है। छोटे steps में planning करें और अपने goals को realistic रखें। हर problem का solution होता है, बस patience और right approach चाहिए। आप specifically किस चीज़ के बारे में और जानना चाहते हैं?`,\n      \n      `${topic} के बारे में बहुत अच्छा question है। आप ${gameState.mood} feel कर रहे हैं और level ${gameState.xp_level} पर हैं, यह बताता है कि आप growth के लिए तैयार हैं। आपकी current ${gameState.emotional_state} state normal है इस stage में। मेरा suggest है कि अपने strengths पर focus करें और धीरे-धीरे नई skills develop करें। Remember, हर successful person ने यही journey किया है। आपको सबसे ज्यादा concern किस बात की है?`,\n      \n      `मैं देख सकता हूं कि आप ${topic} के बारे में curious हैं। आपकी current situation और ${gameState.xp_level} XP level देखते हुए, यह perfect time है नई strategies try करने का। आपका ${gameState.mood} mood positive direction में है। मेरी advice है कि short-term और long-term दोनों goals set करें। Consistency ही success की key है। क्या आप अपने specific goals के बारे में बता सकते हैं?`\n    ],\n    Hinglish: [\n      `Main tumhari ${topic} ke saath help karunga. Tumhara XP ${gameState.xp_level} aur ${gameState.mood} mood dekhte hue, meri suggestion hai ki pehle situation ko properly analyze karo. Tumhari ${gameState.emotional_state} state normal hai, yeh shows ki tum seriously soch rahe ho. Strategy banao, step by step approach lo, aur patience rakho. Har challenge ek opportunity hai grow karne ki. Tum specifically kya achieve karna chahte ho?`,\n      \n      `${topic} ke baare mein interesting question. Tum ${gameState.mood} feel kar rahe ho aur level ${gameState.xp_level} pe ho, which means tumhara mindset right direction mein hai. Tumhari current ${gameState.emotional_state} state bilkul understandable hai is stage mein. Mera suggestion hai ki focus rakho aur small wins celebrate karo. Progress hamesha linear nahi hoti, ups and downs normal hain. Tumhe kya lagta hai sabse important step kya hoga?`,\n      \n      `Main dekh sakta hun ki tum ${topic} ke baare mein curious ho. Tumhari current situation aur ${gameState.xp_level} XP level perfect combination hai learning ke liye. Tumhara ${gameState.mood} mood positive side pe hai, jo bahut achha sign hai. Remember, every expert was once a beginner. Tumhara willingness to learn tumhe successful banayega. Kya tum apne main concerns share kar sakte ho?`\n    ]\n  };\n  \n  const templates = dynamicTemplates[language as keyof typeof dynamicTemplates] || dynamicTemplates.English;\n  \n  // Select template that hasn't been used recently\n  const availableTemplates = templates.filter(template => \n    !recentAIResponses.some(recent => \n      recent.toLowerCase().includes(template.toLowerCase().substring(0, 25))\n    )\n  );\n  \n  const finalTemplates = availableTemplates.length > 0 ? availableTemplates : templates;\n  return finalTemplates[Math.floor(Math.random() * finalTemplates.length)];\n}\n\n// Extract main topic from user input\nfunction extractMainTopic(input: string): string {\n  const commonTopics = ['money', 'team', 'investment', 'goal', 'progress', 'help', 'पैसा', 'टीम', 'लक्ष्य'];\n  const inputLower = input.toLowerCase();\n  \n  for (const topic of commonTopics) {\n    if (inputLower.includes(topic)) {\n      return topic;\n    }\n  }\n  \n  return 'your situation';\n}\n\n// Make response more casual based on player preference\nfunction makeCasual(response: string, language: string): string {\n  if (language === 'Hinglish') {\n    return response.replace(/\\b(you|your)\\b/g, 'tum').replace(/\\b(You|Your)\\b/g, 'Tum');\n  }\n  return response;\n}\n\n// Calculate AI confidence based on context\nfunction calculateConfidence(emotionalContext: any, gameState: GameState): number {\n  let confidence = 0.7; // Base confidence\n  \n  // Increase confidence for clear emotional signals\n  if (emotionalContext.intensity > 0.7) {\n    confidence += 0.1;\n  }\n  \n  // Increase confidence for high context relevance\n  if (emotionalContext.context_relevance > 0.5) {\n    confidence += 0.1;\n  }\n  \n  // Decrease confidence for extreme emotional states\n  if (emotionalContext.primary_emotion === 'stress' && gameState.loop_status === 'Looping') {\n    confidence -= 0.1;\n  }\n  \n  return Math.min(Math.max(confidence, 0.3), 0.95);\n}\n\n// Update player learning data\nasync function updatePlayerLearningData(playerName: string, userInput: string, response: AIResponse, gameState: GameState) {\n  const playerProfile = await getPlayerProfile(playerName);\n  \n  const updatedProfile: Partial<PlayerProfile> = {\n    game_progress: {\n      total_xp: gameState.xp_level,\n      current_mood: gameState.mood,\n      financial_status: gameState.financial_data,\n      team_status: gameState.team_data\n    },\n    ai_learning_data: {\n      ...playerProfile?.ai_learning_data,\n      conversation_patterns: {\n        ...playerProfile?.ai_learning_data?.conversation_patterns,\n        last_topic: extractMainTopic(userInput),\n        emotional_state: gameState.emotional_state,\n        response_confidence: response.confidence\n      }\n    }\n  };\n  \n  await updatePlayerProfile(playerName, updatedProfile);\n  \n  // Store knowledge for future use\n  const knowledge: AIKnowledgeBase = {\n    topic: extractMainTopic(userInput),\n    context_type: gameState.emotional_state,\n    response_pattern: response.message.substring(0, 100),\n    success_rate: response.confidence,\n    usage_count: 1,\n    last_used: new Date().toISOString(),\n    language: 'English', // Fix: use the actual language parameter\n    effectiveness_score: response.confidence\n  };\n  \n  await storeAIKnowledge(knowledge);\n}\n\nexport function registerAdvancedAIRoutes(app: Express) {\n  // Advanced AI chat endpoint\n  app.post('/api/ai/chat', async (req, res) => {\n    try {\n      const request: AdvancedAIRequest = req.body;\n      \n      // Validate request\n      if (!request.userInput || !request.playerName) {\n        return res.status(400).json({ error: 'Missing required fields' });\n      }\n      \n      // Generate advanced AI response\n      const response = await generateAdvancedResponse(request);\n      \n      res.json(response);\n    } catch (error) {\n      console.error('Advanced AI error:', error);\n      res.status(500).json({ \n        error: 'AI processing failed',\n        message: 'Sorry, I encountered an issue. Please try again.'\n      });\n    }\n  });\n  \n  // Feedback endpoint for AI learning\n  app.post('/api/ai/feedback', async (req, res) => {\n    try {\n      const { conversationId, feedbackScore, playerName } = req.body;\n      \n      // Update conversation with feedback for learning\n      // This will help the AI improve future responses\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Feedback error:', error);\n      res.status(500).json({ error: 'Failed to process feedback' });\n    }\n  });\n  \n  // Get player insights\n  app.get('/api/ai/insights/:playerName', async (req, res) => {\n    try {\n      const { playerName } = req.params;\n      const profile = await getPlayerProfile(playerName);\n      \n      res.json(profile?.ai_learning_data || {});\n    } catch (error) {\n      console.error('Insights error:', error);\n      res.status(500).json({ error: 'Failed to get insights' });\n    }\n  });\n}","size_bytes":33527},"server/apk-builder.ts":{"content":"import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport axios from 'axios';\nimport fs from 'fs';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\nexport interface BuildStatus {\n  step: 'github_push' | 'expo_publish' | 'expo_build' | 'polling' | 'complete' | 'error';\n  message: string;\n  success: boolean;\n  downloadUrl?: string;\n  error?: string;\n}\n\nexport class APKBuilder {\n  private githubToken: string;\n  private easToken: string;\n  private repoName: string;\n  private username: string;\n  private projectSlug: string;\n\n  constructor() {\n    this.githubToken = process.env.GITHUB_TOKEN || '';\n    this.easToken = process.env.EAS_TOKEN || '';\n    this.repoName = 'Wealth-Sprint';\n    this.username = 'ayushmko73';\n    this.projectSlug = 'wealth-sprint';\n  }\n\n  async buildAPK(statusCallback?: (status: BuildStatus) => void): Promise<BuildStatus> {\n    const updateStatus = (status: BuildStatus) => {\n      if (statusCallback) statusCallback(status);\n    };\n\n    // Validate that required environment variables are set\n    if (!this.easToken) {\n      const errorStatus = { \n        step: 'error' as const, \n        message: 'EAS_TOKEN not configured', \n        success: false, \n        error: 'Please add your Expo EAS token to Replit secrets' \n      };\n      updateStatus(errorStatus);\n      return errorStatus;\n    }\n\n    if (!this.githubToken) {\n      const errorStatus = { \n        step: 'error' as const, \n        message: 'GITHUB_TOKEN not configured', \n        success: false, \n        error: 'Please add your GitHub token to Replit secrets' \n      };\n      updateStatus(errorStatus);\n      return errorStatus;\n    }\n\n    try {\n      // Step 1: Push to GitHub\n      updateStatus({ step: 'github_push', message: 'Pushing project to GitHub...', success: false });\n      await this.pushToGitHub();\n      updateStatus({ step: 'github_push', message: 'GitHub push complete', success: true });\n\n      // Step 2: Publish to Expo\n      updateStatus({ step: 'expo_publish', message: 'Publishing project to Expo...', success: false });\n      await this.publishToExpo();\n      updateStatus({ step: 'expo_publish', message: 'Project published to Expo', success: true });\n\n      // Step 3: Start Expo build\n      updateStatus({ step: 'expo_build', message: 'Starting Expo build...', success: false });\n      const buildId = await this.startExpoBuild();\n      updateStatus({ step: 'expo_build', message: `Expo build started (ID: ${buildId})`, success: true });\n\n      // Step 4: Poll build status\n      updateStatus({ step: 'polling', message: 'Building APK...', success: false });\n      const result = await this.pollBuildStatus(buildId, updateStatus);\n\n      if (result.success && result.downloadUrl) {\n        const finalStatus = { \n          step: 'complete' as const, \n          message: 'APK Ready', \n          success: true, \n          downloadUrl: result.downloadUrl \n        };\n        updateStatus(finalStatus);\n        return finalStatus;\n      } else {\n        const errorStatus = { \n          step: 'error' as const, \n          message: 'Build failed', \n          success: false, \n          error: result.error \n        };\n        updateStatus(errorStatus);\n        return errorStatus;\n      }\n    } catch (error) {\n      const errorStatus = { \n        step: 'error' as const, \n        message: 'Build process failed', \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n      updateStatus(errorStatus);\n      return errorStatus;\n    } finally {\n      // Clean up temp directory\n      try {\n        await execAsync(`rm -rf ./temp-deploy`);\n      } catch (cleanupError) {\n        console.log('Warning: Could not clean up temp directory');\n      }\n    }\n  }\n\n  private async pushToGitHub(): Promise<void> {\n    try {\n      if (!this.githubToken) {\n        throw new Error('GitHub token not available');\n      }\n\n      // Check if repo exists, create only if it doesn't exist\n      const repoExists = await this.checkRepoExists();\n      if (!repoExists) {\n        console.log(`Repository ${this.repoName} does not exist, creating...`);\n        await this.createGitHubRepo();\n        // Wait a moment for repo to be fully created\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } else {\n        console.log(`Repository ${this.repoName} already exists, using existing repo...`);\n      }\n\n      // Create a temporary directory for clean deployment\n      const tempDir = './temp-deploy';\n      await execAsync(`rm -rf ${tempDir}`);\n      await execAsync(`mkdir -p ${tempDir}`);\n\n      // Skip copying complex files - create everything from scratch for minimal build\n      console.log('Creating minimal Expo project structure...');\n\n      // Create mobile-compatible package.json (removes problematic dependencies)\n      await this.createMobilePackageJson(tempDir);\n\n      // Create mobile-compatible vite.config.ts without glsl plugin\n      await this.createMobileViteConfig(tempDir);\n\n      // Create EAS build configuration\n      await this.createEASConfig(tempDir);\n\n      // Create Expo app entry point\n      await this.createExpoEntry(tempDir);\n\n      // List files in temp directory for debugging\n      const filesResult = await execAsync(`ls -la ${tempDir}`);\n      console.log('Files in temp directory:', filesResult.stdout);\n\n      // Generate yarn.lock for consistent builds\n      console.log('Generating yarn.lock for consistent builds...');\n      try {\n        await execAsync(`cd ${tempDir} && timeout 60s yarn install --ignore-engines --ignore-scripts --network-timeout 30000`);\n        console.log('yarn.lock generated successfully');\n      } catch (yarnError) {\n        console.log('yarn install timed out or failed, continuing without yarn.lock...');\n        // Continue without yarn.lock - EAS will handle dependency resolution\n      }\n\n      // Initialize fresh git repository\n      await execAsync(`cd ${tempDir} && rm -rf .git`); // Clean any existing git\n      await execAsync(`cd ${tempDir} && git init`);\n      await execAsync(`cd ${tempDir} && git config user.email \"build@wealthsprint.com\"`);\n      await execAsync(`cd ${tempDir} && git config user.name \"Wealth Sprint Build\"`);\n\n      // Add all files\n      await execAsync(`cd ${tempDir} && git add .`);\n\n      // Check what we're committing\n      const statusOutput = await execAsync(`cd ${tempDir} && git status --short`);\n      console.log('Files to commit:', statusOutput.stdout);\n\n      // Ensure yarn.lock is included if it exists\n      const yarnLockExists = await execAsync(`cd ${tempDir} && ls yarn.lock 2>/dev/null || echo \"not found\"`);\n      if (yarnLockExists.stdout.includes('yarn.lock')) {\n        console.log('yarn.lock found and will be committed');\n      }\n\n      // Check if there are any files to commit\n      if (statusOutput.stdout.trim() === '') {\n        throw new Error('No files to commit - temp directory might be empty');\n      }\n\n      // Commit files\n      await execAsync(`cd ${tempDir} && git commit -m \"Expo mobile build\"`);\n\n      // Create and switch to main branch explicitly\n      await execAsync(`cd ${tempDir} && git branch -M main`);\n\n      // Set up remote and push\n      const remoteUrl = `https://${this.githubToken}@github.com/${this.username}/${this.repoName}.git`;\n      await execAsync(`cd ${tempDir} && git remote add origin ${remoteUrl}`);\n\n      // Check current branch before pushing\n      const branchResult = await execAsync(`cd ${tempDir} && git branch --show-current`);\n      console.log('Current branch:', branchResult.stdout.trim());\n\n      try {\n        await execAsync(`cd ${tempDir} && git push -f origin main`);\n        console.log('GitHub push completed successfully');\n      } catch (pushError) {\n        console.log('Push failed, trying to create branch first...');\n        // Try to push with --set-upstream flag to create the branch\n        await execAsync(`cd ${tempDir} && git push --set-upstream origin main`);\n        console.log('GitHub push completed successfully with --set-upstream');\n      }\n\n    } catch (error) {\n      throw new Error(`GitHub push failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async checkRepoExists(): Promise<boolean> {\n    try {\n      const response = await axios.get(\n        `https://api.github.com/repos/${this.username}/${this.repoName}`,\n        {\n          headers: {\n            'Authorization': `token ${this.githubToken}`,\n            'Accept': 'application/vnd.github.v3+json'\n          }\n        }\n      );\n      return response.status === 200;\n    } catch {\n      return false;\n    }\n  }\n\n  private async createGitHubRepo(): Promise<void> {\n    try {\n      await axios.post(\n        'https://api.github.com/user/repos',\n        {\n          name: this.repoName,\n          private: false,\n          description: 'Wealth Sprint Game - Expo APK Build',\n          auto_init: false // Don't auto-init to avoid conflicts\n        },\n        {\n          headers: {\n            'Authorization': `token ${this.githubToken}`,\n            'Accept': 'application/vnd.github.v3+json'\n          }\n        }\n      );\n      console.log(`Created GitHub repository: ${this.repoName}`);\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response?.status === 422) {\n        // Repository already exists - this is expected, not an error\n        console.log(`Repository ${this.repoName} already exists, will use existing repo`);\n        return;\n      }\n      throw new Error(`Failed to create GitHub repo: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async getGitHubUsername(): Promise<string> {\n    try {\n      const response = await axios.get(\n        'https://api.github.com/user',\n        {\n          headers: {\n            'Authorization': `token ${this.githubToken}`,\n            'Accept': 'application/vnd.github.v3+json'\n          }\n        }\n      );\n      return response.data.login;\n    } catch (error) {\n      throw new Error(`Failed to get GitHub username: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async publishToExpo(): Promise<void> {\n    try {\n      // Skip separate publish step - we'll build directly with EAS\n      console.log('Skipping separate publish step - building directly with EAS');\n    } catch (error) {\n      throw new Error(`Failed to publish to Expo: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async startExpoBuild(): Promise<string> {\n    try {\n      // Create required Expo config files\n      await this.createExpoConfig();\n\n      // Use EAS CLI with robot token (modern approach)\n      const { exec } = await import('child_process');\n      const util = await import('util');\n      const execAsync = util.promisify(exec);\n\n      // Clear any existing node_modules and package-lock.json to avoid conflicts\n      console.log('Cleaning up previous installations...');\n      await execAsync(`cd ./temp-deploy && rm -rf node_modules package-lock.json yarn.lock`);\n\n      // Install EAS CLI globally first as fallback\n      console.log('Installing EAS CLI globally...');\n      try {\n        await execAsync(`npm install -g @expo/cli@latest eas-cli@latest`);\n        console.log('Global EAS CLI installed successfully');\n      } catch (globalInstallError) {\n        console.log('Global install warning:', globalInstallError);\n      }\n\n      // Install locally with specific versions known to work\n      console.log('Installing Expo CLI locally with specific versions...');\n      try {\n        await execAsync(`cd ./temp-deploy && npm install @expo/cli@0.24.20 eas-cli@16.14.1 --save-dev --no-package-lock`);\n        console.log('Expo CLI installed successfully');\n      } catch (installError) {\n        console.log('Local CLI installation failed, will try global fallback:', installError);\n      }\n\n      // Check EAS CLI version with fallback\n      let easCommand = 'npx eas';\n      try {\n        const versionResult = await execAsync(`cd ./temp-deploy && ${easCommand} --version`);\n        console.log('EAS CLI Version:', versionResult.stdout.trim());\n      } catch (versionError) {\n        console.log('Local EAS CLI failed, trying global...');\n        easCommand = 'eas';\n        try {\n          const globalVersionResult = await execAsync(`${easCommand} --version`);\n          console.log('Global EAS CLI Version:', globalVersionResult.stdout.trim());\n        } catch (globalVersionError) {\n          throw new Error('Both local and global EAS CLI installation failed');\n        }\n      }\n\n      // Skip EAS project initialization since project already exists\n      console.log('Using existing EAS project: 10875d3a-24af-456e-a5f5-d0847f637d69');\n\n      // Verify app config can be read with fallback command\n      console.log('Verifying app configuration...');\n      try {\n        await execAsync(`cd ./temp-deploy && EXPO_TOKEN=${this.easToken} ${easCommand === 'eas' ? 'expo' : 'npx expo'} config --json`);\n        console.log('App config verified successfully');\n      } catch (configError) {\n        console.log('Config verification warning:', configError);\n      }\n\n      // Build using EAS CLI with preview profile to avoid keystore issues\n      console.log('Starting EAS build...');\n      let buildCmd = `cd ./temp-deploy && EXPO_TOKEN=${this.easToken} ${easCommand} build --platform android --profile preview --non-interactive --json --clear-cache`;\n      \n      let result;\n      try {\n        result = await execAsync(buildCmd, { timeout: 300000 }); // 5 minute timeout\n      } catch (localBuildError) {\n        console.log('Local EAS build failed, trying global command...');\n        buildCmd = `cd ./temp-deploy && EXPO_TOKEN=${this.easToken} eas build --platform android --profile preview --non-interactive --json --clear-cache`;\n        result = await execAsync(buildCmd, { timeout: 300000 });\n      }\n\n      let buildData;\n      try {\n        buildData = JSON.parse(result.stdout);\n      } catch (parseErr) {\n        console.error('Build output:', result.stdout);\n        console.error('Build stderr:', result.stderr);\n        throw new Error('Failed to parse build response');\n      }\n\n      if (buildData.builds && buildData.builds.length > 0) {\n        const androidBuild = buildData.builds.find((build: any) => build.platform === 'android');\n        if (androidBuild && androidBuild.buildId) {\n          return androidBuild.buildId;\n        }\n      }\n      \n      throw new Error('No Android build ID returned from EAS build');\n    } catch (error) {\n      console.error('EAS build error:', error);\n      throw new Error(`Failed to start Expo build: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async createExpoConfig(): Promise<void> {\n    // Create proper Expo config with all required fields for EAS build\n    const expoConfig = {\n      expo: {\n        name: \"Wealth Sprint\",\n        slug: \"wealth-sprint\",\n        owner: \"ayushmk32\",\n        version: \"1.0.0\",\n        sdkVersion: \"52.0.0\",\n        orientation: \"portrait\",\n        icon: \"./generated-icon.png\",\n        userInterfaceStyle: \"light\",\n        platforms: [\"ios\", \"android\", \"web\"],\n        splash: {\n          image: \"./generated-icon.png\",\n          resizeMode: \"contain\",\n          backgroundColor: \"#ffffff\"\n        },\n        assetBundlePatterns: [\"**/*\"],\n        ios: {\n          supportsTablet: true,\n          bundleIdentifier: \"com.wealthsprint.app\"\n        },\n        android: {\n          adaptiveIcon: {\n            foregroundImage: \"./generated-icon.png\",\n            backgroundColor: \"#ffffff\"\n          },\n          package: \"com.wealthsprint.app\",\n          versionCode: 1\n        },\n        web: {\n          favicon: \"./generated-icon.png\",\n          bundler: \"metro\"\n        },\n        plugins: [],\n        experiments: {\n          typedRoutes: false\n        },\n        extra: {\n          eas: {\n            projectId: \"10875d3a-24af-456e-a5f5-d0847f637d69\"\n          }\n        }\n      }\n    };\n\n    fs.writeFileSync('./temp-deploy/app.json', JSON.stringify(expoConfig, null, 2));\n    \n    // Also create app.config.js for better compatibility\n    const appConfigJs = `module.exports = ${JSON.stringify(expoConfig, null, 2)};`;\n    fs.writeFileSync('./temp-deploy/app.config.js', appConfigJs);\n  }\n\n  private async createMobilePackageJson(tempDir: string): Promise<void> {\n    // Create a simple icon for the mobile app\n    const iconSvg = `<svg width=\"192\" height=\"192\" viewBox=\"0 0 192 192\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"192\" height=\"192\" fill=\"#4F46E5\"/>\n      <text x=\"96\" y=\"110\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" text-anchor=\"middle\" fill=\"white\">WS</text>\n      <text x=\"96\" y=\"135\" font-family=\"Arial, sans-serif\" font-size=\"12\" text-anchor=\"middle\" fill=\"#E0E7FF\">Game</text>\n    </svg>`;\n\n    // Create a simple icon file\n    fs.writeFileSync(path.join(tempDir, 'generated-icon.png'), iconSvg);\n\n    // Create mobile-compatible version with exact Expo SDK versions\n    const mobilePackage = {\n      name: \"wealth-sprint\",\n      version: \"1.0.0\",\n      main: \"App.js\",\n      license: \"MIT\",\n      engines: {\n        \"node\": \">=20.0.0\"\n      },\n      dependencies: {\n        \"expo\": \"~52.0.0\",\n        \"react\": \"18.3.1\",\n        \"react-dom\": \"18.3.1\",\n        \"react-native\": \"0.76.3\",\n        \"react-native-web\": \"~0.19.12\",\n        \"expo-constants\": \"~17.0.0\",\n        \"expo-status-bar\": \"~2.0.0\",\n        \"@expo/cli\": \"^0.24.0\",\n        \"clsx\": \"^2.1.1\"\n      },\n      devDependencies: {\n        \"@babel/core\": \"^7.25.0\",\n        \"@types/react\": \"~18.3.0\",\n        \"typescript\": \"~5.3.3\"\n      },\n      scripts: {\n        \"start\": \"expo start\",\n        \"android\": \"expo start --android\",\n        \"ios\": \"expo start --ios\",\n        \"web\": \"expo start --web\"\n      }\n    };\n\n    fs.writeFileSync(path.join(tempDir, 'package.json'), JSON.stringify(mobilePackage, null, 2));\n  }\n\n  private async createMobileViteConfig(tempDir: string): Promise<void> {\n    const mobileViteConfig = `import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    // Note: glsl plugin removed for mobile compatibility\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});`;\n\n    fs.writeFileSync(path.join(tempDir, 'vite.config.ts'), mobileViteConfig);\n  }\n\n  private async createEASConfig(tempDir: string): Promise<void> {\n    const easConfig = {\n      cli: {\n        version: \">= 3.0.0\",\n        appVersionSource: \"remote\"\n      },\n      build: {\n        production: {\n          android: {\n            buildType: \"apk\",\n            autoIncrement: \"versionCode\"\n          },\n          node: \"20.18.1\",\n          distribution: \"internal\",\n          env: {\n            NODE_ENV: \"production\"\n          }\n        },\n        preview: {\n          distribution: \"internal\",\n          node: \"20.18.1\",\n          android: {\n            buildType: \"apk\",\n            autoIncrement: \"versionCode\"\n          },\n          env: {\n            NODE_ENV: \"production\"\n          }\n        }\n      },\n      submit: {\n        production: {\n          android: {}\n        }\n      }\n    };\n\n    fs.writeFileSync(path.join(tempDir, 'eas.json'), JSON.stringify(easConfig, null, 2));\n  }\n\n  private async createExpoEntry(tempDir: string): Promise<void> {\n    // Create expo directory and App.js entry point\n    await execAsync(`mkdir -p ${path.join(tempDir, 'expo')}`);\n\n    // Create a simple Expo-compatible App.js\n    const simpleAppContent = `import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Wealth Sprint</Text>\n      <Text style={styles.subtitle}>Financial Game - Mobile Version</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n  },\n});`;\n\n    fs.writeFileSync(path.join(tempDir, 'App.js'), simpleAppContent);\n\n    // Create .gitignore to reduce repository size\n    const gitignoreContent = `node_modules/\n.expo/\ndist/\n.nyc_output/\n.cache/\n.DS_Store\n*.log\n.env\n.env.local\n*.tgz\n*.tar.gz`;\n\n    fs.writeFileSync(path.join(tempDir, '.gitignore'), gitignoreContent);\n\n    // Create a basic metro.config.js\n    const metroConfig = `const { getDefaultConfig } = require('expo/metro-config');\nmodule.exports = getDefaultConfig(__dirname);`;\n\n    fs.writeFileSync(path.join(tempDir, 'metro.config.js'), metroConfig);\n\n    // Create babel.config.js for proper Expo compilation\n    const babelConfig = `module.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};`;\n\n    fs.writeFileSync(path.join(tempDir, 'babel.config.js'), babelConfig);\n  }\n\n  private async initializeEASProject(): Promise<void> {\n    try {\n      const { exec } = await import('child_process');\n      const util = await import('util');\n      const execAsync = util.promisify(exec);\n\n      // Initialize EAS project - this will automatically create project ID\n      console.log('Initializing EAS project...');\n      await execAsync(`cd ./temp-deploy && EXPO_TOKEN=${this.easToken} npx eas project:init --non-interactive`);\n      console.log('EAS project initialized successfully');\n    } catch (error) {\n      console.log('EAS project init warning:', error);\n      // Continue - the build command will handle project creation\n    }\n  }\n\n  private async pollBuildStatus(buildId: string, statusCallback?: (status: BuildStatus) => void): Promise<{ success: boolean; downloadUrl?: string; error?: string }> {\n    const maxAttempts = 180; // 45 minutes (180 attempts * 15 seconds)\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n      try {\n        // Update status for ongoing build\n        if (statusCallback) {\n          statusCallback({\n            step: 'polling',\n            message: `Building APK... (${Math.round(attempts * 15 / 60)} minutes)`,\n            success: false\n          });\n        }\n\n        // Use EAS CLI to check build status with fallback\n        const { exec } = await import('child_process');\n        const util = await import('util');\n        const execAsync = util.promisify(exec);\n\n        let statusCmd = `EXPO_TOKEN=${this.easToken} npx eas build:status --json`;\n        let result;\n        try {\n          result = await execAsync(statusCmd);\n        } catch (localStatusError) {\n          console.log('Local status check failed, trying global...');\n          statusCmd = `EXPO_TOKEN=${this.easToken} eas build:status --json`;\n          result = await execAsync(statusCmd);\n        }\n\n        let statusData;\n        try {\n          statusData = JSON.parse(result.stdout);\n        } catch (parseErr) {\n          console.error('Status parse error:', result.stdout);\n          throw new Error('Failed to parse build status');\n        }\n\n        // Find the Android build\n        const build = statusData.builds.find((b: any) => b.platform === \"android\");\n\n        if (!build) {\n          return { \n            success: false, \n            error: 'No Android build found' \n          };\n        }\n\n        if (build.status === 'finished') {\n          return { \n            success: true, \n            downloadUrl: build.artifacts.buildUrl \n          };\n        } else if (build.status === 'errored') {\n          return { \n            success: false, \n            error: 'Expo build failed' \n          };\n        } else {\n          console.log('⏳ Still building...');\n        }\n\n        // Wait 15 seconds before next check\n        await new Promise(resolve => setTimeout(resolve, 15000));\n        attempts++;\n\n      } catch (error) {\n        console.error(`Polling attempt ${attempts + 1} failed:`, error);\n\n        // Continue trying unless this is the last attempt\n        if (attempts >= maxAttempts - 1) {\n          return { \n            success: false, \n            error: `Build status polling failed after ${maxAttempts} attempts: ${error instanceof Error ? error.message : 'Unknown error'}` \n          };\n        }\n\n        await new Promise(resolve => setTimeout(resolve, 15000));\n        attempts++;\n      }\n    }\n\n    return { \n      success: false, \n      error: 'Build timed out after 45 minutes' \n    };\n  }\n}","size_bytes":25046},"server/gork-api.ts":{"content":"import { Express } from 'express';\nimport fs from 'fs';\nimport path from 'path';\n\ninterface SageRequest {\n  userInput: string;\n  language?: string;\n  emotionalState?: string;\n  financialContext?: any;\n  recentDecisions?: any[];\n}\n\ninterface SageResponse {\n  message: string;\n  insights: {\n    emotionalState: string;\n    financialLoop: string;\n    growthXP: number;\n    suggestions: string[];\n  };\n}\n\ninterface Message {\n  role: 'ai' | 'user';\n  text: string;\n  timestamp: Date;\n}\n\ninterface ChatSession {\n  user: string;\n  language: string;\n  mood: string;\n  messages: Message[];\n  timestamp: string;\n  id: string;\n}\n\n// Ensure saved-chats directory exists\nconst CHATS_DIR = path.join(process.cwd(), 'saved-chats');\nif (!fs.existsSync(CHATS_DIR)) {\n  fs.mkdirSync(CHATS_DIR, { recursive: true });\n}\n\n// Track conversation context to avoid repetitive responses\nconst conversationMemory = new Map<string, string[]>();\n\nexport function registerSageRoutes(app: Express) {\n  app.post('/api/sage/analyze', async (req, res) => {\n    try {\n      const { userInput, language, emotionalState, financialContext, recentDecisions }: SageRequest = req.body;\n      \n      // Validate Sage API key\n      const sageApiKey = process.env.GORK_API;\n      if (!sageApiKey) {\n        return res.status(500).json({ \n          error: 'SAGE_API not configured',\n          message: 'Please add your Sage API key to Replit secrets'\n        });\n      }\n\n      // Create Sage prompt based on user context\n      const prompt = `You are Sage AI, a calm and wise financial mentor. Analyze this user situation:\n\nUser Input: \"${userInput}\"\nCurrent Emotional State: ${emotionalState || 'Unknown'}\nFinancial Context: ${JSON.stringify(financialContext || {})}\nRecent Decisions: ${JSON.stringify(recentDecisions || [])}\n\nProvide a brief, supportive response that:\n1. Shows emotional awareness\n2. Offers gentle financial guidance\n3. Asks one insightful question\n4. Stays under 100 words\n\nRespond in a calm, mentor-like tone without being judgmental.`;\n\n      // Generate response based on context and language with memory\n      const userId = 'user_' + (req.ip || 'default'); // Simple user identification\n      const responses = generateSageResponse(userInput, language, emotionalState, financialContext, userId);\n      \n      res.json(responses);\n    } catch (error) {\n      console.error('Sage API error:', error);\n      res.status(500).json({ \n        error: 'Sage analysis failed',\n        message: 'Unable to process request at this time'\n      });\n    }\n  });\n\n  // Save chat session\n  app.post('/api/sage/save-chat', async (req, res) => {\n    try {\n      const session: ChatSession = req.body;\n      const filename = `${session.id}.json`;\n      const filepath = path.join(CHATS_DIR, filename);\n      \n      fs.writeFileSync(filepath, JSON.stringify(session, null, 2));\n      \n      // Keep only last 20 chats\n      const files = fs.readdirSync(CHATS_DIR)\n        .filter(file => file.endsWith('.json'))\n        .map(file => ({\n          name: file,\n          time: fs.statSync(path.join(CHATS_DIR, file)).mtime\n        }))\n        .sort((a, b) => b.time.getTime() - a.time.getTime());\n\n      if (files.length > 20) {\n        files.slice(20).forEach(file => {\n          fs.unlinkSync(path.join(CHATS_DIR, file.name));\n        });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Failed to save chat:', error);\n      res.status(500).json({ error: 'Failed to save chat' });\n    }\n  });\n\n  // Load chat history\n  app.get('/api/sage/chat-history', async (req, res) => {\n    try {\n      const files = fs.readdirSync(CHATS_DIR)\n        .filter(file => file.endsWith('.json'))\n        .map(file => {\n          const content = fs.readFileSync(path.join(CHATS_DIR, file), 'utf8');\n          return JSON.parse(content);\n        })\n        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n      \n      res.json(files);\n    } catch (error) {\n      console.error('Failed to load chat history:', error);\n      res.json([]);\n    }\n  });\n\n  // Load specific chat session\n  app.get('/api/sage/load-chat/:sessionId', async (req, res) => {\n    try {\n      const sessionId = req.params.sessionId;\n      const filepath = path.join(CHATS_DIR, `${sessionId}.json`);\n      \n      if (fs.existsSync(filepath)) {\n        const content = fs.readFileSync(filepath, 'utf8');\n        const session = JSON.parse(content);\n        res.json(session);\n      } else {\n        res.status(404).json({ error: 'Chat session not found' });\n      }\n    } catch (error) {\n      console.error('Failed to load chat session:', error);\n      res.status(500).json({ error: 'Failed to load chat session' });\n    }\n  });\n}\n\nfunction generateSageResponse(userInput: string, language?: string, emotionalState?: string, financialContext?: any, userId?: string): SageResponse {\n  // Language-specific responses with much more variety\n  const responses: { [key: string]: any } = {\n    English: [\n      {\n        message: \"I can help you build better financial habits and make smarter decisions. What specific area would you like to focus on today?\",\n        insights: { emotionalState: 'Helpful', financialLoop: 'Getting Started', growthXP: 10, suggestions: ['Start with your biggest financial goal', 'Track your spending for a week', 'Learn about investment basics'] }\n      },\n      {\n        message: \"Great question! Financial growth happens step by step. Let me share some insights based on your current situation.\",\n        insights: { emotionalState: 'Encouraging', financialLoop: 'Learning Phase', growthXP: 15, suggestions: ['Focus on one area at a time', 'Build emergency savings first', 'Understand your risk tolerance'] }\n      },\n      {\n        message: \"I notice you're moving quickly through decisions. Sometimes our best insights come when we pause. Take a breath. What's driving this urgency?\",\n        insights: { emotionalState: 'Focused', financialLoop: 'Decision Acceleration', growthXP: 12, suggestions: ['Take a 2-minute breathing break', 'Review your last 3 decisions', 'Ask: What am I avoiding?'] }\n      },\n      {\n        message: \"You're doing well, let's reflect on this together. Your spending pattern shows growth potential. Ready to explore a different approach?\",\n        insights: { emotionalState: 'Reflective', financialLoop: 'Breaking Pattern', growthXP: 18, suggestions: ['Identify the trigger emotion', 'Set a 24-hour decision delay', 'Focus on one business layer'] }\n      },\n      {\n        message: \"I'm here to guide you. Your choices show wisdom, but your emotional energy could use attention. How are you feeling about your progress?\",\n        insights: { emotionalState: 'Balanced', financialLoop: 'Growth Phase', growthXP: 24, suggestions: ['Celebrate small wins', 'Reconnect with your why', 'Balance logic with intuition'] }\n      },\n      {\n        message: \"Money decisions can feel overwhelming sometimes. Let's break this down into smaller, manageable steps. What's your biggest concern right now?\",\n        insights: { emotionalState: 'Supportive', financialLoop: 'Problem Solving', growthXP: 14, suggestions: ['List your top 3 financial priorities', 'Start with the easiest win', 'Don\\'t rush big decisions'] }\n      },\n      {\n        message: \"Every financial journey is unique. Tell me more about what success looks like for you?\",\n        insights: { emotionalState: 'Curious', financialLoop: 'Goal Setting', growthXP: 16, suggestions: ['Define your personal success', 'Set both short and long-term goals', 'Focus on what you can control'] }\n      }\n    ],\n    Hindi: [\n      {\n        message: \"मैं आपकी financial planning में मदद कर सकता हूं। आज आप किस चीज़ पर focus करना चाहते हैं?\",\n        insights: { emotionalState: 'सहायक', financialLoop: 'शुरुआत', growthXP: 10, suggestions: ['अपना सबसे बड़ा financial goal तय करें', 'एक हफ्ते तक खर्च track करें', 'investment की basics सीखें'] }\n      },\n      {\n        message: \"बहुत अच्छा सवाल! Financial growth धीरे-धीरे होती है। मैं आपकी current situation के आधार पर कुछ insights share करता हूं।\",\n        insights: { emotionalState: 'प्रोत्साहनकारी', financialLoop: 'सीखने का चरण', growthXP: 15, suggestions: ['एक समय में एक area पर focus करें', 'पहले emergency savings बनाएं', 'अपना risk tolerance समझें'] }\n      },\n      {\n        message: \"मैं देख रहा हूँ कि आप जल्दी-जल्दी निर्णय ले रहे हैं। कभी-कभी जब हम रुकते हैं तो बेहतर समझ मिलती है। गहरी सांस लें। इस जल्दबाजी की वजह क्या है?\",\n        insights: { emotionalState: 'केंद्रित', financialLoop: 'निर्णय तेज़ी', growthXP: 12, suggestions: ['2 मिनट का ब्रेक लें', 'अपने पिछले 3 निर्णयों की समीक्षा करें', 'पूछें: मैं किससे बच रहा हूँ?'] }\n      },\n      {\n        message: \"आप अच्छा कर रहे हैं, आइए इस पर एक साथ विचार करते हैं। आपका खर्च का पैटर्न विकास की संभावना दिखाता है। क्या आप एक अलग तरीका अपनाने को तैयार हैं?\",\n        insights: { emotionalState: 'चिंतनशील', financialLoop: 'पैटर्न तोड़ना', growthXP: 18, suggestions: ['ट्रिगर इमोशन की पहचान करें', '24 घंटे की देरी रखें', 'एक बिजनेस लेयर पर फोकस करें'] }\n      }\n    ],\n    Hinglish: [\n      {\n        message: \"Main aapki financial planning mein help kar sakta hun. Aaj aap kya focus karna chahte hain?\",\n        insights: { emotionalState: 'Helpful', financialLoop: 'Getting Started', growthXP: 10, suggestions: ['Apna biggest financial goal set karo', 'Ek week spending track karo', 'Investment basics seekho'] }\n      },\n      {\n        message: \"Bahut achha question! Financial growth slowly slowly hoti hai. Main aapki current situation ke basis pe kuch insights share karta hun.\",\n        insights: { emotionalState: 'Encouraging', financialLoop: 'Learning Phase', growthXP: 15, suggestions: ['Ek time pe ek area pe focus karo', 'Pehle emergency savings banao', 'Apna risk tolerance samjho'] }\n      },\n      {\n        message: \"Main notice kar raha hun ki aap bohot fast decisions le rahe hain. Sometimes jab hum pause karte hain toh better insights milte hain. Deep breath lo. Ye urgency kya drive kar rahi hai?\",\n        insights: { emotionalState: 'Focused', financialLoop: 'Decision Acceleration', growthXP: 12, suggestions: ['2 minute ka breathing break lo', 'Apne last 3 decisions review karo', 'Poocho: Main kya avoid kar raha hun?'] }\n      },\n      {\n        message: \"Aap achha kar rahe hain, let's reflect karte hain together. Aapka spending pattern growth potential dikhata hai. Ready hain different approach try karne ke liye?\",\n        insights: { emotionalState: 'Reflective', financialLoop: 'Breaking Pattern', growthXP: 18, suggestions: ['Trigger emotion identify karo', '24-hour decision delay rakho', 'Ek business layer pe focus karo'] }\n      }\n    ]\n  };\n\n  // Get responses for the selected language (fallback to English)\n  const languageResponses = responses[language || 'English'] || responses['English'];\n  \n  // Track user's conversation history to avoid repetitive responses\n  const userKey = userId || 'default';\n  if (!conversationMemory.has(userKey)) {\n    conversationMemory.set(userKey, []);\n  }\n  const userHistory = conversationMemory.get(userKey)!;\n  \n  // Much smarter response selection based on user input\n  let selectedResponse = languageResponses[0]; // Default\n  \n  // Analyze user input for better response matching\n  const input = userInput.toLowerCase();\n  \n  // Help/guidance related queries\n  if (input.includes('help') || input.includes('guide') || input.includes('assist') || \n      input.includes('मदद') || input.includes('help kar') || input.includes('guide kar')) {\n    selectedResponse = languageResponses[0];\n  }\n  // Questions about improvement/skills/learning\n  else if (input.includes('improve') || input.includes('skill') || input.includes('learn') || \n           input.includes('better') || input.includes('grow') || input.includes('develop') ||\n           input.includes('सुधार') || input.includes('skill') || input.includes('सीख')) {\n    selectedResponse = languageResponses[1];\n  }\n  // Stress/worry/tension related\n  else if (input.includes('stress') || input.includes('worry') || input.includes('tension') || \n           input.includes('anxious') || input.includes('चिंता') || input.includes('परेशान')) {\n    selectedResponse = languageResponses[2] || languageResponses[0];\n  }\n  // Progress/good/positive related\n  else if (input.includes('good') || input.includes('progress') || input.includes('success') ||\n           input.includes('अच्छा') || input.includes('achha') || input.includes('progress') ||\n           input.includes('सफल')) {\n    selectedResponse = languageResponses[3] || languageResponses[1] || languageResponses[0];\n  }\n  // Money/financial concerns\n  else if (input.includes('money') || input.includes('financial') || input.includes('invest') ||\n           input.includes('save') || input.includes('earn') || input.includes('पैसा') ||\n           input.includes('निवेश') || input.includes('बचत')) {\n    selectedResponse = languageResponses[5] || languageResponses[0];\n  }\n  // Goal/future planning\n  else if (input.includes('goal') || input.includes('plan') || input.includes('future') ||\n           input.includes('target') || input.includes('लक्ष्य') || input.includes('योजना')) {\n    selectedResponse = languageResponses[6] || languageResponses[1] || languageResponses[0];\n  }\n  // Random selection for generic inputs to add variety\n  else {\n    // Filter out recently used responses\n    const availableResponses = languageResponses.filter((resp, index) => \n      !userHistory.includes(resp.message.substring(0, 30))\n    );\n    \n    if (availableResponses.length > 0) {\n      const randomIndex = Math.floor(Math.random() * availableResponses.length);\n      selectedResponse = availableResponses[randomIndex];\n    } else {\n      // If all responses were used, reset history and pick random\n      userHistory.length = 0;\n      const randomIndex = Math.floor(Math.random() * languageResponses.length);\n      selectedResponse = languageResponses[randomIndex];\n    }\n  }\n\n  // Remember this response to avoid repetition\n  const responseKey = selectedResponse.message.substring(0, 30);\n  userHistory.push(responseKey);\n  \n  // Keep only last 5 responses in memory\n  if (userHistory.length > 5) {\n    userHistory.shift();\n  }\n\n  return selectedResponse;\n}","size_bytes":15555},"server/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_ANON_KEY;\n\n// Initialize Supabase client only if credentials are available\nexport const supabase = supabaseUrl && supabaseKey \n  ? createClient(supabaseUrl, supabaseKey)\n  : null;\n\n// Database schemas for AI learning\nexport interface ConversationEntry {\n  id?: string;\n  player_name: string;\n  user_input: string;\n  ai_response: string;\n  game_context: {\n    emotional_state?: string;\n    loop_status?: string;\n    xp_level?: number;\n    mood?: string;\n    financial_data?: any;\n    team_data?: any;\n    current_section?: string;\n  };\n  language: string;\n  timestamp: string;\n  feedback_score?: number;\n  learning_tags?: string[];\n}\n\nexport interface PlayerProfile {\n  id?: string;\n  player_name: string;\n  preferences: {\n    communication_style?: string;\n    preferred_language?: string;\n    response_length?: string;\n    topics_of_interest?: string[];\n  };\n  game_progress: {\n    total_xp?: number;\n    current_mood?: string;\n    financial_status?: any;\n    team_status?: any;\n  };\n  ai_learning_data: {\n    successful_responses?: string[];\n    unsuccessful_responses?: string[];\n    preferred_response_types?: string[];\n    conversation_patterns?: any;\n  };\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface AIKnowledgeBase {\n  id?: string;\n  topic: string;\n  context_type: string;\n  response_pattern: string;\n  success_rate: number;\n  usage_count: number;\n  last_used: string;\n  language: string;\n  effectiveness_score: number;\n}\n\n// Initialize database tables\nexport async function initializeDatabase() {\n  try {\n    if (!supabase) {\n      console.log('⚠️  Supabase not configured. AI features will be limited.');\n      return;\n    }\n    \n    console.log('Initializing Supabase database for GORK AI...');\n    \n    // Test connection first\n    const { data, error } = await supabase\n      .from('conversations')\n      .select('count', { count: 'exact', head: true });\n    \n    if (error && error.code === '42P01') {\n      console.log('🔧 Creating database tables automatically...');\n      \n      // Create tables automatically\n      const { error: createError } = await supabase.rpc('exec', {\n        sql: `\n          -- Conversations table for storing chat history\n          CREATE TABLE IF NOT EXISTS conversations (\n              id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n              player_name TEXT NOT NULL,\n              user_input TEXT NOT NULL,\n              ai_response TEXT NOT NULL,\n              game_context JSONB DEFAULT '{}',\n              language TEXT DEFAULT 'English',\n              timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n              feedback_score INTEGER,\n              learning_tags TEXT[]\n          );\n\n          -- Player profiles table for AI personalization\n          CREATE TABLE IF NOT EXISTS player_profiles (\n              id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n              player_name TEXT UNIQUE NOT NULL,\n              preferences JSONB DEFAULT '{}',\n              game_progress JSONB DEFAULT '{}',\n              ai_learning_data JSONB DEFAULT '{}',\n              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n          );\n\n          -- AI knowledge base for learning patterns\n          CREATE TABLE IF NOT EXISTS ai_knowledge_base (\n              id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n              topic TEXT NOT NULL,\n              context_type TEXT NOT NULL,\n              response_pattern TEXT NOT NULL,\n              success_rate DECIMAL(5,4) DEFAULT 0.7,\n              usage_count INTEGER DEFAULT 1,\n              last_used TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n              language TEXT DEFAULT 'English',\n              effectiveness_score DECIMAL(5,4) DEFAULT 0.7\n          );\n\n          -- Indexes for better performance\n          CREATE INDEX IF NOT EXISTS idx_conversations_player_name ON conversations(player_name);\n          CREATE INDEX IF NOT EXISTS idx_conversations_timestamp ON conversations(timestamp DESC);\n          CREATE INDEX IF NOT EXISTS idx_player_profiles_player_name ON player_profiles(player_name);\n          CREATE INDEX IF NOT EXISTS idx_ai_knowledge_topic ON ai_knowledge_base(topic);\n          CREATE INDEX IF NOT EXISTS idx_ai_knowledge_language ON ai_knowledge_base(language);\n\n          -- RLS policies (Row Level Security)\n          ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;\n          ALTER TABLE player_profiles ENABLE ROW LEVEL SECURITY;\n          ALTER TABLE ai_knowledge_base ENABLE ROW LEVEL SECURITY;\n\n          -- Allow read/write access for authenticated users\n          CREATE POLICY \"Allow all operations for authenticated users\" ON conversations\n              FOR ALL USING (true);\n\n          CREATE POLICY \"Allow all operations for authenticated users\" ON player_profiles\n              FOR ALL USING (true);\n\n          CREATE POLICY \"Allow all operations for authenticated users\" ON ai_knowledge_base\n              FOR ALL USING (true);\n        `\n      });\n      \n      if (createError) {\n        console.log('❌ Auto-creation failed. Please run the SQL setup script manually.');\n        console.log('Navigate to: https://supabase.com/dashboard/project/[YOUR_PROJECT]/sql');\n        console.log('Run the SQL script from database/setup.sql file');\n      } else {\n        console.log('✅ Database tables created automatically!');\n      }\n    } else {\n      console.log('✅ Database tables are ready for GORK AI learning system');\n    }\n  } catch (error) {\n    console.error('Database initialization error:', error);\n    console.log('Please ensure Supabase credentials are correct and tables exist');\n  }\n}\n\n// Store conversation for learning\nexport async function storeConversation(entry: ConversationEntry) {\n  try {\n    if (!supabase) {\n      console.log('Supabase not available - conversation not stored');\n      return null;\n    }\n    \n    const { data, error } = await supabase\n      .from('conversations')\n      .insert([entry])\n      .select();\n    \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error storing conversation:', error);\n    return null;\n  }\n}\n\n// Get player profile\nexport async function getPlayerProfile(playerName: string): Promise<PlayerProfile | null> {\n  try {\n    if (!supabase) return null;\n    \n    const { data, error } = await supabase\n      .from('player_profiles')\n      .select('*')\n      .eq('player_name', playerName)\n      .single();\n    \n    if (error && error.code !== 'PGRST116') throw error;\n    return data;\n  } catch (error) {\n    console.error('Error getting player profile:', error);\n    return null;\n  }\n}\n\n// Update player profile\nexport async function updatePlayerProfile(playerName: string, updates: Partial<PlayerProfile>) {\n  try {\n    if (!supabase) return null;\n    \n    const { data, error } = await supabase\n      .from('player_profiles')\n      .upsert([{\n        player_name: playerName,\n        ...updates,\n        updated_at: new Date().toISOString()\n      }])\n      .select();\n    \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error updating player profile:', error);\n    return null;\n  }\n}\n\n// Get conversation history for learning\nexport async function getConversationHistory(playerName: string, limit: number = 10) {\n  try {\n    if (!supabase) return [];\n    \n    const { data, error } = await supabase\n      .from('conversations')\n      .select('*')\n      .eq('player_name', playerName)\n      .order('timestamp', { ascending: false })\n      .limit(limit);\n    \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error getting conversation history:', error);\n    return [];\n  }\n}\n\n// Store AI knowledge for learning\nexport async function storeAIKnowledge(knowledge: AIKnowledgeBase) {\n  try {\n    if (!supabase) return null;\n    \n    const { data, error } = await supabase\n      .from('ai_knowledge_base')\n      .upsert([knowledge])\n      .select();\n    \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error storing AI knowledge:', error);\n    return null;\n  }\n}\n\n// Get relevant AI knowledge\nexport async function getRelevantKnowledge(topic: string, language: string, limit: number = 5) {\n  try {\n    if (!supabase) return [];\n    \n    const { data, error } = await supabase\n      .from('ai_knowledge_base')\n      .select('*')\n      .eq('language', language)\n      .or(`topic.ilike.%${topic}%,context_type.ilike.%${topic}%`)\n      .order('effectiveness_score', { ascending: false })\n      .limit(limit);\n    \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error getting AI knowledge:', error);\n    return [];\n  }\n}","size_bytes":8838},"temp-deploy/App.js":{"content":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Wealth Sprint</Text>\n      <Text style={styles.subtitle}>Financial Game - Mobile Version</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n  },\n});","size_bytes":603},"temp-deploy/metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nmodule.exports = getDefaultConfig(__dirname);","size_bytes":104},"temp-deploy/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    // Note: glsl plugin removed for mobile compatibility\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});","size_bytes":775},"client/src/components/ErrorBoundary.tsx":{"content":"import React from 'react';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div className=\"min-h-screen bg-[#f5f0e6] flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-[#3a3a3a] mb-4\">Something went wrong</h1>\n            <p className=\"text-lg text-[#3a3a3a] opacity-70\">Please refresh the page to continue.</p>\n            <button \n              onClick={() => window.location.reload()} \n              className=\"mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n              Reload\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":1352},"client/src/assets/icons/index.tsx":{"content":"import React from 'react';\n\n// Department Icons\nexport const ExecutiveIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L12 2L3 7V9H21ZM21 10H3V22H21V10Z\"/>\n  </svg>\n);\n\nexport const SalesMarketingIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L12 2L3 7V9H21ZM21 10H3V22H21V10Z\"/>\n  </svg>\n);\n\nexport const FinancialIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M7 15H9C9 16.08 10.37 17 12 17C13.63 17 15 16.08 15 15C15 13.9 13.96 13.5 11.76 12.97C9.64 12.44 7 11.78 7 9C7 7.21 8.47 5.69 10.5 5.18V3H13.5V5.18C15.53 5.69 17 7.21 17 9H15C15 7.92 13.63 7 12 7C10.37 7 9 7.92 9 9C9 10.1 10.04 10.5 12.24 11.03C14.36 11.56 17 12.22 17 15C17 16.79 15.53 18.31 13.5 18.82V21H10.5V18.82C8.47 18.31 7 16.79 7 15Z\"/>\n  </svg>\n);\n\nexport const ConsultantIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M16 6L18.29 8.29L13.41 13.17L9.41 9.17L2 16.59L3.41 18L9.41 12L13.41 16L19.71 9.71L22 12V6H16Z\"/>\n  </svg>\n);\n\nexport const ProductDesignIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L12 2L3 7V9H21ZM21 10H3V22H21V10Z\"/>\n  </svg>\n);\n\nexport const LegalIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M16 6L18.29 8.29L13.41 13.17L9.41 9.17L2 16.59L3.41 18L9.41 12L13.41 16L19.71 9.71L22 12V6H16Z\"/>\n  </svg>\n);\n\nexport const HumanResourcesIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M16 4C18.21 4 20 5.79 20 8C20 10.21 18.21 12 16 12C13.79 12 12 10.21 12 8C12 5.79 13.79 4 16 4ZM8 6C9.66 6 11 7.34 11 9C11 10.66 9.66 12 8 12C6.34 12 5 10.66 5 9C5 7.34 6.34 6 8 6ZM8 13C10.67 13 16 14.33 16 17V20H0V17C0 14.33 5.33 13 8 13ZM16 13C18.67 13 24 14.33 24 17V20H18V17.22C18 16.22 17.2 15.23 15.71 14.53C17.21 13.81 18.95 13 16 13Z\"/>\n  </svg>\n);\n\n// Metric Icons\nexport const ExperienceIcon = () => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z\"/>\n  </svg>\n);\n\nexport const ImpactIcon = () => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M16 6L18.29 8.29L13.41 13.17L9.41 9.17L2 16.59L3.41 18L9.41 12L13.41 16L19.71 9.71L22 12V6H16Z\"/>\n  </svg>\n);\n\nexport const SalaryIcon = () => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M7 15H9C9 16.08 10.37 17 12 17C13.63 17 15 16.08 15 15C15 13.9 13.96 13.5 11.76 12.97C9.64 12.44 7 11.78 7 9C7 7.21 8.47 5.69 10.5 5.18V3H13.5V5.18C15.53 5.69 17 7.21 17 9H15C15 7.92 13.63 7 12 7C10.37 7 9 7.92 9 9C9 10.1 10.04 10.5 12.24 11.03C14.36 11.56 17 12.22 17 15C17 16.79 15.53 18.31 13.5 18.82V21H10.5V18.82C8.47 18.31 7 16.79 7 15Z\"/>\n  </svg>\n);\n\nexport const DomainsIcon = () => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M5.5 7L7 5.5L12 10.5L17 5.5L18.5 7L13.5 12L18.5 17L17 18.5L12 13.5L7 18.5L5.5 17L10.5 12L5.5 7Z\"/>\n  </svg>\n);\n\nexport const MenuIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M3 18H21V16H3V18ZM3 13H21V11H3V13ZM3 6V8H21V6H3Z\"/>\n  </svg>\n);\n\nexport const CloseIcon = () => (\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n    <path d=\"M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z\"/>\n  </svg>\n);","size_bytes":3872},"client/src/components/game/EnhancedStockMarket.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Badge } from '../ui/badge';\nimport { useWealthSprintGame } from '../../lib/stores/useWealthSprintGame';\nimport { \n  TrendingUp, \n  TrendingDown, \n  BarChart3,\n  Menu,\n  X,\n  Eye,\n  ShoppingCart,\n  Calculator,\n  FileText,\n  Activity,\n  DollarSign\n} from 'lucide-react';\n\ninterface Stock {\n  code: string;\n  name: string;\n  sector: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volatility: 'low' | 'medium' | 'high';\n  risk: 'Low' | 'Medium' | 'High';\n  trend: number[];\n  volume: number;\n  marketCap: number;\n}\n\ninterface StockHolding {\n  code: string;\n  quantity: number;\n  avgPrice: number;\n  purchaseDate: Date;\n}\n\ninterface TradingCharges {\n  brokerage: number;\n  exchangeCharges: number;\n  stt: number;\n  gst: number;\n  sebiCharges: number;\n  stampDuty: number;\n  dpCharges: number;\n  total: number;\n}\n\nconst EnhancedStockMarket: React.FC = () => {\n  const { financialData, updateFinancialData, addGameEvent } = useWealthSprintGame();\n  \n  // State management\n  const [selectedStock, setSelectedStock] = useState<string | null>(null);\n  const [quantity, setQuantity] = useState<number>(1);\n  const [tradeType, setTradeType] = useState<'delivery' | 'intraday'>('delivery');\n  const [portfolioHoldings, setPortfolioHoldings] = useState<StockHolding[]>([]);\n  const [marketMode, setMarketMode] = useState<'bull' | 'bear' | 'neutral'>('neutral');\n  const [showBalanceSheet, setShowBalanceSheet] = useState(false);\n  const [isLiveMode, setIsLiveMode] = useState(true);\n\n  // Enhanced Indian stocks with realistic data\n  const [stocks, setStocks] = useState<Stock[]>([\n    {\n      code: 'RELIANCE',\n      name: 'Reliance Industries Ltd',\n      sector: 'Oil & Gas',\n      price: 2850,\n      change: 45,\n      changePercent: 1.6,\n      volatility: 'medium',\n      risk: 'Medium',\n      trend: [2800, 2820, 2850, 2865, 2850],\n      volume: 2340000,\n      marketCap: 19250000\n    },\n    {\n      code: 'TCS',\n      name: 'Tata Consultancy Services',\n      sector: 'IT',\n      price: 4150,\n      change: -80,\n      changePercent: -1.9,\n      volatility: 'low',\n      risk: 'Low',\n      trend: [4200, 4180, 4160, 4150, 4150],\n      volume: 1890000,\n      marketCap: 15120000\n    },\n    {\n      code: 'HDFCBANK',\n      name: 'HDFC Bank Ltd',\n      sector: 'Banking',\n      price: 1580,\n      change: 25,\n      changePercent: 1.6,\n      volatility: 'low',\n      risk: 'Low',\n      trend: [1560, 1570, 1580, 1575, 1580],\n      volume: 3450000,\n      marketCap: 11890000\n    },\n    {\n      code: 'INFY',\n      name: 'Infosys Ltd',\n      sector: 'IT',\n      price: 1650,\n      change: -20,\n      changePercent: -1.2,\n      volatility: 'low',\n      risk: 'Low',\n      trend: [1680, 1670, 1650, 1640, 1650],\n      volume: 2190000,\n      marketCap: 6980000\n    },\n    {\n      code: 'ICICIBANK',\n      name: 'ICICI Bank Ltd',\n      sector: 'Banking',\n      price: 1125,\n      change: 35,\n      changePercent: 3.2,\n      volatility: 'medium',\n      risk: 'Medium',\n      trend: [1090, 1100, 1115, 1120, 1125],\n      volume: 4230000,\n      marketCap: 7890000\n    },\n    {\n      code: 'BHARTIARTL',\n      name: 'Bharti Airtel Ltd',\n      sector: 'Telecom',\n      price: 865,\n      change: 12,\n      changePercent: 1.4,\n      volatility: 'medium',\n      risk: 'Medium',\n      trend: [850, 855, 860, 862, 865],\n      volume: 1670000,\n      marketCap: 4890000\n    }\n  ]);\n\n  // Real-time market simulation\n  useEffect(() => {\n    if (!isLiveMode) return;\n\n    const interval = setInterval(() => {\n      setStocks(prevStocks => prevStocks.map(stock => {\n        const volatilityMultiplier = stock.volatility === 'high' ? 0.05 : \n                                   stock.volatility === 'medium' ? 0.03 : 0.02;\n        \n        const marketMultiplier = marketMode === 'bull' ? 1.2 : \n                               marketMode === 'bear' ? 0.8 : 1.0;\n        \n        const randomChange = (Math.random() - 0.5) * volatilityMultiplier * marketMultiplier;\n        const newPrice = Math.max(stock.price * (1 + randomChange), 1);\n        const priceChange = newPrice - stock.price;\n        const changePercent = (priceChange / stock.price) * 100;\n        \n        // Update trend\n        const newTrend = [...stock.trend.slice(1), newPrice];\n        \n        // Update volume randomly\n        const volumeChange = (Math.random() - 0.5) * 0.3;\n        const newVolume = Math.max(stock.volume * (1 + volumeChange), 1000);\n\n        return {\n          ...stock,\n          price: Math.round(newPrice * 100) / 100,\n          change: Math.round(priceChange * 100) / 100,\n          changePercent: Math.round(changePercent * 100) / 100,\n          trend: newTrend,\n          volume: Math.round(newVolume)\n        };\n      }));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [isLiveMode, marketMode]);\n\n  // Calculate Indian trading charges\n  const calculateTradingCharges = (tradeValue: number, isDelivery: boolean, isBuy: boolean): TradingCharges => {\n    const charges = {\n      brokerage: 0,\n      exchangeCharges: 0,\n      stt: 0,\n      gst: 0,\n      sebiCharges: 0,\n      stampDuty: 0,\n      dpCharges: 0,\n      total: 0\n    };\n\n    // 1. Brokerage Charges\n    if (isDelivery) {\n      charges.brokerage = 0; // Most discount brokers offer ₹0 for delivery\n    } else {\n      charges.brokerage = Math.min(20, tradeValue * 0.0003); // ₹20 or 0.03% whichever is lower\n    }\n\n    // 2. Exchange Transaction Charges\n    if (isDelivery) {\n      charges.exchangeCharges = tradeValue * 0.00325 / 100; // ₹325 per ₹1 crore\n    } else {\n      charges.exchangeCharges = tradeValue * 0.035 / 100; // ₹3500 per ₹1 crore\n    }\n\n    // 3. STT (Securities Transaction Tax)\n    if (isDelivery) {\n      if (!isBuy) {\n        charges.stt = tradeValue * 0.001; // 0.1% on sell value for delivery\n      }\n    } else {\n      charges.stt = tradeValue * 0.00025; // 0.025% on sell value for intraday\n    }\n\n    // 4. Stamp Duty\n    if (isBuy) {\n      if (isDelivery) {\n        charges.stampDuty = tradeValue * 0.00015; // 0.015% for delivery buy\n      } else {\n        charges.stampDuty = tradeValue * 0.00003; // 0.003% for intraday buy\n      }\n    }\n\n    // 5. SEBI Charges\n    charges.sebiCharges = tradeValue * 0.000001; // ₹10 per ₹1 crore\n\n    // 6. GST (18% on brokerage + exchange charges)\n    charges.gst = (charges.brokerage + charges.exchangeCharges) * 0.18;\n\n    // 7. DP Charges (only for delivery sell)\n    if (isDelivery && !isBuy) {\n      charges.dpCharges = 15.93; // Approx ₹13.5 + GST\n    }\n\n    // Calculate total\n    charges.total = charges.brokerage + charges.exchangeCharges + charges.stt + \n                   charges.gst + charges.sebiCharges + charges.stampDuty + charges.dpCharges;\n\n    return charges;\n  };\n\n  const handleTrade = (isBuy: boolean) => {\n    const stock = stocks.find(s => s.code === selectedStock);\n    if (!stock || quantity <= 0) return;\n\n    const tradeValue = stock.price * quantity;\n    const charges = calculateTradingCharges(tradeValue, tradeType === 'delivery', isBuy);\n    const totalCost = isBuy ? tradeValue + charges.total : tradeValue - charges.total;\n\n    if (isBuy) {\n      if (financialData.bankBalance >= totalCost) {\n        // Buy stock\n        const existingHolding = portfolioHoldings.find(h => h.code === stock.code);\n        if (existingHolding) {\n          const totalQuantity = existingHolding.quantity + quantity;\n          const totalValue = (existingHolding.avgPrice * existingHolding.quantity) + tradeValue;\n          const newAvgPrice = totalValue / totalQuantity;\n          \n          setPortfolioHoldings(prev => prev.map(h => \n            h.code === stock.code \n              ? { ...h, quantity: totalQuantity, avgPrice: newAvgPrice }\n              : h\n          ));\n        } else {\n          setPortfolioHoldings(prev => [...prev, {\n            code: stock.code,\n            quantity: quantity,\n            avgPrice: stock.price,\n            purchaseDate: new Date()\n          }]);\n        }\n\n        updateFinancialData({ \n          bankBalance: financialData.bankBalance - totalCost,\n          investments: {\n            ...financialData.investments,\n            stocks: financialData.investments.stocks + tradeValue\n          }\n        });\n\n        addGameEvent({\n          id: `stock_buy_${Date.now()}`,\n          type: 'financial',\n          title: '📈 Stock Purchase Successful',\n          description: `Bought ${quantity} shares of ${stock.code} for ₹${tradeValue.toLocaleString()} (Charges: ₹${charges.total.toFixed(2)})`,\n          impact: { duration: 1, effects: {} }\n        });\n      } else {\n        addGameEvent({\n          id: `insufficient_funds_${Date.now()}`,\n          type: 'warning',\n          title: '❌ Insufficient Funds',\n          description: `Need ₹${totalCost.toLocaleString()} but only have ₹${financialData.bankBalance.toLocaleString()}`,\n          impact: { duration: 1, effects: {} }\n        });\n      }\n    } else {\n      // Sell stock\n      const holding = portfolioHoldings.find(h => h.code === stock.code);\n      if (holding && holding.quantity >= quantity) {\n        setPortfolioHoldings(prev => prev.map(h => \n          h.code === stock.code \n            ? { ...h, quantity: h.quantity - quantity }\n            : h\n        ).filter(h => h.quantity > 0));\n\n        updateFinancialData({ \n          bankBalance: financialData.bankBalance + totalCost,\n          investments: {\n            ...financialData.investments,\n            stocks: Math.max(0, financialData.investments.stocks - (holding.avgPrice * quantity))\n          }\n        });\n\n        const profit = (stock.price - holding.avgPrice) * quantity - charges.total;\n        addGameEvent({\n          id: `stock_sell_${Date.now()}`,\n          type: 'financial',\n          title: '💰 Stock Sale Completed',\n          description: `Sold ${quantity} shares of ${stock.code} for ${profit >= 0 ? 'profit' : 'loss'} of ₹${Math.abs(profit).toLocaleString()}`,\n          impact: { duration: 1, effects: {} }\n        });\n      }\n    }\n\n    setQuantity(1);\n  };\n\n  const selectedStock_data = selectedStock ? stocks.find(s => s.code === selectedStock) : null;\n  const selectedCharges = selectedStock_data ? \n    calculateTradingCharges(selectedStock_data.price * quantity, tradeType === 'delivery', true) : null;\n\n  const getTrendIcon = (trend: number[]) => {\n    const recentChange = trend[trend.length - 1] - trend[0];\n    return recentChange >= 0 ? TrendingUp : TrendingDown;\n  };\n\n  const getTrendColor = (trend: number[]) => {\n    const recentChange = trend[trend.length - 1] - trend[0];\n    return recentChange >= 0 ? 'text-green-600' : 'text-red-600';\n  };\n\n  const formatTrend = (trend: number[]) => {\n    const change = ((trend[trend.length - 1] - trend[0]) / trend[0]) * 100;\n    return `${change >= 0 ? '+' : ''}${change.toFixed(1)}%`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-[#3a3a3a]\">Enhanced Stock Market</h1>\n          <p className=\"text-gray-600\">Real-time trading with Indian market charges</p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Button\n            onClick={() => setShowBalanceSheet(!showBalanceSheet)}\n            variant=\"outline\"\n            className=\"flex items-center gap-2\"\n          >\n            <FileText className=\"w-4 h-4\" />\n            Balance Sheet\n          </Button>\n          <Badge className={`${isLiveMode ? 'bg-green-600' : 'bg-gray-600'} text-white`}>\n            {isLiveMode ? 'LIVE' : 'PAUSED'}\n          </Badge>\n        </div>\n      </div>\n\n\n\n      {/* Balance Sheet Modal */}\n      {showBalanceSheet && (\n        <div className=\"fixed top-4 right-4 w-80 z-50 bg-white bg-opacity-0 rounded-lg shadow-lg border\">\n          <div className=\"p-4 pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Balance Sheet</h3>\n              <Button \n                onClick={() => setShowBalanceSheet(false)}\n                variant=\"ghost\" \n                size=\"sm\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          <div className=\"px-4 pb-4 space-y-3\">\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span>Cash Balance:</span>\n                <span className=\"font-medium\">₹{financialData.bankBalance.toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Stock Investments:</span>\n                <span className=\"font-medium\">₹{financialData.investments.stocks.toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Portfolio Value:</span>\n                <span className=\"font-medium\">\n                  ₹{portfolioHoldings.reduce((total, holding) => {\n                    const stock = stocks.find(s => s.code === holding.code);\n                    return total + (stock ? stock.price * holding.quantity : 0);\n                  }, 0).toLocaleString()}\n                </span>\n              </div>\n              <div className=\"border-t pt-2\">\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total Assets:</span>\n                  <span>₹{(financialData.bankBalance + portfolioHoldings.reduce((total, holding) => {\n                    const stock = stocks.find(s => s.code === holding.code);\n                    return total + (stock ? stock.price * holding.quantity : 0);\n                  }, 0)).toLocaleString()}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Portfolio Holdings */}\n            {portfolioHoldings.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm\">Holdings:</h4>\n                {portfolioHoldings.map((holding) => {\n                  const stock = stocks.find(s => s.code === holding.code);\n                  if (!stock) return null;\n                  \n                  const currentValue = stock.price * holding.quantity;\n                  const investedValue = holding.avgPrice * holding.quantity;\n                  const pnl = currentValue - investedValue;\n                  const pnlPercent = (pnl / investedValue) * 100;\n\n                  return (\n                    <div key={holding.code} className=\"text-xs bg-gray-50 p-2 rounded\">\n                      <div className=\"font-medium\">{holding.code}</div>\n                      <div className=\"text-gray-600\">{holding.quantity} shares</div>\n                      <div className={`${pnl >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {pnl >= 0 ? '+' : ''}₹{pnl.toFixed(2)} ({pnlPercent.toFixed(1)}%)\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Stock Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5\" />\n            Live Stock Market\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-3 px-2\">Symbol</th>\n                  <th className=\"text-left py-3 px-2\">Name</th>\n                  <th className=\"text-right py-3 px-2\">Price</th>\n                  <th className=\"text-right py-3 px-2\">Change</th>\n                  <th className=\"text-right py-3 px-2\">Volume</th>\n                  <th className=\"text-center py-3 px-2\">5-Day Trend</th>\n                  <th className=\"text-center py-3 px-2\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {stocks.map((stock) => {\n                  const TrendIcon = getTrendIcon(stock.trend);\n                  const holding = portfolioHoldings.find(h => h.code === stock.code);\n                  \n                  return (\n                    <tr \n                      key={stock.code} \n                      className={`border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${\n                        selectedStock === stock.code ? 'bg-blue-50' : ''\n                      }`}\n                      onClick={() => setSelectedStock(stock.code)}\n                    >\n                      <td className=\"py-3 px-2\">\n                        <div className=\"font-semibold\">{stock.code}</div>\n                        <div className=\"text-xs text-gray-500\">{stock.sector}</div>\n                      </td>\n                      <td className=\"py-3 px-2\">\n                        <div className=\"text-sm\">{stock.name}</div>\n                        {holding && (\n                          <div className=\"text-xs text-blue-600\">\n                            Holding: {holding.quantity} shares\n                          </div>\n                        )}\n                      </td>\n                      <td className=\"py-3 px-2 text-right\">\n                        <div className=\"font-semibold\">₹{stock.price.toFixed(2)}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          Vol: {(stock.volume / 1000).toFixed(0)}K\n                        </div>\n                      </td>\n                      <td className={`py-3 px-2 text-right ${stock.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        <div className=\"font-medium\">\n                          {stock.changePercent >= 0 ? '+' : ''}₹{stock.change.toFixed(2)}\n                        </div>\n                        <div className=\"text-sm\">\n                          ({stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%)\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-2 text-right\">\n                        <div className=\"text-sm\">\n                          {(stock.volume / 100000).toFixed(1)}L\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          Cap: ₹{(stock.marketCap / 10000).toFixed(0)}K Cr\n                        </div>\n                      </td>\n                      <td className={`py-3 px-2 text-center ${getTrendColor(stock.trend)}`}>\n                        <div className=\"flex items-center justify-center gap-1\">\n                          <TrendIcon size={16} />\n                          <span className=\"text-sm\">{formatTrend(stock.trend)}</span>\n                        </div>\n                      </td>\n                      <td className=\"py-3 px-2 text-center\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setSelectedStock(stock.code);\n                          }}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Trading Panel */}\n      {selectedStock_data && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ShoppingCart className=\"w-5 h-5\" />\n              Trade {selectedStock_data.code}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Trading Form */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <label className=\"text-sm font-medium\">Trade Type:</label>\n                  <select \n                    value={tradeType} \n                    onChange={(e) => setTradeType(e.target.value as any)}\n                    className=\"px-3 py-1 border rounded text-sm\"\n                  >\n                    <option value=\"delivery\">Delivery (Hold)</option>\n                    <option value=\"intraday\">Intraday (Same Day)</option>\n                  </select>\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <label className=\"text-sm font-medium\">Quantity:</label>\n                  <Input\n                    type=\"number\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                    className=\"w-24\"\n                    min=\"1\"\n                  />\n                  <span className=\"text-sm text-gray-600\">shares</span>\n                </div>\n\n                <div className=\"text-sm space-y-1\">\n                  <div>Price: ₹{selectedStock_data.price.toFixed(2)} per share</div>\n                  <div>Trade Value: ₹{(selectedStock_data.price * quantity).toLocaleString()}</div>\n                  {selectedCharges && (\n                    <div className=\"text-red-600\">\n                      Total Charges: ₹{selectedCharges.total.toFixed(2)}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={() => handleTrade(true)}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                    disabled={financialData.bankBalance < (selectedStock_data.price * quantity + (selectedCharges?.total || 0))}\n                  >\n                    Buy ₹{(selectedStock_data.price * quantity + (selectedCharges?.total || 0)).toLocaleString()}\n                  </Button>\n                  <Button\n                    onClick={() => handleTrade(false)}\n                    variant=\"destructive\"\n                    disabled={!portfolioHoldings.find(h => h.code === selectedStock_data.code && h.quantity >= quantity)}\n                  >\n                    Sell ₹{(selectedStock_data.price * quantity - (selectedCharges?.total || 0)).toLocaleString()}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Charges Breakdown */}\n              {selectedCharges && (\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium flex items-center gap-2\">\n                    <Calculator className=\"w-4 h-4\" />\n                    Charges Breakdown ({tradeType})\n                  </h4>\n                  <div className=\"space-y-2 text-sm bg-gray-50 p-3 rounded\">\n                    <div className=\"flex justify-between\">\n                      <span>Brokerage:</span>\n                      <span>₹{selectedCharges.brokerage.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Exchange Charges:</span>\n                      <span>₹{selectedCharges.exchangeCharges.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>STT:</span>\n                      <span>₹{selectedCharges.stt.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>GST (18%):</span>\n                      <span>₹{selectedCharges.gst.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>SEBI Charges:</span>\n                      <span>₹{selectedCharges.sebiCharges.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Stamp Duty:</span>\n                      <span>₹{selectedCharges.stampDuty.toFixed(2)}</span>\n                    </div>\n                    {selectedCharges.dpCharges > 0 && (\n                      <div className=\"flex justify-between\">\n                        <span>DP Charges:</span>\n                        <span>₹{selectedCharges.dpCharges.toFixed(2)}</span>\n                      </div>\n                    )}\n                    <div className=\"border-t pt-2 flex justify-between font-semibold\">\n                      <span>Total Charges:</span>\n                      <span>₹{selectedCharges.total.toFixed(2)}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedStockMarket;","size_bytes":25052},"client/src/components/game/GorkAI.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { MessageCircle, X, Brain, Send, Folder, Globe, ChevronDown } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\n\ninterface Message {\n  role: 'ai' | 'user';\n  text: string;\n  timestamp: Date;\n}\n\ninterface ChatSession {\n  user: string;\n  language: string;\n  mood: string;\n  messages: Message[];\n  timestamp: string;\n  id: string;\n}\n\ninterface SageAIProps {\n  className?: string;\n}\n\nexport default function SageAI({ className }: SageAIProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [position, setPosition] = useState({ x: window.innerWidth - 100, y: window.innerHeight - 100 });\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [currentInput, setCurrentInput] = useState('');\n  const [language, setLanguage] = useState('English');\n  const [showChatHistory, setShowChatHistory] = useState(false);\n  const [chatHistory, setChatHistory] = useState<ChatSession[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentSessionId, setCurrentSessionId] = useState<string>('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const languages = [\n    'English', 'Hindi', 'Hinglish'\n  ];\n\n  const userName = 'Player'; // TODO: Get from game state/auth system\n\n  const handleDragEnd = (event: any, info: any) => {\n    setPosition({ \n      x: Math.max(0, Math.min(window.innerWidth - 64, info.point.x)), \n      y: Math.max(0, Math.min(window.innerHeight - 64, info.point.y)) \n    });\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      // Add welcome message when first opened\n      const welcomeMessage: Message = {\n        role: 'ai',\n        text: `Hello ${userName}, I am your personal emotional financial advisor.`,\n        timestamp: new Date()\n      };\n      setMessages([welcomeMessage]);\n      startNewSession();\n    }\n  }, [isOpen, userName]);\n\n  useEffect(() => {\n    // Load chat history on mount\n    loadChatHistory();\n  }, []);\n\n  const startNewSession = () => {\n    const sessionId = `chat_${Date.now()}`;\n    setCurrentSessionId(sessionId);\n  };\n\n  const loadChatHistory = async () => {\n    try {\n      const response = await fetch('/api/sage/chat-history');\n      if (response.ok) {\n        const history = await response.json();\n        setChatHistory(history);\n      }\n    } catch (error) {\n      console.error('Failed to load chat history:', error);\n    }\n  };\n\n  const saveChatSession = async () => {\n    if (messages.length <= 1) return; // Don't save if only welcome message\n\n    const session: ChatSession = {\n      user: userName,\n      language,\n      mood: 'Friendly',\n      messages,\n      timestamp: new Date().toISOString(),\n      id: currentSessionId\n    };\n\n    try {\n      await fetch('/api/sage/save-chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(session),\n      });\n      loadChatHistory(); // Refresh history\n    } catch (error) {\n      console.error('Failed to save chat:', error);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!currentInput.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      role: 'user',\n      text: currentInput.trim(),\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setCurrentInput('');\n    setIsLoading(true);\n\n    try {\n      // Get current game state for contextual AI response\n      const gameState = {\n        emotional_state: 'Focused', // TODO: Get from game state\n        loop_status: 'Clear', // TODO: Get from game state\n        xp_level: 25, // TODO: Get from game state\n        mood: 'Curious', // TODO: Get from game state\n        financial_data: {}, // TODO: Get from game state\n        team_data: {}, // TODO: Get from game state\n        current_section: 'Dashboard', // TODO: Get from current game section\n        player_name: userName\n      };\n\n      const response = await fetch('/api/ai/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userInput: userMessage.text,\n          language,\n          gameState,\n          playerName: userName\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        const aiMessage: Message = {\n          role: 'ai',\n          text: data.message,\n          timestamp: new Date()\n        };\n        setMessages(prev => [...prev, aiMessage]);\n        \n        // Auto-save session after each exchange\n        setTimeout(() => saveChatSession(), 500);\n      }\n    } catch (error) {\n      console.error('Failed to get AI response:', error);\n      const errorMessage: Message = {\n        role: 'ai',\n        text: 'I apologize, but I cannot respond right now. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const loadChatSession = async (sessionId: string) => {\n    try {\n      const response = await fetch(`/api/sage/load-chat/${sessionId}`);\n      if (response.ok) {\n        const session: ChatSession = await response.json();\n        setMessages(session.messages.map(msg => ({\n          ...msg,\n          timestamp: new Date(msg.timestamp)\n        })));\n        setLanguage(session.language);\n        setCurrentSessionId(sessionId);\n        setShowChatHistory(false);\n      }\n    } catch (error) {\n      console.error('Failed to load chat session:', error);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCurrentInput(e.target.value);\n    \n    // Auto-resize textarea\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const scrollHeight = textareaRef.current.scrollHeight;\n      const maxHeight = 80; // 2 lines max\n      textareaRef.current.style.height = Math.min(scrollHeight, maxHeight) + 'px';\n    }\n  };\n\n  const formatChatPreview = (session: ChatSession) => {\n    const firstUserMessage = session.messages.find(msg => msg.role === 'user');\n    const preview = firstUserMessage?.text || 'New conversation';\n    return preview.length > 30 ? preview.substring(0, 30) + '...' : preview;\n  };\n\n  return (\n    <>\n      {/* Draggable Sage Icon */}\n      <motion.div\n        drag\n        dragMomentum={false}\n        onDragEnd={handleDragEnd}\n        animate={{ x: position.x, y: position.y }}\n        style={{\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          width: 64,\n          height: 64,\n          borderRadius: '50%',\n          background: 'white',\n          boxShadow: '0 2px 6px rgba(0, 0, 0, 0.15)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          zIndex: 1000,\n          cursor: 'grab',\n          padding: '12px'\n        }}\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={() => setIsOpen(!isOpen)}\n        className={className}\n      >\n        <Brain className=\"w-6 h-6\" style={{ color: '#3a4d8f' }} />\n      </motion.div>\n\n      {/* Sage Chat Interface */}\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.8 }}\n          style={{\n            position: 'fixed',\n            bottom: 100,\n            right: 20,\n            zIndex: 1001,\n            width: 380,\n            maxWidth: '90vw',\n            height: 500,\n            maxHeight: '80vh'\n          }}\n        >\n          <Card style={{ \n            background: 'rgba(30, 41, 59, 0.96)', \n            borderRadius: '16px',\n            padding: '16px',\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.2)',\n            backdropFilter: 'blur(10px)'\n          }} className=\"border-slate-700 h-full flex flex-col\">\n            <CardHeader className=\"pb-3 flex-shrink-0\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-8 h-8 rounded-full flex items-center justify-center\" style={{ background: '#e1eaff' }}>\n                    <Brain className=\"w-4 h-4\" style={{ color: '#3a4d8f' }} />\n                  </div>\n                  <CardTitle className=\"text-lg font-semibold text-white\">\n                    Sage AI\n                  </CardTitle>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setShowChatHistory(!showChatHistory)}\n                    className=\"h-8 px-2 text-white hover:text-gray-200\"\n                  >\n                    <Folder className=\"w-4 h-4 mr-1\" />\n                    <span className=\"text-xs\">History</span>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsOpen(false)}\n                    className=\"h-8 w-8 p-0 text-white hover:text-gray-200\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Language Selector */}\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <Globe className=\"w-4 h-4 text-white\" />\n                <span className=\"text-xs text-white\">Language:</span>\n                <Select value={language} onValueChange={setLanguage}>\n                  <SelectTrigger className=\"w-32 h-6 text-xs bg-white border-gray-300 text-gray-700\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-white border-gray-300\">\n                    {languages.map((lang) => (\n                      <SelectItem key={lang} value={lang} className=\"text-gray-700 hover:bg-gray-100\">\n                        {lang}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Chat History Dropdown */}\n              {showChatHistory && (\n                <div className=\"mt-2 max-h-32 overflow-y-auto bg-white rounded-lg border border-gray-300\">\n                  {chatHistory.length === 0 ? (\n                    <div className=\"p-2 text-xs text-gray-500\">No previous chats</div>\n                  ) : (\n                    chatHistory.slice(0, 10).map((session) => (\n                      <button\n                        key={session.id}\n                        onClick={() => loadChatSession(session.id)}\n                        className=\"w-full p-2 text-left text-xs text-gray-700 hover:bg-gray-100 border-b border-gray-200 last:border-b-0\"\n                      >\n                        <div className=\"truncate\">{formatChatPreview(session)}</div>\n                        <div className=\"text-gray-500 text-xs mt-1\">\n                          {new Date(session.timestamp).toLocaleDateString()}\n                        </div>\n                      </button>\n                    ))\n                  )}\n                </div>\n              )}\n            </CardHeader>\n\n            {/* Messages Area */}\n            <CardContent className=\"flex-1 overflow-hidden p-0\">\n              <div className=\"h-full overflow-y-auto space-y-3 p-3\" style={{ maxHeight: '300px' }}>\n                {messages.map((message, index) => (\n                  <div\n                    key={index}\n                    className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div\n                      className={`max-w-[80%] text-sm ${\n                        message.role === 'user'\n                          ? 'bg-green-200 text-gray-800 rounded-xl p-3' // User: soft green\n                          : 'bg-blue-50 text-gray-700 rounded-xl p-3' // AI: soft blue\n                      }`}\n                      style={{\n                        backgroundColor: message.role === 'user' ? '#B9FBC0' : '#D0EFFF',\n                        color: message.role === 'user' ? '#1a1a1a' : '#333333',\n                        borderRadius: '12px',\n                        padding: '8px 12px',\n                        fontFamily: 'Inter, sans-serif'\n                      }}\n                    >\n                      {message.text}\n                    </div>\n                  </div>\n                ))}\n                {isLoading && (\n                  <div className=\"flex justify-start\">\n                    <div style={{ \n                      backgroundColor: '#D0EFFF', \n                      color: '#333333',\n                      borderRadius: '12px',\n                      padding: '8px 12px'\n                    }} className=\"text-sm\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n            </CardContent>\n\n            {/* Input Area */}\n            <div className=\"p-3 border-t border-gray-300 flex-shrink-0\">\n              <div className=\"flex space-x-2\">\n                <textarea\n                  ref={textareaRef}\n                  value={currentInput}\n                  onChange={handleInputChange}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Type your message...\"\n                  className=\"flex-1 bg-white border border-gray-300 rounded-xl px-3 py-2 text-sm text-gray-700 placeholder-gray-400 resize-none min-h-[40px] max-h-[80px] overflow-y-auto\"\n                  disabled={isLoading}\n                  style={{ lineHeight: '1.4', fontFamily: 'Inter, sans-serif' }}\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!currentInput.trim() || isLoading}\n                  className=\"bg-blue-500 hover:bg-blue-600 text-white rounded-xl px-3 h-10 flex-shrink-0\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n      )}\n    </>\n  );\n}","size_bytes":15291},"client/src/components/game/ModernTeamHiringDashboard.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useWealthSprintGame } from '@/lib/stores/useWealthSprintGame';\nimport { formatIndianCurrency } from '@/lib/utils';\nimport { \n  ExecutiveIcon, \n  SalesMarketingIcon, \n  FinancialIcon, \n  ConsultantIcon, \n  ProductDesignIcon, \n  LegalIcon, \n  HumanResourcesIcon,\n  CloseIcon,\n  MenuIcon\n} from '@/assets/icons';\n\n// Department configuration with roles\nconst DEPARTMENTS = {\n  \"Executive\": {\n    color: \"#2e7d32\",\n    emoji: \"🔷\",\n    icon: ExecutiveIcon,\n    roles: [\n      { \n        name: \"Chief Executive Officer (CEO)\", \n        title: \"Chief Executive Officer (CEO)\",\n        baseSalary: 2500000, \n        roleId: \"ceo\", \n        skills: [\"Strategic Planning\", \"Leadership\", \"Vision\"],\n        experience: 9,\n        impact: \"High\",\n        initials: \"CEO\"\n      },\n      { \n        name: \"Chief Operating Officer (COO)\", \n        title: \"Chief Operating Officer (COO)\",\n        baseSalary: 2200000, \n        roleId: \"coo\", \n        skills: [\"Operations\", \"Logistics\", \"Management\"],\n        experience: 8,\n        impact: \"High\", \n        initials: \"COO\"\n      },\n      { \n        name: \"Chief Technology Officer (CTO)\", \n        title: \"Chief Technology Officer (CTO)\",\n        baseSalary: 2400000, \n        roleId: \"cto\", \n        skills: [\"Technology\", \"Innovation\", \"AI\"],\n        experience: 9,\n        impact: \"High\",\n        initials: \"CTO\"\n      },\n      { \n        name: \"Chief Strategy Officer (CSO)\", \n        title: \"Chief Strategy Officer (CSO)\",\n        baseSalary: 2100000, \n        roleId: \"cso\", \n        skills: [\"Strategy\", \"Analytics\", \"Planning\"],\n        experience: 8,\n        impact: \"High\",\n        initials: \"CSO\"\n      },\n      { \n        name: \"Chief Growth Officer (CGO)\", \n        title: \"Chief Growth Officer (CGO)\",\n        baseSalary: 2000000, \n        roleId: \"cgo\", \n        skills: [\"Growth\", \"Expansion\", \"Markets\"],\n        experience: 7,\n        impact: \"Medium\",\n        initials: \"CGO\"\n      },\n    ]\n  },\n  \"Sales & Marketing\": {\n    color: \"#d32f2f\",\n    emoji: \"🔶\",\n    icon: SalesMarketingIcon,\n    roles: [\n      { \n        name: \"Marketing Director\", \n        title: \"Marketing Director\",\n        baseSalary: 1500000, \n        roleId: \"marketing_director\", \n        skills: [\"Digital Marketing\", \"Campaigns\", \"Branding\"],\n        experience: 8,\n        impact: \"High\",\n        initials: \"MD\"\n      },\n      { \n        name: \"Sales Head\", \n        title: \"Sales Head\",\n        baseSalary: 1400000, \n        roleId: \"sales_head\", \n        skills: [\"Sales\", \"Client Relations\", \"Revenue\"],\n        experience: 7,\n        impact: \"High\",\n        initials: \"SH\"\n      },\n      { \n        name: \"Brand Manager\", \n        title: \"Brand Manager\",\n        baseSalary: 1200000, \n        roleId: \"brand_manager\", \n        skills: [\"Brand Strategy\", \"Creative\", \"Design\"],\n        experience: 6,\n        impact: \"Medium\",\n        initials: \"BM\"\n      },\n      { \n        name: \"Social Media Strategist\", \n        title: \"Social Media Strategist\",\n        baseSalary: 1000000, \n        roleId: \"social_media_strategist\", \n        skills: [\"Social Media\", \"Content\", \"Engagement\"],\n        experience: 6,\n        impact: \"Medium\",\n        initials: \"SMS\"\n      },\n      { \n        name: \"Customer Acquisition Lead\", \n        title: \"Customer Acquisition Lead\",\n        baseSalary: 1300000, \n        roleId: \"customer_acquisition_lead\", \n        skills: [\"Lead Generation\", \"Conversion\", \"Growth\"],\n        experience: 7,\n        impact: \"High\",\n        initials: \"CAL\"\n      },\n    ]\n  },\n  \"Financial Management\": {\n    color: \"#1976d2\",\n    emoji: \"💰\",\n    icon: FinancialIcon,\n    roles: [\n      { \n        name: \"Chief Financial Officer (CFO)\", \n        title: \"Chief Financial Officer (CFO)\",\n        baseSalary: 2000000, \n        roleId: \"cfo\", \n        skills: [\"Financial Planning\", \"Budgeting\", \"Investment\"],\n        experience: 8,\n        impact: \"High\",\n        initials: \"CFO\"\n      },\n      { \n        name: \"Financial Analyst\", \n        title: \"Financial Analyst\",\n        baseSalary: 1100000, \n        roleId: \"financial_analyst\", \n        skills: [\"Analysis\", \"Reporting\", \"Forecasting\"],\n        experience: 6,\n        impact: \"Medium\",\n        initials: \"FA\"\n      },\n      { \n        name: \"Investment Manager\", \n        title: \"Investment Manager\",\n        baseSalary: 1600000, \n        roleId: \"investment_manager\", \n        skills: [\"Portfolio Management\", \"Risk\", \"Returns\"],\n        experience: 7,\n        impact: \"High\",\n        initials: \"IM\"\n      },\n      { \n        name: \"Budget Controller\", \n        title: \"Budget Controller\",\n        baseSalary: 1200000, \n        roleId: \"budget_controller\", \n        skills: [\"Budget Control\", \"Cost Management\", \"Optimization\"],\n        experience: 6,\n        impact: \"Medium\",\n        initials: \"BC\"\n      },\n      { \n        name: \"Accountant\", \n        title: \"Accountant\",\n        baseSalary: 900000, \n        roleId: \"accountant\", \n        skills: [\"Accounting\", \"Tax\", \"Compliance\"],\n        experience: 5,\n        impact: \"Medium\",\n        initials: \"ACC\"\n      },\n    ]\n  },\n  \"Consultant\": {\n    color: \"#7b1fa2\",\n    emoji: \"📈\",\n    icon: ConsultantIcon,\n    roles: [\n      { \n        name: \"Business Consultant\", \n        title: \"Business Consultant\",\n        baseSalary: 1400000, \n        roleId: \"business_consultant\", \n        skills: [\"Business Strategy\", \"Process\", \"Efficiency\"],\n        experience: 7,\n        impact: \"High\",\n        initials: \"BC\"\n      },\n      { \n        name: \"Startup Advisor\", \n        title: \"Startup Advisor\",\n        baseSalary: 1300000, \n        roleId: \"startup_advisor\", \n        skills: [\"Startups\", \"Scaling\", \"Innovation\"],\n        experience: 8,\n        impact: \"High\",\n        initials: \"SA\"\n      },\n      { \n        name: \"Strategy Consultant\", \n        title: \"Strategy Consultant\",\n        baseSalary: 1500000, \n        roleId: \"strategy_consultant\", \n        skills: [\"Strategic Planning\", \"Market Entry\", \"Growth\"],\n        experience: 8,\n        impact: \"High\",\n        initials: \"SC\"\n      },\n      { \n        name: \"Market Research Expert\", \n        title: \"Market Research Expert\",\n        baseSalary: 1200000, \n        roleId: \"market_research_expert\", \n        skills: [\"Market Analysis\", \"Consumer Insights\", \"Trends\"],\n        experience: 6,\n        impact: \"Medium\",\n        initials: \"MRE\"\n      },\n      { \n        name: \"Operational Analyst\", \n        title: \"Operational Analyst\",\n        baseSalary: 1100000, \n        roleId: \"operational_analyst\", \n        skills: [\"Operations\", \"Data Analysis\", \"Performance\"],\n        experience: 6,\n        impact: \"Medium\",\n        initials: \"OA\"\n      },\n    ]\n  },\n  \"Product Design\": {\n    color: \"#0288d1\",\n    emoji: \"🧠\",\n    icon: ProductDesignIcon,\n    roles: [\n      { \n        name: \"Head of Product\", \n        title: \"Head of Product\",\n        baseSalary: 1800000, \n        roleId: \"head_of_product\", \n        skills: [\"Product Strategy\", \"Roadmap\", \"Vision\"],\n        experience: 8,\n        impact: \"High\",\n        initials: \"HOP\"\n      },\n      { \n        name: \"UX/UI Designer\", \n        title: \"UX/UI Designer\",\n        baseSalary: 1300000, \n        roleId: \"ux_ui_designer\", \n        skills: [\"User Experience\", \"Interface Design\", \"Prototyping\"],\n        experience: 7,\n        impact: \"High\",\n        initials: \"UXD\"\n      },\n      { \n        name: \"Product Manager\", \n        title: \"Product Manager\",\n        baseSalary: 1500000, \n        roleId: \"product_manager\", \n        skills: [\"Product Development\", \"Requirements\", \"Launch\"],\n        experience: 7,\n        impact: \"High\",\n        initials: \"PM\"\n      },\n      { \n        name: \"Innovation Specialist\", \n        title: \"Innovation Specialist\",\n        baseSalary: 1400000, \n        roleId: \"innovation_specialist\", \n        skills: [\"Innovation\", \"Research\", \"Emerging Tech\"],\n        experience: 7,\n        impact: \"Medium\",\n        initials: \"IS\"\n      },\n      { \n        name: \"Prototype Architect\", \n        title: \"Prototype Architect\",\n        baseSalary: 1600000, \n        roleId: \"prototype_architect\", \n        skills: [\"Prototyping\", \"Architecture\", \"Development\"],\n        experience: 8,\n        impact: \"High\",\n        initials: \"PA\"\n      },\n    ]\n  },\n  \"Legal & Compliance\": {\n    color: \"#5d4037\",\n    emoji: \"⚖️\",\n    icon: LegalIcon,\n    roles: [\n      { \n        name: \"Chief Legal Officer (CLO)\", \n        title: \"Chief Legal Officer (CLO)\",\n        baseSalary: 1900000, \n        roleId: \"clo\", \n        skills: [\"Legal Strategy\", \"Compliance\", \"Risk Management\"],\n        experience: 9,\n        impact: \"High\",\n        initials: \"CLO\"\n      },\n      { \n        name: \"Corporate Lawyer\", \n        title: \"Corporate Lawyer\",\n        baseSalary: 1600000, \n        roleId: \"corporate_lawyer\", \n        skills: [\"Corporate Law\", \"Contracts\", \"Mergers\"],\n        experience: 8,\n        impact: \"High\",\n        initials: \"CL\"\n      },\n      { \n        name: \"Regulatory Compliance Officer\", \n        title: \"Regulatory Compliance Officer\",\n        baseSalary: 1300000, \n        roleId: \"regulatory_compliance_officer\", \n        skills: [\"Regulatory\", \"Compliance\", \"Audits\"],\n        experience: 7,\n        impact: \"Medium\",\n        initials: \"RCO\"\n      },\n      { \n        name: \"IP & Trademark Specialist\", \n        title: \"IP & Trademark Specialist\",\n        baseSalary: 1400000, \n        roleId: \"ip_trademark_specialist\", \n        skills: [\"Intellectual Property\", \"Patents\", \"Trademarks\"],\n        experience: 7,\n        impact: \"Medium\",\n        initials: \"ITS\"\n      },\n      { \n        name: \"Contract Manager\", \n        title: \"Contract Manager\",\n        baseSalary: 1200000, \n        roleId: \"contract_manager\", \n        skills: [\"Contract Management\", \"Negotiations\", \"Legal Review\"],\n        experience: 6,\n        impact: \"Medium\",\n        initials: \"CM\"\n      },\n    ]\n  },\n  \"Human Resources\": {\n    color: \"#e64a19\",\n    emoji: \"👥\",\n    icon: HumanResourcesIcon,\n    roles: [\n      { \n        name: \"HR Manager\", \n        title: \"HR Manager\",\n        baseSalary: 1400000, \n        roleId: \"hr_manager\", \n        skills: [\"HR Strategy\", \"People Management\", \"Culture\"],\n        experience: 7,\n        impact: \"High\",\n        initials: \"HRM\"\n      },\n      { \n        name: \"Talent Acquisition Specialist\", \n        title: \"Talent Acquisition Specialist\",\n        baseSalary: 1200000, \n        roleId: \"talent_acquisition_specialist\", \n        skills: [\"Recruitment\", \"Talent Sourcing\", \"Hiring\"],\n        experience: 6,\n        impact: \"Medium\",\n        initials: \"TAS\"\n      },\n      { \n        name: \"People Experience Lead\", \n        title: \"People Experience Lead\",\n        baseSalary: 1300000, \n        roleId: \"people_experience_lead\", \n        skills: [\"Employee Experience\", \"Engagement\", \"Retention\"],\n        experience: 7,\n        impact: \"High\",\n        initials: \"PEL\"\n      },\n      { \n        name: \"Learning & Development Head\", \n        title: \"Learning & Development Head\",\n        baseSalary: 1350000, \n        roleId: \"learning_development_head\", \n        skills: [\"Training\", \"Development\", \"Skills\"],\n        experience: 7,\n        impact: \"Medium\",\n        initials: \"LDH\"\n      },\n      { \n        name: \"Payroll & Benefits Coordinator\", \n        title: \"Payroll & Benefits Coordinator\",\n        baseSalary: 1000000, \n        roleId: \"payroll_benefits_coordinator\", \n        skills: [\"Payroll\", \"Benefits\", \"Compensation\"],\n        experience: 5,\n        impact: \"Medium\",\n        initials: \"PBC\"\n      },\n    ]\n  },\n};\n\ninterface ModernTeamHiringDashboardProps {\n  onClose: () => void;\n}\n\nexport default function ModernTeamHiringDashboard({ onClose }: ModernTeamHiringDashboardProps) {\n  const { \n    teamMembers, \n    financialData, \n    hireEmployee, \n    addGameEvent,\n    gainClarityXP \n  } = useWealthSprintGame();\n\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(\"Executive\");\n  const [showMenuOverlay, setShowMenuOverlay] = useState(false);\n  const [showMenuButton, setShowMenuButton] = useState(true);\n  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const menuOverlayRef = useRef<HTMLDivElement>(null);\n  \n  const activeTeamMembers = teamMembers.filter(member => member.isActive);\n\n  // Auto-hide menu button on scroll and close menu on scroll\n  useEffect(() => {\n    const handleScroll = () => {\n      setShowMenuButton(false);\n      \n      // Close menu overlay if it's open\n      if (showMenuOverlay) {\n        setShowMenuOverlay(false);\n      }\n      \n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n      \n      scrollTimeoutRef.current = setTimeout(() => {\n        setShowMenuButton(true);\n      }, 1500); // 1.5 seconds\n    };\n\n    // Add scroll listener to the main container\n    const mainContainer = document.querySelector('div[style*=\"overflow-auto\"]');\n    if (mainContainer) {\n      mainContainer.addEventListener('scroll', handleScroll, { passive: true });\n    }\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    \n    return () => {\n      if (mainContainer) {\n        mainContainer.removeEventListener('scroll', handleScroll);\n      }\n      window.removeEventListener('scroll', handleScroll);\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, [showMenuOverlay]);\n\n  // Close menu overlay when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (showMenuOverlay && menuOverlayRef.current && !menuOverlayRef.current.contains(event.target as Node)) {\n        setShowMenuOverlay(false);\n      }\n    };\n\n    if (showMenuOverlay) {\n      // Use capture phase to ensure we catch the event before other handlers\n      document.addEventListener('mousedown', handleClickOutside as EventListener, true);\n      document.addEventListener('touchstart', handleClickOutside as EventListener, true);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside as EventListener, true);\n      document.removeEventListener('touchstart', handleClickOutside as EventListener, true);\n    };\n  }, [showMenuOverlay]);\n\n  const handleHireEmployee = (role: any, department: string) => {\n    const monthlySalary = Math.floor(role.baseSalary / 12);\n    \n    if (financialData.bankBalance < monthlySalary) {\n      addGameEvent(`❌ Insufficient Balance to hire ${role.name}. Need ₹${monthlySalary.toLocaleString()}/month.`);\n      return;\n    }\n\n    // Generate random experience based on the predefined role experience\n    const baseExperience = role.experience || 5;\n    const experience = Math.max(3, Math.min(10, baseExperience + Math.floor(Math.random() * 3) - 1));\n    const actualMonthlySalary = Math.floor(monthlySalary * (0.8 + (experience / 10) * 0.4));\n    \n    // Generate random name for the employee\n    const names = [\n      \"Arjun\", \"Priya\", \"Rahul\", \"Anita\", \"Vikram\", \"Sneha\", \"Aditya\", \"Kavya\",\n      \"Rohan\", \"Meera\", \"Amit\", \"Nisha\", \"Karan\", \"Pooja\", \"Sanjay\", \"Divya\"\n    ];\n    const randomName = names[Math.floor(Math.random() * names.length)];\n    \n    const memberId = `team_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Hire the employee\n    hireEmployee(\n      memberId, \n      randomName, \n      role.name, \n      actualMonthlySalary, \n      department\n    );\n    \n    const impactedSectors = role.skills || [];\n    gainClarityXP(10);\n    addGameEvent(`🎉 Hired ${randomName} as ${role.name} for ₹${actualMonthlySalary.toLocaleString()}/month (${experience}/10 experience). Will boost ${impactedSectors.slice(0, 2).join(', ')} sectors.`);\n  };\n\n  // Employee Card Component\n  const EmployeeCard = ({ role, department }: { role: any; department: any }) => {\n    const monthlySalary = Math.floor(role.baseSalary / 12);\n    const isAlreadyHired = activeTeamMembers.some(member => member.roleId === role.roleId);\n    \n    // Format salary in K format (₹280K/mo)\n    const formatSalary = (amount: number): string => {\n      if (amount >= 100000) {\n        return `₹${Math.round(amount / 1000)}K/mo`;\n      }\n      return `₹${amount}/mo`;\n    };\n\n    return (\n      <Card\n        className=\"border-0 transition-all duration-300 hover:shadow-2xl hover:scale-105\"\n        style={{ \n          backgroundColor: 'rgba(242, 236, 219, 0.1)',\n          borderRadius: '16px',\n          boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\n        }}\n      >\n        <CardContent className=\"p-6\">\n          <div className=\"flex\">\n            {/* Left Side - 70% */}\n            <div className=\"flex-1 pr-4\">\n              {/* Department Header */}\n              <div className=\"flex items-center gap-2 mb-3\">\n                <span className=\"text-lg\">{department.emoji}</span>\n                <span className=\"text-sm font-medium text-gray-600\">{selectedDepartment}</span>\n              </div>\n\n              {/* Employee Name & Title */}\n              <h3 className=\"text-lg font-bold text-gray-800 mb-3 leading-tight\">\n                {role.title}\n              </h3>\n\n              {/* Experience */}\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"text-base\">⭐</span>\n                <span className=\"text-sm text-gray-700\">Experience: {role.experience}/10</span>\n              </div>\n\n              {/* Impact */}\n              <div className=\"flex items-center gap-2 mb-2\">\n                <span className=\"text-base\">📈</span>\n                <span className=\"text-sm text-gray-700\">Impact: {role.impact}</span>\n              </div>\n\n              {/* Salary */}\n              <div className=\"flex items-center gap-2 mb-3\">\n                <span className=\"text-base\">💰</span>\n                <span className=\"text-sm text-gray-700\">Salary: {formatSalary(monthlySalary)}</span>\n              </div>\n\n              {/* Expertise Tags */}\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-base\">🏷️</span>\n                  <span className=\"text-sm text-gray-700\">Expertise:</span>\n                </div>\n                <div className=\"text-xs text-gray-600 line-clamp-2\">\n                  {role.skills.join(', ')}\n                </div>\n              </div>\n            </div>\n\n            {/* Right Side - 30% */}\n            <div className=\"flex flex-col items-center justify-between w-32\">\n              {/* Profile Photo / Initials */}\n              <div \n                className=\"w-20 h-20 rounded-full flex items-center justify-center text-white font-bold text-sm mb-3\"\n                style={{ backgroundColor: department.color }}\n              >\n                {role.initials}\n              </div>\n\n              {/* Hire Button */}\n              <Button\n                onClick={() => handleHireEmployee(role, selectedDepartment)}\n                disabled={isAlreadyHired}\n                className=\"px-4 py-2 text-sm font-medium text-white transition-all duration-200 hover:shadow-lg rounded-lg\"\n                style={{ \n                  backgroundColor: isAlreadyHired ? '#666' : '#2e7d32',\n                  border: 'none',\n                  width: '100%'\n                }}\n              >\n                {isAlreadyHired ? '✓ Hired' : 'Hire Now'}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 overflow-auto\" \n      style={{ \n        backgroundColor: 'rgba(229, 222, 202, 0.15)',\n        backdropFilter: 'blur(8px)'\n      }}\n    >\n      {/* Top Navigation Bar */}\n      <header \n        className=\"sticky top-0 z-20 px-6 py-4 border-b shadow-sm\" \n        style={{ \n          backgroundColor: 'rgba(229, 222, 202, 0.9)', \n          borderBottomColor: '#d0c9b5' \n        }}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-800\">Elite Team</h1>\n            <p className=\"text-sm text-gray-600\">Build your dream team to achieve financial independence</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            {/* Menu Button with auto-hide on scroll */}\n            <Button\n              onClick={() => setShowMenuOverlay(true)}\n              variant=\"ghost\"\n              size=\"sm\"\n              className={`text-gray-700 hover:bg-gray-100 p-2 transition-all duration-300 ${\n                showMenuButton ? 'opacity-100 scale-100' : 'opacity-0 scale-95 pointer-events-none'\n              }`}\n            >\n              <MenuIcon />\n            </Button>\n            <Button\n              onClick={onClose}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-700 hover:bg-gray-100 p-2\"\n            >\n              <CloseIcon />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Menu Overlay Panel */}\n      {showMenuOverlay && (\n        <>\n          {/* Backdrop - clickable area to close menu */}\n          <div \n            className=\"fixed inset-0 z-30 bg-black bg-opacity-20\"\n            onClick={() => setShowMenuOverlay(false)}\n          />\n          \n          {/* Menu Panel */}\n          <div \n            ref={menuOverlayRef}\n            className=\"fixed right-0 top-0 h-full w-80 z-40 transform transition-transform duration-300 ease-in-out shadow-2xl\"\n            style={{ \n              backgroundColor: 'rgba(229, 222, 202, 0.05)',\n              backdropFilter: 'blur(10px)'\n            }}\n          >\n            <div className=\"p-6 pt-20\">\n              <div className=\"space-y-4\">\n                {[\n                  \"Executive\",\n                  \"Sales & Marketing\", \n                  \"Financial Management\",\n                  \"Consultant\",\n                  \"Product Design\",\n                  \"Legal & Compliance\",\n                  \"Human Resources\"\n                ].map((deptName) => {\n                  const dept = DEPARTMENTS[deptName];\n                  if (!dept) return null;\n                  \n                  return (\n                    <button\n                      key={deptName}\n                      onClick={() => {\n                        setSelectedDepartment(deptName);\n                        setShowMenuOverlay(false);\n                      }}\n                      className={`w-full text-left p-4 rounded-lg transition-all duration-200 flex items-center gap-3 ${\n                        selectedDepartment === deptName\n                          ? 'bg-white/30 font-semibold shadow-md'\n                          : 'hover:bg-white/20'\n                      }`}\n                      style={{ \n                        color: '#1a1a1a', \n                        opacity: 1,\n                        fontSize: '16px',\n                        fontWeight: selectedDepartment === deptName ? '600' : '500',\n                        textShadow: '0 1px 2px rgba(255,255,255,0.8)'\n                      }}\n                    >\n                      <span className=\"text-lg\">{dept.emoji}</span>\n                      <span>{deptName}</span>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Department Tabs */}\n      <div \n        className=\"sticky top-[73px] z-10 px-6 py-3 border-b\"\n        style={{ \n          backgroundColor: 'rgba(229, 222, 202, 0.9)', \n          borderBottomColor: '#d0c9b5' \n        }}\n      >\n        <div className=\"flex gap-2 overflow-x-auto pb-2\">\n          {Object.entries(DEPARTMENTS).map(([deptName, dept]) => (\n            <button\n              key={deptName}\n              onClick={() => setSelectedDepartment(deptName)}\n              className={`px-4 py-2 rounded-lg whitespace-nowrap text-sm font-medium transition-all duration-200 flex items-center gap-2 ${\n                selectedDepartment === deptName\n                  ? 'text-white shadow-lg'\n                  : 'text-gray-700 bg-white/50 hover:bg-white/70'\n              }`}\n              style={{\n                backgroundColor: selectedDepartment === deptName ? dept.color : undefined\n              }}\n            >\n              <span>{dept.emoji}</span>\n              <span>{deptName}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Content - Employee Cards */}\n      <div className=\"p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6\">\n          {DEPARTMENTS[selectedDepartment]?.roles.map((role) => (\n            <EmployeeCard \n              key={role.roleId} \n              role={role} \n              department={DEPARTMENTS[selectedDepartment]}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":25096},"client/src/components/game/Settings.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '../ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\nimport { Separator } from '../ui/separator';\nimport { Badge } from '../ui/badge';\nimport { \n  Settings as SettingsIcon, \n  Download, \n  Github, \n  Smartphone, \n  CheckCircle, \n  AlertCircle, \n  Loader2,\n  ExternalLink \n} from 'lucide-react';\n\ninterface BuildStatus {\n  step: 'github_push' | 'expo_publish' | 'expo_build' | 'polling' | 'complete' | 'error';\n  message: string;\n  success: boolean;\n  downloadUrl?: string;\n  error?: string;\n}\n\ninterface SettingsProps {\n  onClose: () => void;\n}\n\nexport default function Settings({ onClose }: SettingsProps) {\n  const [buildStatus, setBuildStatus] = useState<BuildStatus[]>([]);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  const handleDownloadAPK = async () => {\n    setIsBuilding(true);\n    setBuildStatus([]);\n\n    try {\n      const response = await fetch('/api/build-apk', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const reader = response.body?.getReader();\n      const decoder = new TextDecoder();\n\n      if (!reader) {\n        throw new Error('No response body');\n      }\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const status: BuildStatus = JSON.parse(line.slice(6));\n              setBuildStatus(prev => {\n                const existingIndex = prev.findIndex(s => s.step === status.step);\n                if (existingIndex >= 0) {\n                  const newStatus = [...prev];\n                  newStatus[existingIndex] = status;\n                  return newStatus;\n                } else {\n                  return [...prev, status];\n                }\n              });\n            } catch (e) {\n              console.error('Error parsing build status:', e);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      setBuildStatus(prev => [...prev, {\n        step: 'error',\n        message: 'Build process failed',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }]);\n    } finally {\n      setIsBuilding(false);\n    }\n  };\n\n  const getStatusIcon = (status: BuildStatus) => {\n    if (status.step === 'error') {\n      return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n    }\n    if (status.success) {\n      return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    }\n    return <Loader2 className=\"w-4 h-4 animate-spin text-blue-500\" />;\n  };\n\n  const getStepIcon = (step: string) => {\n    switch (step) {\n      case 'github_push':\n        return <Github className=\"w-4 h-4\" />;\n      case 'expo_publish':\n      case 'expo_build':\n      case 'polling':\n        return <Smartphone className=\"w-4 h-4\" />;\n      case 'complete':\n        return <Download className=\"w-4 h-4\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusMessage = (status: BuildStatus) => {\n    switch (status.step) {\n      case 'github_push':\n        return status.success ? '✅ GitHub push complete' : '🔄 Pushing to GitHub...';\n      case 'expo_publish':\n        return status.success ? '✅ Project published to Expo' : '🔄 Publishing to Expo...';\n      case 'expo_build':\n        return status.success ? '🔄 Expo build started' : '🔄 Starting Expo build...';\n      case 'polling':\n        return '⏳ Building APK...';\n      case 'complete':\n        return `📦 APK Ready: ${status.downloadUrl}`;\n      case 'error':\n        return `❌ ${status.message}`;\n      default:\n        return status.message;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <SettingsIcon className=\"w-5 h-5\" />\n              <CardTitle>Settings</CardTitle>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              ✕\n            </Button>\n          </div>\n          <CardDescription>\n            Configure your Wealth Sprint game settings\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* General Settings */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">General</h3>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span>Audio</span>\n                <Badge variant=\"secondary\">Enabled</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span>Notifications</span>\n                <Badge variant=\"secondary\">Enabled</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span>Auto-save</span>\n                <Badge variant=\"secondary\">Every 5 minutes</Badge>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Advanced Settings */}\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-lg font-semibold\">Advanced</h3>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => setShowAdvanced(!showAdvanced)}\n              >\n                {showAdvanced ? 'Hide' : 'Show'}\n              </Button>\n            </div>\n            \n            {showAdvanced && (\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                    <Smartphone className=\"w-4 h-4\" />\n                    Mobile APK Download\n                  </h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Generate and download an Android APK file for your mobile device\n                  </p>\n                  \n                  <Button \n                    onClick={handleDownloadAPK}\n                    disabled={isBuilding}\n                    className=\"w-full mb-3\"\n                  >\n                    {isBuilding ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Building APK...\n                      </>\n                    ) : (\n                      <>\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download APK\n                      </>\n                    )}\n                  </Button>\n\n                  {/* Build Status Display */}\n                  {buildStatus.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <div className=\"text-sm font-medium\">Build Status:</div>\n                      {buildStatus.map((status, index) => (\n                        <div key={index} className=\"flex items-center gap-2 text-sm\">\n                          {getStatusIcon(status)}\n                          {getStepIcon(status.step)}\n                          <span className={status.success ? 'text-green-700' : status.step === 'error' ? 'text-red-700' : 'text-blue-700'}>\n                            {getStatusMessage(status)}\n                          </span>\n                          {status.downloadUrl && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              asChild\n                              className=\"ml-auto\"\n                            >\n                              <a href={status.downloadUrl} download>\n                                <Download className=\"w-3 h-3 mr-1\" />\n                                Download APK\n                                <ExternalLink className=\"w-3 h-3 ml-1\" />\n                              </a>\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                      \n                      {/* Success Message */}\n                      {buildStatus.some(s => s.step === 'complete' && s.success && s.downloadUrl) && (\n                        <div className=\"mt-2 p-3 bg-green-50 border border-green-200 rounded text-sm\">\n                          <div className=\"text-green-800 font-medium\">\n                            📦 APK Ready: \n                            <a \n                              href={buildStatus.find(s => s.step === 'complete')?.downloadUrl} \n                              className=\"text-blue-600 hover:text-blue-800 underline ml-1\"\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              {buildStatus.find(s => s.step === 'complete')?.downloadUrl}\n                            </a>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {buildStatus.some(s => s.step === 'error') && (\n                        <div className=\"mt-2 p-2 bg-red-50 rounded text-sm text-red-700\">\n                          <strong>Error Details:</strong>\n                          <div className=\"mt-1 font-mono text-xs\">\n                            {buildStatus.find(s => s.step === 'error')?.error || 'Unknown error occurred'}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* About */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-3\">About</h3>\n            <div className=\"space-y-2 text-sm text-gray-600\">\n              <div>Version: 1.0.0</div>\n              <div>Build: Development</div>\n              <div>Last Updated: July 2025</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10570},"client/src/components/game/StockMarketTicker.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Button } from '../ui/button';\nimport { TrendingUp, TrendingDown, Play, Pause, RefreshCw, BarChart3, Activity } from 'lucide-react';\nimport { formatIndianCurrency } from '../../lib/utils';\n\ninterface StockData {\n  symbol: string;\n  name: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  marketCap: number;\n  sector: string;\n  high52Week: number;\n  low52Week: number;\n  lastUpdated: Date;\n}\n\ninterface MarketIndex {\n  name: string;\n  value: number;\n  change: number;\n  changePercent: number;\n}\n\nconst StockMarketTicker: React.FC = () => {\n  const [stocks, setStocks] = useState<StockData[]>([]);\n  const [marketIndices, setMarketIndices] = useState<MarketIndex[]>([]);\n  const [isLive, setIsLive] = useState(true);\n  const [selectedStock, setSelectedStock] = useState<StockData | null>(null);\n  const [tickerSpeed, setTickerSpeed] = useState(50);\n  const tickerRef = useRef<HTMLDivElement>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Initialize with realistic Indian stock data\n  const initializeStocks = (): StockData[] => {\n    return [\n      {\n        symbol: 'RELIANCE',\n        name: 'Reliance Industries',\n        price: 2847.50,\n        change: 23.75,\n        changePercent: 0.84,\n        volume: 5420000,\n        marketCap: 19250000000000,\n        sector: 'Oil & Gas',\n        high52Week: 3024.90,\n        low52Week: 2220.30,\n        lastUpdated: new Date()\n      },\n      {\n        symbol: 'TCS',\n        name: 'Tata Consultancy Services',\n        price: 4156.80,\n        change: -15.20,\n        changePercent: -0.36,\n        volume: 2890000,\n        marketCap: 15180000000000,\n        sector: 'IT Services',\n        high52Week: 4592.25,\n        low52Week: 3311.00,\n        lastUpdated: new Date()\n      },\n      {\n        symbol: 'INFY',\n        name: 'Infosys Limited',\n        price: 1789.45,\n        change: 8.90,\n        changePercent: 0.50,\n        volume: 3650000,\n        marketCap: 7450000000000,\n        sector: 'IT Services',\n        high52Week: 1953.90,\n        low52Week: 1351.65,\n        lastUpdated: new Date()\n      },\n      {\n        symbol: 'HDFCBANK',\n        name: 'HDFC Bank',\n        price: 1712.30,\n        change: -12.45,\n        changePercent: -0.72,\n        volume: 4230000,\n        marketCap: 12890000000000,\n        sector: 'Banking',\n        high52Week: 1794.50,\n        low52Week: 1363.55,\n        lastUpdated: new Date()\n      },\n      {\n        symbol: 'ICICIBANK',\n        name: 'ICICI Bank',\n        price: 1245.80,\n        change: 18.60,\n        changePercent: 1.52,\n        volume: 6780000,\n        marketCap: 8750000000000,\n        sector: 'Banking',\n        high52Week: 1257.35,\n        low52Week: 912.45,\n        lastUpdated: new Date()\n      },\n      {\n        symbol: 'BHARTIARTL',\n        name: 'Bharti Airtel',\n        price: 1598.25,\n        change: -7.80,\n        changePercent: -0.49,\n        volume: 2150000,\n        marketCap: 9320000000000,\n        sector: 'Telecom',\n        high52Week: 1619.90,\n        low52Week: 900.55,\n        lastUpdated: new Date()\n      },\n      {\n        symbol: 'ITC',\n        name: 'ITC Limited',\n        price: 456.70,\n        change: 3.25,\n        changePercent: 0.72,\n        volume: 8950000,\n        marketCap: 5680000000000,\n        sector: 'FMCG',\n        high52Week: 491.85,\n        low52Week: 398.40,\n        lastUpdated: new Date()\n      },\n      {\n        symbol: 'SBIN',\n        name: 'State Bank of India',\n        price: 789.45,\n        change: 11.30,\n        changePercent: 1.45,\n        volume: 12450000,\n        marketCap: 7030000000000,\n        sector: 'Banking',\n        high52Week: 912.25,\n        low52Week: 543.15,\n        lastUpdated: new Date()\n      }\n    ];\n  };\n\n  const initializeIndices = (): MarketIndex[] => {\n    return [\n      {\n        name: 'NIFTY 50',\n        value: 22785.45,\n        change: 125.80,\n        changePercent: 0.56\n      },\n      {\n        name: 'SENSEX',\n        value: 75124.30,\n        change: -89.25,\n        changePercent: -0.12\n      },\n      {\n        name: 'BANK NIFTY',\n        value: 48956.75,\n        change: 234.60,\n        changePercent: 0.48\n      }\n    ];\n  };\n\n  // Simulate real-time price updates\n  const updateStockPrices = () => {\n    setStocks(prevStocks => \n      prevStocks.map(stock => {\n        // Random price fluctuation between -2% to +2%\n        const changePercent = (Math.random() - 0.5) * 4;\n        const priceChange = stock.price * (changePercent / 100);\n        const newPrice = Math.max(stock.price + priceChange, 1);\n        \n        return {\n          ...stock,\n          price: parseFloat(newPrice.toFixed(2)),\n          change: parseFloat(priceChange.toFixed(2)),\n          changePercent: parseFloat(changePercent.toFixed(2)),\n          volume: stock.volume + Math.floor(Math.random() * 100000),\n          lastUpdated: new Date()\n        };\n      })\n    );\n\n    setMarketIndices(prevIndices =>\n      prevIndices.map(index => {\n        const changePercent = (Math.random() - 0.5) * 2;\n        const change = index.value * (changePercent / 100);\n        \n        return {\n          ...index,\n          value: parseFloat((index.value + change).toFixed(2)),\n          change: parseFloat(change.toFixed(2)),\n          changePercent: parseFloat(changePercent.toFixed(2))\n        };\n      })\n    );\n  };\n\n  useEffect(() => {\n    setStocks(initializeStocks());\n    setMarketIndices(initializeIndices());\n  }, []);\n\n  useEffect(() => {\n    if (isLive) {\n      intervalRef.current = setInterval(updateStockPrices, 3000); // Update every 3 seconds\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isLive]);\n\n  const formatVolume = (volume: number): string => {\n    if (volume >= 10000000) return `${(volume / 10000000).toFixed(1)}Cr`;\n    if (volume >= 100000) return `${(volume / 100000).toFixed(1)}L`;\n    return volume.toLocaleString();\n  };\n\n  const formatMarketCap = (marketCap: number): string => {\n    if (marketCap >= 1000000000000) return `₹${(marketCap / 1000000000000).toFixed(2)}T`;\n    if (marketCap >= 10000000000) return `₹${(marketCap / 10000000000).toFixed(2)}K Cr`;\n    return formatIndianCurrency(marketCap);\n  };\n\n  const getChangeColor = (change: number) => {\n    if (change > 0) return 'text-green-600';\n    if (change < 0) return 'text-red-600';\n    return 'text-gray-600';\n  };\n\n  const getChangeBgColor = (change: number) => {\n    if (change > 0) return 'bg-green-50 border-green-200';\n    if (change < 0) return 'bg-red-50 border-red-200';\n    return 'bg-gray-50 border-gray-200';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Market Indices Header */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-bold text-blue-900 flex items-center gap-2\">\n              <Activity className=\"w-5 h-5\" />\n              Live Market Indices\n            </CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setIsLive(!isLive)}\n                className={isLive ? 'border-green-500 text-green-700' : 'border-gray-400'}\n              >\n                {isLive ? <Pause className=\"w-4 h-4 mr-1\" /> : <Play className=\"w-4 h-4 mr-1\" />}\n                {isLive ? 'Live' : 'Paused'}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={updateStockPrices}\n                className=\"border-blue-400 text-blue-700\"\n              >\n                <RefreshCw className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4\">\n            {marketIndices.map((index, i) => (\n              <div key={i} className={`p-3 rounded-lg border ${getChangeBgColor(index.change)}`}>\n                <div className=\"text-sm font-medium text-gray-700\">{index.name}</div>\n                <div className=\"text-xl font-bold text-gray-900\">\n                  {index.value.toLocaleString('en-IN', { minimumFractionDigits: 2 })}\n                </div>\n                <div className={`text-sm flex items-center gap-1 ${getChangeColor(index.change)}`}>\n                  {index.change > 0 ? <TrendingUp className=\"w-3 h-3\" /> : <TrendingDown className=\"w-3 h-3\" />}\n                  {index.change > 0 ? '+' : ''}{index.change.toFixed(2)} ({index.changePercent.toFixed(2)}%)\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stock Ticker */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg font-bold flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5 text-green-600\" />\n            Real-Time Stock Ticker\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Scrolling Ticker */}\n          <div className=\"overflow-hidden bg-gray-900 rounded-lg mb-4\">\n            <div \n              ref={tickerRef}\n              className=\"flex items-center whitespace-nowrap ticker-scroll\"\n            >\n              {stocks.map((stock, index) => (\n                <div key={index} className=\"inline-flex items-center mx-6 text-white\">\n                  <span className=\"font-bold text-green-400\">{stock.symbol}</span>\n                  <span className=\"mx-2\">₹{stock.price.toFixed(2)}</span>\n                  <span className={stock.change >= 0 ? 'text-green-400' : 'text-red-400'}>\n                    {stock.change >= 0 ? '+' : ''}{stock.change.toFixed(2)} ({stock.changePercent.toFixed(2)}%)\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Stock Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {stocks.map((stock, index) => (\n              <Card \n                key={index} \n                className={`cursor-pointer transition-all duration-200 hover:shadow-lg ${getChangeBgColor(stock.change)} ${\n                  selectedStock?.symbol === stock.symbol ? 'ring-2 ring-blue-500' : ''\n                }`}\n                onClick={() => setSelectedStock(stock)}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {stock.symbol}\n                      </Badge>\n                      <Badge \n                        variant=\"secondary\" \n                        className={`text-xs ${getChangeColor(stock.change)}`}\n                      >\n                        {stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%\n                      </Badge>\n                    </div>\n                    \n                    <div>\n                      <div className=\"font-semibold text-sm text-gray-800 truncate\">\n                        {stock.name}\n                      </div>\n                      <div className=\"text-xs text-gray-600\">{stock.sector}</div>\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      <div className=\"text-lg font-bold text-gray-900\">\n                        ₹{stock.price.toFixed(2)}\n                      </div>\n                      <div className={`text-sm flex items-center gap-1 ${getChangeColor(stock.change)}`}>\n                        {stock.change > 0 ? <TrendingUp className=\"w-3 h-3\" /> : <TrendingDown className=\"w-3 h-3\" />}\n                        {stock.change >= 0 ? '+' : ''}₹{stock.change.toFixed(2)}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-xs text-gray-500 space-y-1\">\n                      <div>Vol: {formatVolume(stock.volume)}</div>\n                      <div>MCap: {formatMarketCap(stock.marketCap)}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Stock View */}\n      {selectedStock && (\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center justify-between\">\n              <span>{selectedStock.name} ({selectedStock.symbol})</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSelectedStock(null)}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                ×\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div>\n                <div className=\"text-sm text-gray-600\">Current Price</div>\n                <div className=\"text-xl font-bold\">₹{selectedStock.price.toFixed(2)}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-gray-600\">Day Change</div>\n                <div className={`text-lg font-semibold ${getChangeColor(selectedStock.change)}`}>\n                  {selectedStock.change >= 0 ? '+' : ''}₹{selectedStock.change.toFixed(2)} ({selectedStock.changePercent.toFixed(2)}%)\n                </div>\n              </div>\n              <div>\n                <div className=\"text-sm text-gray-600\">52W High</div>\n                <div className=\"text-lg font-semibold text-green-600\">₹{selectedStock.high52Week.toFixed(2)}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-gray-600\">52W Low</div>\n                <div className=\"text-lg font-semibold text-red-600\">₹{selectedStock.low52Week.toFixed(2)}</div>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 grid grid-cols-2 md:grid-cols-3 gap-4\">\n              <div>\n                <div className=\"text-sm text-gray-600\">Volume</div>\n                <div className=\"font-semibold\">{formatVolume(selectedStock.volume)}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-gray-600\">Market Cap</div>\n                <div className=\"font-semibold\">{formatMarketCap(selectedStock.marketCap)}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-gray-600\">Sector</div>\n                <div className=\"font-semibold\">{selectedStock.sector}</div>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 text-xs text-gray-500\">\n              Last updated: {selectedStock.lastUpdated.toLocaleTimeString()}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <style dangerouslySetInnerHTML={{\n        __html: `\n          @keyframes ticker-scroll {\n            0% { transform: translateX(100%); }\n            100% { transform: translateX(-100%); }\n          }\n          .ticker-scroll {\n            animation: ticker-scroll 60s linear infinite;\n          }\n        `\n      }} />\n    </div>\n  );\n};\n\nexport default StockMarketTicker;","size_bytes":15696}}}